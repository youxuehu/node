/* eslint-disable */
// tslint:disable
/**
 * Yeying API
 * 
 *
 * OpenAPI spec version: 1.0
 * Contact: yeying.community@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express, Request, Response, NextFunction } from 'express'
import { Api } from './models'
import { ApiOptions } from './types'

type ToFromRequestFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

let __options: ApiOptions | undefined

export function setValidationOptions(options: ApiOptions | undefined) {
	__options = options
}

/**
 * A conditional type to convert an interface model to the equivalent serialized model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the serialized model.
 */
type ToResponse<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToResponse<T[P]>
	}
	: T extends (infer R)[] ? ToResponse<R>[]
	: T

export function arrayFromRequest<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayFromRequestWithNullable<T>(next: ToFromRequestFunction<T | null>): ToFromRequestFunction<(T | null)[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: (T | null)[] = []
		for (const el of value) {
			if (value === null) {
				result.push(null)
			} else {
				result.push(next(name, el))
			}
		}
		return result
	}
}

export function arrayToResponse<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<T[]> {
	return arrayFromRequest(next)
}

export function arrayToResponseWithNullable<T>(next: ToFromRequestFunction<T | null>): ToFromRequestFunction<(T | null)[]> {
	return arrayFromRequestWithNullable(next)
}

export function mapFromRequest<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToResponse<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<MapOf<T>> {
	return mapFromRequest(next)
}

export function allowNull<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: ToFromRequestFunction<T>): ToFromRequestFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromRequest(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToResponse(name: string, value: unknown): any {
	return unsupportedFromRequest(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromRequest(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToResponse(name: string, value: boolean): any {
	return booleanFromRequest(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromRequest(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToResponse(name: string, value: string): any {
	return stringFromRequest(name, value)
}

export function binaryFromRequest(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return Buffer.from(value, 'base64')
}

export function binaryToResponse(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromRequest(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToResponse(name: string, value: number): any {
	return integerFromRequest(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromRequest(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToResponse(name: string, value: number): any {
	return numberFromRequest(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromRequest(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromRequest(name, value)
}

export function dateToResponse(name: string, value: string): string {
	return dateFromRequest(name, value)
}

export function dateTimeFromRequest(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromRequest(name, value)
}

export function dateTimeToResponse(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromRequest(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromRequest(name, value)
}

export function timeToResponse(name: string, value: string): string {
	return timeFromRequest(name, value)
}

export function verifyMinimumFiles(fieldName: string, minFileCount: number): (req: Request, res: Response, next: NextFunction) => void {
	return function(req: Request, res: Response, next: NextFunction) {
		if (!req.files || Array.isArray(req.files) || (req.files[fieldName] && req.files[fieldName].length < minFileCount)) {
			res.status(400).send(`The field '${fieldName}' requires a minimum of ${minFileCount} file(s)`)
		} else {
			next()
		}
	}
}

export function fileFromRequest(name: string, value: Express.Multer.File): any {
	if (typeof value !== 'object') {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}
	if (typeof value.fieldname !== 'string') {
		throw `Invalid type for ${name}.fieldname: expected string got ${typeof value.fieldname}`
	}
	if (typeof value.originalname !== 'string') {
		throw `Invalid type for ${name}.originalname: expected string got ${typeof value.originalname}`
	}
	if (typeof value.mimetype !== 'string') {
		throw `Invalid type for ${name}.mimetype: expected string got ${typeof value.mimetype}`
	}
	if (typeof value.size !== 'number') {
		throw `Invalid type for ${name}.size: expected number got ${typeof value.size}`
	}
	return value
}

/* Model conversion functions */

const ApiApicontentKnowledgeMetadataKeys: string[] = ['format', 'hash', 'author', 'source', 'publishTime', 'keyword', 'summary', 'content']

function modelApiApicontentKnowledgeMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApicontentKnowledgeMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentKnowledgeMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApicontentKnowledgeMetadata = {
		'format': allowUndefined(enumApiCommonDigitalFormatEnumFromRequest)(`${name}.format`, value['format']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'author': allowUndefined(stringFromRequest)(`${name}.author`, value['author']),
		'source': allowUndefined(stringFromRequest)(`${name}.source`, value['source']),
		'publishTime': allowUndefined(stringFromRequest)(`${name}.publishTime`, value['publishTime']),
		'keyword': allowUndefined(stringFromRequest)(`${name}.keyword`, value['keyword']),
		'summary': allowUndefined(stringFromRequest)(`${name}.summary`, value['summary']),
		'content': allowUndefined(stringFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiApicontentKnowledgeMetadataToResponseContent(name: string, value: Api.ApicontentKnowledgeMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApicontentKnowledgeMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentKnowledgeMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApicontentKnowledgeMetadata> = {
		'format': allowUndefined(enumApiCommonDigitalFormatEnumToResponse)(`${name}.format`, value['format']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'author': allowUndefined(stringToResponse)(`${name}.author`, value['author']),
		'source': allowUndefined(stringToResponse)(`${name}.source`, value['source']),
		'publishTime': allowUndefined(stringToResponse)(`${name}.publishTime`, value['publishTime']),
		'keyword': allowUndefined(stringToResponse)(`${name}.keyword`, value['keyword']),
		'summary': allowUndefined(stringToResponse)(`${name}.summary`, value['summary']),
		'content': allowUndefined(stringToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiApicontentKnowledgeMetadataFromRequest(name: string, value: any): Api.ApicontentKnowledgeMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApicontentKnowledgeMetadata = modelApiApicontentKnowledgeMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentKnowledgeMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiApicontentKnowledgeMetadataToResponse(name: string, value: Api.ApicontentKnowledgeMetadata): ToResponse<Api.ApicontentKnowledgeMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApicontentKnowledgeMetadata> = modelApiApicontentKnowledgeMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentKnowledgeMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiApicontentSearchRequestKeys: string[] = ['articleMetadata']

function modelApiApicontentSearchRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApicontentSearchRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentSearchRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApicontentSearchRequest = {
		'articleMetadata': allowUndefined(arrayFromRequest(modelApiApicontentKnowledgeMetadataFromRequest))(`${name}.articleMetadata`, value['articleMetadata']),
	}

	return result
}

function modelApiApicontentSearchRequestToResponseContent(name: string, value: Api.ApicontentSearchRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApicontentSearchRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentSearchRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApicontentSearchRequest> = {
		'articleMetadata': allowUndefined(arrayToResponse(modelApiApicontentKnowledgeMetadataToResponse))(`${name}.articleMetadata`, value['articleMetadata']),
	}

	return result
}

export function modelApiApicontentSearchRequestFromRequest(name: string, value: any): Api.ApicontentSearchRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApicontentSearchRequest = modelApiApicontentSearchRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentSearchRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApicontentSearchRequestToResponse(name: string, value: Api.ApicontentSearchRequest): ToResponse<Api.ApicontentSearchRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApicontentSearchRequest> = modelApiApicontentSearchRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentSearchRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApicontentSearchResponseKeys: string[] = ['status']

function modelApiApicontentSearchResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApicontentSearchResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentSearchResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApicontentSearchResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiApicontentSearchResponseToResponseContent(name: string, value: Api.ApicontentSearchResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApicontentSearchResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicontentSearchResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApicontentSearchResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiApicontentSearchResponseFromRequest(name: string, value: any): Api.ApicontentSearchResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApicontentSearchResponse = modelApiApicontentSearchResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentSearchResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApicontentSearchResponseToResponse(name: string, value: Api.ApicontentSearchResponse): ToResponse<Api.ApicontentSearchResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApicontentSearchResponse> = modelApiApicontentSearchResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicontentSearchResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApicorrectionTaskMetadataKeys: string[] = ['uid', 'name', 'description', 'tagUid', 'did', 'studentDidList', 'createdAt', 'updatedAt', 'startTime', 'endTime', 'isDeleted', 'status']

function modelApiApicorrectionTaskMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApicorrectionTaskMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicorrectionTaskMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApicorrectionTaskMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'tagUid': allowUndefined(stringFromRequest)(`${name}.tagUid`, value['tagUid']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'studentDidList': allowUndefined(stringFromRequest)(`${name}.studentDidList`, value['studentDidList']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'startTime': allowUndefined(stringFromRequest)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringFromRequest)(`${name}.endTime`, value['endTime']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
		'status': allowUndefined(enumApiCorrectionTaskStatusEnumFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiApicorrectionTaskMetadataToResponseContent(name: string, value: Api.ApicorrectionTaskMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApicorrectionTaskMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApicorrectionTaskMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApicorrectionTaskMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'tagUid': allowUndefined(stringToResponse)(`${name}.tagUid`, value['tagUid']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'studentDidList': allowUndefined(stringToResponse)(`${name}.studentDidList`, value['studentDidList']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'startTime': allowUndefined(stringToResponse)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringToResponse)(`${name}.endTime`, value['endTime']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
		'status': allowUndefined(enumApiCorrectionTaskStatusEnumToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiApicorrectionTaskMetadataFromRequest(name: string, value: any): Api.ApicorrectionTaskMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApicorrectionTaskMetadata = modelApiApicorrectionTaskMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicorrectionTaskMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiApicorrectionTaskMetadataToResponse(name: string, value: Api.ApicorrectionTaskMetadata): ToResponse<Api.ApicorrectionTaskMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApicorrectionTaskMetadata> = modelApiApicorrectionTaskMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApicorrectionTaskMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiApipluginSearchRequestKeys: string[] = ['owner', 'conditionList']

function modelApiApipluginSearchRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApipluginSearchRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApipluginSearchRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApipluginSearchRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'conditionList': allowUndefined(arrayFromRequest(modelApiPluginConditionFromRequest))(`${name}.conditionList`, value['conditionList']),
	}

	return result
}

function modelApiApipluginSearchRequestToResponseContent(name: string, value: Api.ApipluginSearchRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApipluginSearchRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApipluginSearchRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApipluginSearchRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'conditionList': allowUndefined(arrayToResponse(modelApiPluginConditionToResponse))(`${name}.conditionList`, value['conditionList']),
	}

	return result
}

export function modelApiApipluginSearchRequestFromRequest(name: string, value: any): Api.ApipluginSearchRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApipluginSearchRequest = modelApiApipluginSearchRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApipluginSearchRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApipluginSearchRequestToResponse(name: string, value: Api.ApipluginSearchRequest): ToResponse<Api.ApipluginSearchRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApipluginSearchRequest> = modelApiApipluginSearchRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApipluginSearchRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApipluginSearchResponseKeys: string[] = ['pluginItemList']

function modelApiApipluginSearchResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApipluginSearchResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApipluginSearchResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApipluginSearchResponse = {
		'pluginItemList': allowUndefined(arrayFromRequest(modelApiPluginPluginItemFromRequest))(`${name}.pluginItemList`, value['pluginItemList']),
	}

	return result
}

function modelApiApipluginSearchResponseToResponseContent(name: string, value: Api.ApipluginSearchResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApipluginSearchResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApipluginSearchResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApipluginSearchResponse> = {
		'pluginItemList': allowUndefined(arrayToResponse(modelApiPluginPluginItemToResponse))(`${name}.pluginItemList`, value['pluginItemList']),
	}

	return result
}

export function modelApiApipluginSearchResponseFromRequest(name: string, value: any): Api.ApipluginSearchResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApipluginSearchResponse = modelApiApipluginSearchResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApipluginSearchResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApipluginSearchResponseToResponse(name: string, value: Api.ApipluginSearchResponse): ToResponse<Api.ApipluginSearchResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApipluginSearchResponse> = modelApiApipluginSearchResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApipluginSearchResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApiragKnowledgeMetadataKeys: string[] = ['uid', 'app', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiApiragKnowledgeMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApiragKnowledgeMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApiragKnowledgeMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApiragKnowledgeMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringFromRequest)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiApiragKnowledgeMetadataToResponseContent(name: string, value: Api.ApiragKnowledgeMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApiragKnowledgeMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApiragKnowledgeMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApiragKnowledgeMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringToResponse)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiApiragKnowledgeMetadataFromRequest(name: string, value: any): Api.ApiragKnowledgeMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApiragKnowledgeMetadata = modelApiApiragKnowledgeMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApiragKnowledgeMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiApiragKnowledgeMetadataToResponse(name: string, value: Api.ApiragKnowledgeMetadata): ToResponse<Api.ApiragKnowledgeMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApiragKnowledgeMetadata> = modelApiApiragKnowledgeMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApiragKnowledgeMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiApitopicSearchRequestKeys: string[] = ['owner']

function modelApiApitopicSearchRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApitopicSearchRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApitopicSearchRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApitopicSearchRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
	}

	return result
}

function modelApiApitopicSearchRequestToResponseContent(name: string, value: Api.ApitopicSearchRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApitopicSearchRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApitopicSearchRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApitopicSearchRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
	}

	return result
}

export function modelApiApitopicSearchRequestFromRequest(name: string, value: any): Api.ApitopicSearchRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApitopicSearchRequest = modelApiApitopicSearchRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApitopicSearchRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApitopicSearchRequestToResponse(name: string, value: Api.ApitopicSearchRequest): ToResponse<Api.ApitopicSearchRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApitopicSearchRequest> = modelApiApitopicSearchRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApitopicSearchRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApitopicSearchResponseKeys: string[] = ['status', 'topicMetadata']

function modelApiApitopicSearchResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApitopicSearchResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApitopicSearchResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApitopicSearchResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'topicMetadata': allowUndefined(arrayFromRequest(modelApiTopicTopicMetadataFromRequest))(`${name}.topicMetadata`, value['topicMetadata']),
	}

	return result
}

function modelApiApitopicSearchResponseToResponseContent(name: string, value: Api.ApitopicSearchResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApitopicSearchResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApitopicSearchResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApitopicSearchResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'topicMetadata': allowUndefined(arrayToResponse(modelApiTopicTopicMetadataToResponse))(`${name}.topicMetadata`, value['topicMetadata']),
	}

	return result
}

export function modelApiApitopicSearchResponseFromRequest(name: string, value: any): Api.ApitopicSearchResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApitopicSearchResponse = modelApiApitopicSearchResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApitopicSearchResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApitopicSearchResponseToResponse(name: string, value: Api.ApitopicSearchResponse): ToResponse<Api.ApitopicSearchResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApitopicSearchResponse> = modelApiApitopicSearchResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApitopicSearchResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationApplicationDetailRequestKeys: string[] = ['header', 'body']

function modelApiApplicationApplicationDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationApplicationDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationApplicationDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationApplicationDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationApplicationDetailRequestToResponseContent(name: string, value: Api.ApplicationApplicationDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationApplicationDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationApplicationDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationApplicationDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationApplicationDetailRequestFromRequest(name: string, value: any): Api.ApplicationApplicationDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationApplicationDetailRequest = modelApiApplicationApplicationDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationApplicationDetailRequestToResponse(name: string, value: Api.ApplicationApplicationDetailRequest): ToResponse<Api.ApplicationApplicationDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationApplicationDetailRequest> = modelApiApplicationApplicationDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationApplicationDetailRequestBodyKeys: string[] = ['did', 'version']

function modelApiApplicationApplicationDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationApplicationDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationApplicationDetailRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
	}

	return result
}

function modelApiApplicationApplicationDetailRequestBodyToResponseContent(name: string, value: Api.ApplicationApplicationDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationApplicationDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationApplicationDetailRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
	}

	return result
}

export function modelApiApplicationApplicationDetailRequestBodyFromRequest(name: string, value: any): Api.ApplicationApplicationDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationApplicationDetailRequestBody = modelApiApplicationApplicationDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationApplicationDetailRequestBodyToResponse(name: string, value: Api.ApplicationApplicationDetailRequestBody): ToResponse<Api.ApplicationApplicationDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationApplicationDetailRequestBody> = modelApiApplicationApplicationDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationApplicationDetailResponseKeys: string[] = ['header', 'body']

function modelApiApplicationApplicationDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationApplicationDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationApplicationDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationApplicationDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationApplicationDetailResponseToResponseContent(name: string, value: Api.ApplicationApplicationDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationApplicationDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationApplicationDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationApplicationDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationApplicationDetailResponseFromRequest(name: string, value: any): Api.ApplicationApplicationDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationApplicationDetailResponse = modelApiApplicationApplicationDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationApplicationDetailResponseToResponse(name: string, value: Api.ApplicationApplicationDetailResponse): ToResponse<Api.ApplicationApplicationDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationApplicationDetailResponse> = modelApiApplicationApplicationDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationApplicationDetailResponseBodyKeys: string[] = ['status', 'application']

function modelApiApplicationApplicationDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationApplicationDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationApplicationDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'application': allowUndefined(modelApiCommonApplicationMetadataFromRequest)(`${name}.application`, value['application']),
	}

	return result
}

function modelApiApplicationApplicationDetailResponseBodyToResponseContent(name: string, value: Api.ApplicationApplicationDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationApplicationDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationApplicationDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationApplicationDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'application': allowUndefined(modelApiCommonApplicationMetadataToResponse)(`${name}.application`, value['application']),
	}

	return result
}

export function modelApiApplicationApplicationDetailResponseBodyFromRequest(name: string, value: any): Api.ApplicationApplicationDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationApplicationDetailResponseBody = modelApiApplicationApplicationDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationApplicationDetailResponseBodyToResponse(name: string, value: Api.ApplicationApplicationDetailResponseBody): ToResponse<Api.ApplicationApplicationDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationApplicationDetailResponseBody> = modelApiApplicationApplicationDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationApplicationDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationCreateApplicationRequestKeys: string[] = ['header', 'body']

function modelApiApplicationCreateApplicationRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationCreateApplicationRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationCreateApplicationRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationCreateApplicationRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationCreateApplicationRequestToResponseContent(name: string, value: Api.ApplicationCreateApplicationRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationCreateApplicationRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationCreateApplicationRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationCreateApplicationRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationCreateApplicationRequestFromRequest(name: string, value: any): Api.ApplicationCreateApplicationRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationCreateApplicationRequest = modelApiApplicationCreateApplicationRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationCreateApplicationRequestToResponse(name: string, value: Api.ApplicationCreateApplicationRequest): ToResponse<Api.ApplicationCreateApplicationRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationCreateApplicationRequest> = modelApiApplicationCreateApplicationRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationCreateApplicationRequestBodyKeys: string[] = ['application']

function modelApiApplicationCreateApplicationRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationCreateApplicationRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationCreateApplicationRequestBody = {
		'application': allowUndefined(modelApiCommonApplicationMetadataFromRequest)(`${name}.application`, value['application']),
	}

	return result
}

function modelApiApplicationCreateApplicationRequestBodyToResponseContent(name: string, value: Api.ApplicationCreateApplicationRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationCreateApplicationRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationCreateApplicationRequestBody> = {
		'application': allowUndefined(modelApiCommonApplicationMetadataToResponse)(`${name}.application`, value['application']),
	}

	return result
}

export function modelApiApplicationCreateApplicationRequestBodyFromRequest(name: string, value: any): Api.ApplicationCreateApplicationRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationCreateApplicationRequestBody = modelApiApplicationCreateApplicationRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationCreateApplicationRequestBodyToResponse(name: string, value: Api.ApplicationCreateApplicationRequestBody): ToResponse<Api.ApplicationCreateApplicationRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationCreateApplicationRequestBody> = modelApiApplicationCreateApplicationRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationCreateApplicationResponseKeys: string[] = ['header', 'body']

function modelApiApplicationCreateApplicationResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationCreateApplicationResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationCreateApplicationResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationCreateApplicationResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationCreateApplicationResponseToResponseContent(name: string, value: Api.ApplicationCreateApplicationResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationCreateApplicationResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationCreateApplicationResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationCreateApplicationResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationCreateApplicationResponseFromRequest(name: string, value: any): Api.ApplicationCreateApplicationResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationCreateApplicationResponse = modelApiApplicationCreateApplicationResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationCreateApplicationResponseToResponse(name: string, value: Api.ApplicationCreateApplicationResponse): ToResponse<Api.ApplicationCreateApplicationResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationCreateApplicationResponse> = modelApiApplicationCreateApplicationResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationCreateApplicationResponseBodyKeys: string[] = ['status', 'application']

function modelApiApplicationCreateApplicationResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationCreateApplicationResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationCreateApplicationResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'application': allowUndefined(modelApiCommonApplicationMetadataFromRequest)(`${name}.application`, value['application']),
	}

	return result
}

function modelApiApplicationCreateApplicationResponseBodyToResponseContent(name: string, value: Api.ApplicationCreateApplicationResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationCreateApplicationResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationCreateApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationCreateApplicationResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'application': allowUndefined(modelApiCommonApplicationMetadataToResponse)(`${name}.application`, value['application']),
	}

	return result
}

export function modelApiApplicationCreateApplicationResponseBodyFromRequest(name: string, value: any): Api.ApplicationCreateApplicationResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationCreateApplicationResponseBody = modelApiApplicationCreateApplicationResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationCreateApplicationResponseBodyToResponse(name: string, value: Api.ApplicationCreateApplicationResponseBody): ToResponse<Api.ApplicationCreateApplicationResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationCreateApplicationResponseBody> = modelApiApplicationCreateApplicationResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationCreateApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationDeleteApplicationRequestKeys: string[] = ['header', 'body']

function modelApiApplicationDeleteApplicationRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationDeleteApplicationRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationDeleteApplicationRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationDeleteApplicationRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationDeleteApplicationRequestToResponseContent(name: string, value: Api.ApplicationDeleteApplicationRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationDeleteApplicationRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationDeleteApplicationRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationDeleteApplicationRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationDeleteApplicationRequestFromRequest(name: string, value: any): Api.ApplicationDeleteApplicationRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationDeleteApplicationRequest = modelApiApplicationDeleteApplicationRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationDeleteApplicationRequestToResponse(name: string, value: Api.ApplicationDeleteApplicationRequest): ToResponse<Api.ApplicationDeleteApplicationRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationDeleteApplicationRequest> = modelApiApplicationDeleteApplicationRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationDeleteApplicationRequestBodyKeys: string[] = ['did', 'version']

function modelApiApplicationDeleteApplicationRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationDeleteApplicationRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationDeleteApplicationRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
	}

	return result
}

function modelApiApplicationDeleteApplicationRequestBodyToResponseContent(name: string, value: Api.ApplicationDeleteApplicationRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationDeleteApplicationRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationDeleteApplicationRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
	}

	return result
}

export function modelApiApplicationDeleteApplicationRequestBodyFromRequest(name: string, value: any): Api.ApplicationDeleteApplicationRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationDeleteApplicationRequestBody = modelApiApplicationDeleteApplicationRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationDeleteApplicationRequestBodyToResponse(name: string, value: Api.ApplicationDeleteApplicationRequestBody): ToResponse<Api.ApplicationDeleteApplicationRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationDeleteApplicationRequestBody> = modelApiApplicationDeleteApplicationRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationDeleteApplicationResponseKeys: string[] = ['header', 'body']

function modelApiApplicationDeleteApplicationResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationDeleteApplicationResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationDeleteApplicationResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationDeleteApplicationResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationDeleteApplicationResponseToResponseContent(name: string, value: Api.ApplicationDeleteApplicationResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationDeleteApplicationResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationDeleteApplicationResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationDeleteApplicationResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationDeleteApplicationResponseFromRequest(name: string, value: any): Api.ApplicationDeleteApplicationResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationDeleteApplicationResponse = modelApiApplicationDeleteApplicationResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationDeleteApplicationResponseToResponse(name: string, value: Api.ApplicationDeleteApplicationResponse): ToResponse<Api.ApplicationDeleteApplicationResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationDeleteApplicationResponse> = modelApiApplicationDeleteApplicationResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationDeleteApplicationResponseBodyKeys: string[] = ['status']

function modelApiApplicationDeleteApplicationResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationDeleteApplicationResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationDeleteApplicationResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiApplicationDeleteApplicationResponseBodyToResponseContent(name: string, value: Api.ApplicationDeleteApplicationResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationDeleteApplicationResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationDeleteApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationDeleteApplicationResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiApplicationDeleteApplicationResponseBodyFromRequest(name: string, value: any): Api.ApplicationDeleteApplicationResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationDeleteApplicationResponseBody = modelApiApplicationDeleteApplicationResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationDeleteApplicationResponseBodyToResponse(name: string, value: Api.ApplicationDeleteApplicationResponseBody): ToResponse<Api.ApplicationDeleteApplicationResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationDeleteApplicationResponseBody> = modelApiApplicationDeleteApplicationResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationDeleteApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationSearchApplicationConditionKeys: string[] = ['code', 'status', 'owner', 'name', 'keyword']

function modelApiApplicationSearchApplicationConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationSearchApplicationCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationSearchApplicationCondition = {
		'code': allowUndefined(enumApiCommonApplicationCodeEnumFromRequest)(`${name}.code`, value['code']),
		'status': allowUndefined(enumApiCommonApplicationStatusEnumFromRequest)(`${name}.status`, value['status']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'keyword': allowUndefined(stringFromRequest)(`${name}.keyword`, value['keyword']),
	}

	return result
}

function modelApiApplicationSearchApplicationConditionToResponseContent(name: string, value: Api.ApplicationSearchApplicationCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationSearchApplicationCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationSearchApplicationCondition> = {
		'code': allowUndefined(enumApiCommonApplicationCodeEnumToResponse)(`${name}.code`, value['code']),
		'status': allowUndefined(enumApiCommonApplicationStatusEnumToResponse)(`${name}.status`, value['status']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'keyword': allowUndefined(stringToResponse)(`${name}.keyword`, value['keyword']),
	}

	return result
}

export function modelApiApplicationSearchApplicationConditionFromRequest(name: string, value: any): Api.ApplicationSearchApplicationCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationSearchApplicationCondition = modelApiApplicationSearchApplicationConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationSearchApplicationConditionToResponse(name: string, value: Api.ApplicationSearchApplicationCondition): ToResponse<Api.ApplicationSearchApplicationCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationSearchApplicationCondition> = modelApiApplicationSearchApplicationConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationCondition: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationSearchApplicationRequestKeys: string[] = ['header', 'body']

function modelApiApplicationSearchApplicationRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationSearchApplicationRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationSearchApplicationRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationSearchApplicationRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationSearchApplicationRequestToResponseContent(name: string, value: Api.ApplicationSearchApplicationRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationSearchApplicationRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationSearchApplicationRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationSearchApplicationRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationSearchApplicationRequestFromRequest(name: string, value: any): Api.ApplicationSearchApplicationRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationSearchApplicationRequest = modelApiApplicationSearchApplicationRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationSearchApplicationRequestToResponse(name: string, value: Api.ApplicationSearchApplicationRequest): ToResponse<Api.ApplicationSearchApplicationRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationSearchApplicationRequest> = modelApiApplicationSearchApplicationRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationRequest: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationSearchApplicationRequestBodyKeys: string[] = ['condition', 'page']

function modelApiApplicationSearchApplicationRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationSearchApplicationRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationSearchApplicationRequestBody = {
		'condition': allowUndefined(modelApiApplicationSearchApplicationConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiApplicationSearchApplicationRequestBodyToResponseContent(name: string, value: Api.ApplicationSearchApplicationRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationSearchApplicationRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationSearchApplicationRequestBody> = {
		'condition': allowUndefined(modelApiApplicationSearchApplicationConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiApplicationSearchApplicationRequestBodyFromRequest(name: string, value: any): Api.ApplicationSearchApplicationRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationSearchApplicationRequestBody = modelApiApplicationSearchApplicationRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationSearchApplicationRequestBodyToResponse(name: string, value: Api.ApplicationSearchApplicationRequestBody): ToResponse<Api.ApplicationSearchApplicationRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationSearchApplicationRequestBody> = modelApiApplicationSearchApplicationRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationSearchApplicationResponseKeys: string[] = ['header', 'body']

function modelApiApplicationSearchApplicationResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationSearchApplicationResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationSearchApplicationResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationSearchApplicationResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiApplicationSearchApplicationResponseToResponseContent(name: string, value: Api.ApplicationSearchApplicationResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationSearchApplicationResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationSearchApplicationResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiApplicationSearchApplicationResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiApplicationSearchApplicationResponseFromRequest(name: string, value: any): Api.ApplicationSearchApplicationResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationSearchApplicationResponse = modelApiApplicationSearchApplicationResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationSearchApplicationResponseToResponse(name: string, value: Api.ApplicationSearchApplicationResponse): ToResponse<Api.ApplicationSearchApplicationResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationSearchApplicationResponse> = modelApiApplicationSearchApplicationResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationResponse: ${key}`
			}
		}
	}

	return result
}

const ApiApplicationSearchApplicationResponseBodyKeys: string[] = ['status', 'applications', 'page']

function modelApiApplicationSearchApplicationResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApplicationSearchApplicationResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApplicationSearchApplicationResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'applications': allowUndefined(arrayFromRequest(modelApiCommonApplicationMetadataFromRequest))(`${name}.applications`, value['applications']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiApplicationSearchApplicationResponseBodyToResponseContent(name: string, value: Api.ApplicationSearchApplicationResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ApplicationSearchApplicationResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApplicationSearchApplicationResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ApplicationSearchApplicationResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'applications': allowUndefined(arrayToResponse(modelApiCommonApplicationMetadataToResponse))(`${name}.applications`, value['applications']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiApplicationSearchApplicationResponseBodyFromRequest(name: string, value: any): Api.ApplicationSearchApplicationResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApplicationSearchApplicationResponseBody = modelApiApplicationSearchApplicationResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiApplicationSearchApplicationResponseBodyToResponse(name: string, value: Api.ApplicationSearchApplicationResponseBody): ToResponse<Api.ApplicationSearchApplicationResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ApplicationSearchApplicationResponseBody> = modelApiApplicationSearchApplicationResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ApplicationSearchApplicationResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetAssetDetailRequestKeys: string[] = ['header', 'body']

function modelApiAssetAssetDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetAssetDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetAssetDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetAssetDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetAssetDetailRequestToResponseContent(name: string, value: Api.AssetAssetDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetAssetDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetAssetDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetAssetDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetAssetDetailRequestFromRequest(name: string, value: any): Api.AssetAssetDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetAssetDetailRequest = modelApiAssetAssetDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetAssetDetailRequestToResponse(name: string, value: Api.AssetAssetDetailRequest): ToResponse<Api.AssetAssetDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetAssetDetailRequest> = modelApiAssetAssetDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetAssetDetailRequestBodyKeys: string[] = ['hash', 'namespaceId']

function modelApiAssetAssetDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetAssetDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetAssetDetailRequestBody = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

function modelApiAssetAssetDetailRequestBodyToResponseContent(name: string, value: Api.AssetAssetDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetAssetDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetAssetDetailRequestBody> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

export function modelApiAssetAssetDetailRequestBodyFromRequest(name: string, value: any): Api.AssetAssetDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetAssetDetailRequestBody = modelApiAssetAssetDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetAssetDetailRequestBodyToResponse(name: string, value: Api.AssetAssetDetailRequestBody): ToResponse<Api.AssetAssetDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetAssetDetailRequestBody> = modelApiAssetAssetDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetAssetDetailResponseKeys: string[] = ['header', 'body']

function modelApiAssetAssetDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetAssetDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetAssetDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetAssetDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetAssetDetailResponseToResponseContent(name: string, value: Api.AssetAssetDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetAssetDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetAssetDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetAssetDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetAssetDetailResponseFromRequest(name: string, value: any): Api.AssetAssetDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetAssetDetailResponse = modelApiAssetAssetDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetAssetDetailResponseToResponse(name: string, value: Api.AssetAssetDetailResponse): ToResponse<Api.AssetAssetDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetAssetDetailResponse> = modelApiAssetAssetDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetAssetDetailResponseBodyKeys: string[] = ['status', 'asset']

function modelApiAssetAssetDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetAssetDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetAssetDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
	}

	return result
}

function modelApiAssetAssetDetailResponseBodyToResponseContent(name: string, value: Api.AssetAssetDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetAssetDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetAssetDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
	}

	return result
}

export function modelApiAssetAssetDetailResponseBodyFromRequest(name: string, value: any): Api.AssetAssetDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetAssetDetailResponseBody = modelApiAssetAssetDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetAssetDetailResponseBodyToResponse(name: string, value: Api.AssetAssetDetailResponseBody): ToResponse<Api.AssetAssetDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetAssetDetailResponseBody> = modelApiAssetAssetDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetAssetMetadataKeys: string[] = ['namespaceId', 'owner', 'parentHash', 'hash', 'version', 'name', 'chunks', 'description', 'format', 'size', 'createdAt', 'updatedAt', 'chunkCount', 'chunkSize', 'isEncrypted', 'signature']

function modelApiAssetAssetMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetAssetMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetAssetMetadata = {
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'parentHash': allowUndefined(stringFromRequest)(`${name}.parentHash`, value['parentHash']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'chunks': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.chunks`, value['chunks']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'format': allowUndefined(enumApiCommonDigitalFormatEnumFromRequest)(`${name}.format`, value['format']),
		'size': allowUndefined(stringFromRequest)(`${name}.size`, value['size']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'chunkCount': allowUndefined(integerFromRequest)(`${name}.chunkCount`, value['chunkCount']),
		'chunkSize': allowUndefined(integerFromRequest)(`${name}.chunkSize`, value['chunkSize']),
		'isEncrypted': allowUndefined(booleanFromRequest)(`${name}.isEncrypted`, value['isEncrypted']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetAssetMetadataToResponseContent(name: string, value: Api.AssetAssetMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetAssetMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetAssetMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetAssetMetadata> = {
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'parentHash': allowUndefined(stringToResponse)(`${name}.parentHash`, value['parentHash']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'chunks': allowUndefined(arrayToResponse(stringToResponse))(`${name}.chunks`, value['chunks']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'format': allowUndefined(enumApiCommonDigitalFormatEnumToResponse)(`${name}.format`, value['format']),
		'size': allowUndefined(stringToResponse)(`${name}.size`, value['size']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'chunkCount': allowUndefined(integerToResponse)(`${name}.chunkCount`, value['chunkCount']),
		'chunkSize': allowUndefined(integerToResponse)(`${name}.chunkSize`, value['chunkSize']),
		'isEncrypted': allowUndefined(booleanToResponse)(`${name}.isEncrypted`, value['isEncrypted']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetAssetMetadataFromRequest(name: string, value: any): Api.AssetAssetMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetAssetMetadata = modelApiAssetAssetMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetAssetMetadataToResponse(name: string, value: Api.AssetAssetMetadata): ToResponse<Api.AssetAssetMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetAssetMetadata> = modelApiAssetAssetMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetAssetMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAssetBlockMetadataKeys: string[] = ['namespaceId', 'uploader', 'owner', 'hash', 'size', 'createdAt', 'signature']

function modelApiAssetBlockMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetBlockMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetBlockMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetBlockMetadata = {
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'uploader': allowUndefined(stringFromRequest)(`${name}.uploader`, value['uploader']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'size': allowUndefined(stringFromRequest)(`${name}.size`, value['size']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetBlockMetadataToResponseContent(name: string, value: Api.AssetBlockMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetBlockMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetBlockMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetBlockMetadata> = {
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'uploader': allowUndefined(stringToResponse)(`${name}.uploader`, value['uploader']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'size': allowUndefined(stringToResponse)(`${name}.size`, value['size']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetBlockMetadataFromRequest(name: string, value: any): Api.AssetBlockMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetBlockMetadata = modelApiAssetBlockMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetBlockMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetBlockMetadataToResponse(name: string, value: Api.AssetBlockMetadata): ToResponse<Api.AssetBlockMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetBlockMetadata> = modelApiAssetBlockMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetBlockMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAssetConfirmBlockRequestKeys: string[] = ['header', 'body']

function modelApiAssetConfirmBlockRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetConfirmBlockRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetConfirmBlockRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetConfirmBlockRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetConfirmBlockRequestToResponseContent(name: string, value: Api.AssetConfirmBlockRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetConfirmBlockRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetConfirmBlockRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetConfirmBlockRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetConfirmBlockRequestFromRequest(name: string, value: any): Api.AssetConfirmBlockRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetConfirmBlockRequest = modelApiAssetConfirmBlockRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetConfirmBlockRequestToResponse(name: string, value: Api.AssetConfirmBlockRequest): ToResponse<Api.AssetConfirmBlockRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetConfirmBlockRequest> = modelApiAssetConfirmBlockRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetConfirmBlockRequestBodyKeys: string[] = ['block']

function modelApiAssetConfirmBlockRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetConfirmBlockRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetConfirmBlockRequestBody = {
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetConfirmBlockRequestBodyToResponseContent(name: string, value: Api.AssetConfirmBlockRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetConfirmBlockRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetConfirmBlockRequestBody> = {
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetConfirmBlockRequestBodyFromRequest(name: string, value: any): Api.AssetConfirmBlockRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetConfirmBlockRequestBody = modelApiAssetConfirmBlockRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetConfirmBlockRequestBodyToResponse(name: string, value: Api.AssetConfirmBlockRequestBody): ToResponse<Api.AssetConfirmBlockRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetConfirmBlockRequestBody> = modelApiAssetConfirmBlockRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetConfirmBlockResponseKeys: string[] = ['header', 'body']

function modelApiAssetConfirmBlockResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetConfirmBlockResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetConfirmBlockResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetConfirmBlockResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetConfirmBlockResponseToResponseContent(name: string, value: Api.AssetConfirmBlockResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetConfirmBlockResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetConfirmBlockResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetConfirmBlockResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetConfirmBlockResponseFromRequest(name: string, value: any): Api.AssetConfirmBlockResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetConfirmBlockResponse = modelApiAssetConfirmBlockResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetConfirmBlockResponseToResponse(name: string, value: Api.AssetConfirmBlockResponse): ToResponse<Api.AssetConfirmBlockResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetConfirmBlockResponse> = modelApiAssetConfirmBlockResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetConfirmBlockResponseBodyKeys: string[] = ['status', 'block']

function modelApiAssetConfirmBlockResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetConfirmBlockResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetConfirmBlockResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetConfirmBlockResponseBodyToResponseContent(name: string, value: Api.AssetConfirmBlockResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetConfirmBlockResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetConfirmBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetConfirmBlockResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetConfirmBlockResponseBodyFromRequest(name: string, value: any): Api.AssetConfirmBlockResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetConfirmBlockResponseBody = modelApiAssetConfirmBlockResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetConfirmBlockResponseBodyToResponse(name: string, value: Api.AssetConfirmBlockResponseBody): ToResponse<Api.AssetConfirmBlockResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetConfirmBlockResponseBody> = modelApiAssetConfirmBlockResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetConfirmBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateLinkRequestKeys: string[] = ['header', 'body']

function modelApiAssetCreateLinkRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateLinkRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateLinkRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateLinkRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetCreateLinkRequestToResponseContent(name: string, value: Api.AssetCreateLinkRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateLinkRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateLinkRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateLinkRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetCreateLinkRequestFromRequest(name: string, value: any): Api.AssetCreateLinkRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateLinkRequest = modelApiAssetCreateLinkRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateLinkRequestToResponse(name: string, value: Api.AssetCreateLinkRequest): ToResponse<Api.AssetCreateLinkRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateLinkRequest> = modelApiAssetCreateLinkRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateLinkRequestBodyKeys: string[] = ['link']

function modelApiAssetCreateLinkRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateLinkRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateLinkRequestBody = {
		'link': allowUndefined(modelApiAssetLinkMetadataFromRequest)(`${name}.link`, value['link']),
	}

	return result
}

function modelApiAssetCreateLinkRequestBodyToResponseContent(name: string, value: Api.AssetCreateLinkRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateLinkRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateLinkRequestBody> = {
		'link': allowUndefined(modelApiAssetLinkMetadataToResponse)(`${name}.link`, value['link']),
	}

	return result
}

export function modelApiAssetCreateLinkRequestBodyFromRequest(name: string, value: any): Api.AssetCreateLinkRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateLinkRequestBody = modelApiAssetCreateLinkRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateLinkRequestBodyToResponse(name: string, value: Api.AssetCreateLinkRequestBody): ToResponse<Api.AssetCreateLinkRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateLinkRequestBody> = modelApiAssetCreateLinkRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateLinkResponseKeys: string[] = ['header', 'body']

function modelApiAssetCreateLinkResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateLinkResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateLinkResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateLinkResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetCreateLinkResponseToResponseContent(name: string, value: Api.AssetCreateLinkResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateLinkResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateLinkResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateLinkResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetCreateLinkResponseFromRequest(name: string, value: any): Api.AssetCreateLinkResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateLinkResponse = modelApiAssetCreateLinkResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateLinkResponseToResponse(name: string, value: Api.AssetCreateLinkResponse): ToResponse<Api.AssetCreateLinkResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateLinkResponse> = modelApiAssetCreateLinkResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateLinkResponseBodyKeys: string[] = ['status', 'detail']

function modelApiAssetCreateLinkResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateLinkResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateLinkResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiAssetCreateLinkResponseBodyToResponseContent(name: string, value: Api.AssetCreateLinkResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateLinkResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateLinkResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiAssetCreateLinkResponseBodyFromRequest(name: string, value: any): Api.AssetCreateLinkResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateLinkResponseBody = modelApiAssetCreateLinkResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateLinkResponseBodyToResponse(name: string, value: Api.AssetCreateLinkResponseBody): ToResponse<Api.AssetCreateLinkResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateLinkResponseBody> = modelApiAssetCreateLinkResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateNamespaceRequestKeys: string[] = ['header', 'body']

function modelApiAssetCreateNamespaceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateNamespaceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateNamespaceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateNamespaceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetCreateNamespaceRequestToResponseContent(name: string, value: Api.AssetCreateNamespaceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateNamespaceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateNamespaceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateNamespaceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetCreateNamespaceRequestFromRequest(name: string, value: any): Api.AssetCreateNamespaceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateNamespaceRequest = modelApiAssetCreateNamespaceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateNamespaceRequestToResponse(name: string, value: Api.AssetCreateNamespaceRequest): ToResponse<Api.AssetCreateNamespaceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateNamespaceRequest> = modelApiAssetCreateNamespaceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateNamespaceRequestBodyKeys: string[] = ['namespace']

function modelApiAssetCreateNamespaceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateNamespaceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateNamespaceRequestBody = {
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataFromRequest)(`${name}.namespace`, value['namespace']),
	}

	return result
}

function modelApiAssetCreateNamespaceRequestBodyToResponseContent(name: string, value: Api.AssetCreateNamespaceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateNamespaceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateNamespaceRequestBody> = {
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataToResponse)(`${name}.namespace`, value['namespace']),
	}

	return result
}

export function modelApiAssetCreateNamespaceRequestBodyFromRequest(name: string, value: any): Api.AssetCreateNamespaceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateNamespaceRequestBody = modelApiAssetCreateNamespaceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateNamespaceRequestBodyToResponse(name: string, value: Api.AssetCreateNamespaceRequestBody): ToResponse<Api.AssetCreateNamespaceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateNamespaceRequestBody> = modelApiAssetCreateNamespaceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateNamespaceResponseKeys: string[] = ['header', 'body']

function modelApiAssetCreateNamespaceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateNamespaceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateNamespaceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateNamespaceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetCreateNamespaceResponseToResponseContent(name: string, value: Api.AssetCreateNamespaceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateNamespaceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateNamespaceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetCreateNamespaceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetCreateNamespaceResponseFromRequest(name: string, value: any): Api.AssetCreateNamespaceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateNamespaceResponse = modelApiAssetCreateNamespaceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateNamespaceResponseToResponse(name: string, value: Api.AssetCreateNamespaceResponse): ToResponse<Api.AssetCreateNamespaceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateNamespaceResponse> = modelApiAssetCreateNamespaceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetCreateNamespaceResponseBodyKeys: string[] = ['status', 'namespace']

function modelApiAssetCreateNamespaceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetCreateNamespaceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetCreateNamespaceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataFromRequest)(`${name}.namespace`, value['namespace']),
	}

	return result
}

function modelApiAssetCreateNamespaceResponseBodyToResponseContent(name: string, value: Api.AssetCreateNamespaceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetCreateNamespaceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetCreateNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetCreateNamespaceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataToResponse)(`${name}.namespace`, value['namespace']),
	}

	return result
}

export function modelApiAssetCreateNamespaceResponseBodyFromRequest(name: string, value: any): Api.AssetCreateNamespaceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetCreateNamespaceResponseBody = modelApiAssetCreateNamespaceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetCreateNamespaceResponseBodyToResponse(name: string, value: Api.AssetCreateNamespaceResponseBody): ToResponse<Api.AssetCreateNamespaceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetCreateNamespaceResponseBody> = modelApiAssetCreateNamespaceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetCreateNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetDeleteAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDeleteAssetRequestToResponseContent(name: string, value: Api.AssetDeleteAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDeleteAssetRequestFromRequest(name: string, value: any): Api.AssetDeleteAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteAssetRequest = modelApiAssetDeleteAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteAssetRequestToResponse(name: string, value: Api.AssetDeleteAssetRequest): ToResponse<Api.AssetDeleteAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteAssetRequest> = modelApiAssetDeleteAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteAssetRequestBodyKeys: string[] = ['hash', 'namespaceId']

function modelApiAssetDeleteAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteAssetRequestBody = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

function modelApiAssetDeleteAssetRequestBodyToResponseContent(name: string, value: Api.AssetDeleteAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteAssetRequestBody> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

export function modelApiAssetDeleteAssetRequestBodyFromRequest(name: string, value: any): Api.AssetDeleteAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteAssetRequestBody = modelApiAssetDeleteAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteAssetRequestBodyToResponse(name: string, value: Api.AssetDeleteAssetRequestBody): ToResponse<Api.AssetDeleteAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteAssetRequestBody> = modelApiAssetDeleteAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetDeleteAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDeleteAssetResponseToResponseContent(name: string, value: Api.AssetDeleteAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDeleteAssetResponseFromRequest(name: string, value: any): Api.AssetDeleteAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteAssetResponse = modelApiAssetDeleteAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteAssetResponseToResponse(name: string, value: Api.AssetDeleteAssetResponse): ToResponse<Api.AssetDeleteAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteAssetResponse> = modelApiAssetDeleteAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteAssetResponseBodyKeys: string[] = ['status']

function modelApiAssetDeleteAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetDeleteAssetResponseBodyToResponseContent(name: string, value: Api.AssetDeleteAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetDeleteAssetResponseBodyFromRequest(name: string, value: any): Api.AssetDeleteAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteAssetResponseBody = modelApiAssetDeleteAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteAssetResponseBodyToResponse(name: string, value: Api.AssetDeleteAssetResponseBody): ToResponse<Api.AssetDeleteAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteAssetResponseBody> = modelApiAssetDeleteAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeletedAssetMetadataKeys: string[] = ['asset', 'deletedAt']

function modelApiAssetDeletedAssetMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeletedAssetMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeletedAssetMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeletedAssetMetadata = {
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
		'deletedAt': allowUndefined(stringFromRequest)(`${name}.deletedAt`, value['deletedAt']),
	}

	return result
}

function modelApiAssetDeletedAssetMetadataToResponseContent(name: string, value: Api.AssetDeletedAssetMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeletedAssetMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeletedAssetMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeletedAssetMetadata> = {
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
		'deletedAt': allowUndefined(stringToResponse)(`${name}.deletedAt`, value['deletedAt']),
	}

	return result
}

export function modelApiAssetDeletedAssetMetadataFromRequest(name: string, value: any): Api.AssetDeletedAssetMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeletedAssetMetadata = modelApiAssetDeletedAssetMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeletedAssetMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeletedAssetMetadataToResponse(name: string, value: Api.AssetDeletedAssetMetadata): ToResponse<Api.AssetDeletedAssetMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeletedAssetMetadata> = modelApiAssetDeletedAssetMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeletedAssetMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteNamespaceRequestKeys: string[] = ['header', 'body']

function modelApiAssetDeleteNamespaceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteNamespaceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteNamespaceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteNamespaceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDeleteNamespaceRequestToResponseContent(name: string, value: Api.AssetDeleteNamespaceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteNamespaceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteNamespaceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteNamespaceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDeleteNamespaceRequestFromRequest(name: string, value: any): Api.AssetDeleteNamespaceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteNamespaceRequest = modelApiAssetDeleteNamespaceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteNamespaceRequestToResponse(name: string, value: Api.AssetDeleteNamespaceRequest): ToResponse<Api.AssetDeleteNamespaceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteNamespaceRequest> = modelApiAssetDeleteNamespaceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteNamespaceRequestBodyKeys: string[] = ['uid']

function modelApiAssetDeleteNamespaceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteNamespaceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteNamespaceRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiAssetDeleteNamespaceRequestBodyToResponseContent(name: string, value: Api.AssetDeleteNamespaceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteNamespaceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteNamespaceRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiAssetDeleteNamespaceRequestBodyFromRequest(name: string, value: any): Api.AssetDeleteNamespaceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteNamespaceRequestBody = modelApiAssetDeleteNamespaceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteNamespaceRequestBodyToResponse(name: string, value: Api.AssetDeleteNamespaceRequestBody): ToResponse<Api.AssetDeleteNamespaceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteNamespaceRequestBody> = modelApiAssetDeleteNamespaceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteNamespaceResponseKeys: string[] = ['header', 'body']

function modelApiAssetDeleteNamespaceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteNamespaceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteNamespaceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteNamespaceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDeleteNamespaceResponseToResponseContent(name: string, value: Api.AssetDeleteNamespaceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteNamespaceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteNamespaceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDeleteNamespaceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDeleteNamespaceResponseFromRequest(name: string, value: any): Api.AssetDeleteNamespaceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteNamespaceResponse = modelApiAssetDeleteNamespaceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteNamespaceResponseToResponse(name: string, value: Api.AssetDeleteNamespaceResponse): ToResponse<Api.AssetDeleteNamespaceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteNamespaceResponse> = modelApiAssetDeleteNamespaceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDeleteNamespaceResponseBodyKeys: string[] = ['status']

function modelApiAssetDeleteNamespaceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDeleteNamespaceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDeleteNamespaceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetDeleteNamespaceResponseBodyToResponseContent(name: string, value: Api.AssetDeleteNamespaceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDeleteNamespaceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDeleteNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDeleteNamespaceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetDeleteNamespaceResponseBodyFromRequest(name: string, value: any): Api.AssetDeleteNamespaceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDeleteNamespaceResponseBody = modelApiAssetDeleteNamespaceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDeleteNamespaceResponseBodyToResponse(name: string, value: Api.AssetDeleteNamespaceResponseBody): ToResponse<Api.AssetDeleteNamespaceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDeleteNamespaceResponseBody> = modelApiAssetDeleteNamespaceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDeleteNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDisableLinkRequestKeys: string[] = ['header', 'body']

function modelApiAssetDisableLinkRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDisableLinkRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDisableLinkRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDisableLinkRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDisableLinkRequestToResponseContent(name: string, value: Api.AssetDisableLinkRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDisableLinkRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDisableLinkRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDisableLinkRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDisableLinkRequestFromRequest(name: string, value: any): Api.AssetDisableLinkRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDisableLinkRequest = modelApiAssetDisableLinkRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDisableLinkRequestToResponse(name: string, value: Api.AssetDisableLinkRequest): ToResponse<Api.AssetDisableLinkRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDisableLinkRequest> = modelApiAssetDisableLinkRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDisableLinkRequestBodyKeys: string[] = ['linkId']

function modelApiAssetDisableLinkRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDisableLinkRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDisableLinkRequestBody = {
		'linkId': allowUndefined(stringFromRequest)(`${name}.linkId`, value['linkId']),
	}

	return result
}

function modelApiAssetDisableLinkRequestBodyToResponseContent(name: string, value: Api.AssetDisableLinkRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDisableLinkRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDisableLinkRequestBody> = {
		'linkId': allowUndefined(stringToResponse)(`${name}.linkId`, value['linkId']),
	}

	return result
}

export function modelApiAssetDisableLinkRequestBodyFromRequest(name: string, value: any): Api.AssetDisableLinkRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDisableLinkRequestBody = modelApiAssetDisableLinkRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDisableLinkRequestBodyToResponse(name: string, value: Api.AssetDisableLinkRequestBody): ToResponse<Api.AssetDisableLinkRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDisableLinkRequestBody> = modelApiAssetDisableLinkRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDisableLinkResponseKeys: string[] = ['header', 'body']

function modelApiAssetDisableLinkResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDisableLinkResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDisableLinkResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDisableLinkResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetDisableLinkResponseToResponseContent(name: string, value: Api.AssetDisableLinkResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDisableLinkResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDisableLinkResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetDisableLinkResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetDisableLinkResponseFromRequest(name: string, value: any): Api.AssetDisableLinkResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDisableLinkResponse = modelApiAssetDisableLinkResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDisableLinkResponseToResponse(name: string, value: Api.AssetDisableLinkResponse): ToResponse<Api.AssetDisableLinkResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDisableLinkResponse> = modelApiAssetDisableLinkResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetDisableLinkResponseBodyKeys: string[] = ['status']

function modelApiAssetDisableLinkResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetDisableLinkResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetDisableLinkResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetDisableLinkResponseBodyToResponseContent(name: string, value: Api.AssetDisableLinkResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetDisableLinkResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetDisableLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetDisableLinkResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetDisableLinkResponseBodyFromRequest(name: string, value: any): Api.AssetDisableLinkResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetDisableLinkResponseBody = modelApiAssetDisableLinkResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetDisableLinkResponseBodyToResponse(name: string, value: Api.AssetDisableLinkResponseBody): ToResponse<Api.AssetDisableLinkResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetDisableLinkResponseBody> = modelApiAssetDisableLinkResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetDisableLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetGetBlockRequestKeys: string[] = ['header', 'body']

function modelApiAssetGetBlockRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetGetBlockRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetGetBlockRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetGetBlockRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetGetBlockRequestToResponseContent(name: string, value: Api.AssetGetBlockRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetGetBlockRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetGetBlockRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetGetBlockRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetGetBlockRequestFromRequest(name: string, value: any): Api.AssetGetBlockRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetGetBlockRequest = modelApiAssetGetBlockRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetGetBlockRequestToResponse(name: string, value: Api.AssetGetBlockRequest): ToResponse<Api.AssetGetBlockRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetGetBlockRequest> = modelApiAssetGetBlockRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetGetBlockRequestBodyKeys: string[] = ['namespaceId', 'hash']

function modelApiAssetGetBlockRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetGetBlockRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetGetBlockRequestBody = {
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
	}

	return result
}

function modelApiAssetGetBlockRequestBodyToResponseContent(name: string, value: Api.AssetGetBlockRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetGetBlockRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetGetBlockRequestBody> = {
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
	}

	return result
}

export function modelApiAssetGetBlockRequestBodyFromRequest(name: string, value: any): Api.AssetGetBlockRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetGetBlockRequestBody = modelApiAssetGetBlockRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetGetBlockRequestBodyToResponse(name: string, value: Api.AssetGetBlockRequestBody): ToResponse<Api.AssetGetBlockRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetGetBlockRequestBody> = modelApiAssetGetBlockRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetGetBlockResponseKeys: string[] = ['header', 'body', 'data']

function modelApiAssetGetBlockResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetGetBlockResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetGetBlockResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetGetBlockResponseBodyFromRequest)(`${name}.body`, value['body']),
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiAssetGetBlockResponseToResponseContent(name: string, value: Api.AssetGetBlockResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetGetBlockResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetGetBlockResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetGetBlockResponseBodyToResponse)(`${name}.body`, value['body']),
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiAssetGetBlockResponseFromRequest(name: string, value: any): Api.AssetGetBlockResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetGetBlockResponse = modelApiAssetGetBlockResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetGetBlockResponseToResponse(name: string, value: Api.AssetGetBlockResponse): ToResponse<Api.AssetGetBlockResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetGetBlockResponse> = modelApiAssetGetBlockResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetGetBlockResponseBodyKeys: string[] = ['status', 'block']

function modelApiAssetGetBlockResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetGetBlockResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetGetBlockResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetGetBlockResponseBodyToResponseContent(name: string, value: Api.AssetGetBlockResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetGetBlockResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetGetBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetGetBlockResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetGetBlockResponseBodyFromRequest(name: string, value: any): Api.AssetGetBlockResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetGetBlockResponseBody = modelApiAssetGetBlockResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetGetBlockResponseBodyToResponse(name: string, value: Api.AssetGetBlockResponseBody): ToResponse<Api.AssetGetBlockResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetGetBlockResponseBody> = modelApiAssetGetBlockResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetGetBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkDetailKeys: string[] = ['url', 'link']

function modelApiAssetLinkDetailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkDetail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkDetail = {
		'url': allowUndefined(modelApiAssetUrlMetadataFromRequest)(`${name}.url`, value['url']),
		'link': allowUndefined(modelApiAssetLinkMetadataFromRequest)(`${name}.link`, value['link']),
	}

	return result
}

function modelApiAssetLinkDetailToResponseContent(name: string, value: Api.AssetLinkDetail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkDetail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkDetail> = {
		'url': allowUndefined(modelApiAssetUrlMetadataToResponse)(`${name}.url`, value['url']),
		'link': allowUndefined(modelApiAssetLinkMetadataToResponse)(`${name}.link`, value['link']),
	}

	return result
}

export function modelApiAssetLinkDetailFromRequest(name: string, value: any): Api.AssetLinkDetail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkDetail = modelApiAssetLinkDetailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetail: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkDetailToResponse(name: string, value: Api.AssetLinkDetail): ToResponse<Api.AssetLinkDetail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkDetail> = modelApiAssetLinkDetailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetail: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkDetailRequestKeys: string[] = ['header', 'body']

function modelApiAssetLinkDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetLinkDetailRequestToResponseContent(name: string, value: Api.AssetLinkDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetLinkDetailRequestFromRequest(name: string, value: any): Api.AssetLinkDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkDetailRequest = modelApiAssetLinkDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkDetailRequestToResponse(name: string, value: Api.AssetLinkDetailRequest): ToResponse<Api.AssetLinkDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkDetailRequest> = modelApiAssetLinkDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkDetailRequestBodyKeys: string[] = ['uid']

function modelApiAssetLinkDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiAssetLinkDetailRequestBodyToResponseContent(name: string, value: Api.AssetLinkDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiAssetLinkDetailRequestBodyFromRequest(name: string, value: any): Api.AssetLinkDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkDetailRequestBody = modelApiAssetLinkDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkDetailRequestBodyToResponse(name: string, value: Api.AssetLinkDetailRequestBody): ToResponse<Api.AssetLinkDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkDetailRequestBody> = modelApiAssetLinkDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkDetailResponseKeys: string[] = ['header', 'body']

function modelApiAssetLinkDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetLinkDetailResponseToResponseContent(name: string, value: Api.AssetLinkDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetLinkDetailResponseFromRequest(name: string, value: any): Api.AssetLinkDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkDetailResponse = modelApiAssetLinkDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkDetailResponseToResponse(name: string, value: Api.AssetLinkDetailResponse): ToResponse<Api.AssetLinkDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkDetailResponse> = modelApiAssetLinkDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkDetailResponseBodyKeys: string[] = ['status', 'detail']

function modelApiAssetLinkDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiAssetLinkDetailResponseBodyToResponseContent(name: string, value: Api.AssetLinkDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiAssetLinkDetailResponseBodyFromRequest(name: string, value: any): Api.AssetLinkDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkDetailResponseBody = modelApiAssetLinkDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkDetailResponseBodyToResponse(name: string, value: Api.AssetLinkDetailResponseBody): ToResponse<Api.AssetLinkDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkDetailResponseBody> = modelApiAssetLinkDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkMetadataKeys: string[] = ['owner', 'uid', 'type', 'visitors', 'namespaceId', 'name', 'description', 'hash', 'token', 'startedAt', 'expiredAt', 'createdAt', 'signature']

function modelApiAssetLinkMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkMetadata = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'type': allowUndefined(enumApiAssetLinkTypeEnumFromRequest)(`${name}.type`, value['type']),
		'visitors': allowUndefined(stringFromRequest)(`${name}.visitors`, value['visitors']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'token': allowUndefined(stringFromRequest)(`${name}.token`, value['token']),
		'startedAt': allowUndefined(stringFromRequest)(`${name}.startedAt`, value['startedAt']),
		'expiredAt': allowUndefined(stringFromRequest)(`${name}.expiredAt`, value['expiredAt']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetLinkMetadataToResponseContent(name: string, value: Api.AssetLinkMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkMetadata> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'type': allowUndefined(enumApiAssetLinkTypeEnumToResponse)(`${name}.type`, value['type']),
		'visitors': allowUndefined(stringToResponse)(`${name}.visitors`, value['visitors']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'token': allowUndefined(stringToResponse)(`${name}.token`, value['token']),
		'startedAt': allowUndefined(stringToResponse)(`${name}.startedAt`, value['startedAt']),
		'expiredAt': allowUndefined(stringToResponse)(`${name}.expiredAt`, value['expiredAt']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetLinkMetadataFromRequest(name: string, value: any): Api.AssetLinkMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkMetadata = modelApiAssetLinkMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkMetadataToResponse(name: string, value: Api.AssetLinkMetadata): ToResponse<Api.AssetLinkMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkMetadata> = modelApiAssetLinkMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiAssetLinkTypeEnumFromRequest(name: string, value: any): Api.AssetLinkTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'LINK_TYPE_UNKNOWN') {
		return Api.AssetLinkTypeEnum.LINKTYPEUNKNOWN
	}
	if (value === 'LINK_TYPE_PUBLIC') {
		return Api.AssetLinkTypeEnum.LINKTYPEPUBLIC
	}
	if (value === 'LINK_TYPE_AUTHENTICATED') {
		return Api.AssetLinkTypeEnum.LINKTYPEAUTHENTICATED
	}

	throw `Unexpected enum value for Api.AssetLinkTypeEnum: ${value}`
}

export function enumApiAssetLinkTypeEnumToResponse(name: string, value: Api.AssetLinkTypeEnum): Api.AssetLinkTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'LINK_TYPE_UNKNOWN') {
		return Api.AssetLinkTypeEnum.LINKTYPEUNKNOWN
	}
	if (value === 'LINK_TYPE_PUBLIC') {
		return Api.AssetLinkTypeEnum.LINKTYPEPUBLIC
	}
	if (value === 'LINK_TYPE_AUTHENTICATED') {
		return Api.AssetLinkTypeEnum.LINKTYPEAUTHENTICATED
	}

	throw `Unexpected enum value for Api.AssetLinkTypeEnum: ${value}`
}

const ApiAssetLinkVisitorRequestKeys: string[] = ['header', 'body']

function modelApiAssetLinkVisitorRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkVisitorRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkVisitorRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkVisitorRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetLinkVisitorRequestToResponseContent(name: string, value: Api.AssetLinkVisitorRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkVisitorRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkVisitorRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkVisitorRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetLinkVisitorRequestFromRequest(name: string, value: any): Api.AssetLinkVisitorRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkVisitorRequest = modelApiAssetLinkVisitorRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkVisitorRequestToResponse(name: string, value: Api.AssetLinkVisitorRequest): ToResponse<Api.AssetLinkVisitorRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkVisitorRequest> = modelApiAssetLinkVisitorRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkVisitorRequestBodyKeys: string[] = ['uid', 'page']

function modelApiAssetLinkVisitorRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkVisitorRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkVisitorRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAssetLinkVisitorRequestBodyToResponseContent(name: string, value: Api.AssetLinkVisitorRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkVisitorRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkVisitorRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAssetLinkVisitorRequestBodyFromRequest(name: string, value: any): Api.AssetLinkVisitorRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkVisitorRequestBody = modelApiAssetLinkVisitorRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkVisitorRequestBodyToResponse(name: string, value: Api.AssetLinkVisitorRequestBody): ToResponse<Api.AssetLinkVisitorRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkVisitorRequestBody> = modelApiAssetLinkVisitorRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkVisitorResponseKeys: string[] = ['header', 'body']

function modelApiAssetLinkVisitorResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkVisitorResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkVisitorResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkVisitorResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetLinkVisitorResponseToResponseContent(name: string, value: Api.AssetLinkVisitorResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkVisitorResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkVisitorResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetLinkVisitorResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetLinkVisitorResponseFromRequest(name: string, value: any): Api.AssetLinkVisitorResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkVisitorResponse = modelApiAssetLinkVisitorResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkVisitorResponseToResponse(name: string, value: Api.AssetLinkVisitorResponse): ToResponse<Api.AssetLinkVisitorResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkVisitorResponse> = modelApiAssetLinkVisitorResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetLinkVisitorResponseBodyKeys: string[] = ['status', 'page', 'visitors']

function modelApiAssetLinkVisitorResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetLinkVisitorResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetLinkVisitorResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
		'visitors': allowUndefined(arrayFromRequest(modelApiAssetVisitorMetadataFromRequest))(`${name}.visitors`, value['visitors']),
	}

	return result
}

function modelApiAssetLinkVisitorResponseBodyToResponseContent(name: string, value: Api.AssetLinkVisitorResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetLinkVisitorResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetLinkVisitorResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetLinkVisitorResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
		'visitors': allowUndefined(arrayToResponse(modelApiAssetVisitorMetadataToResponse))(`${name}.visitors`, value['visitors']),
	}

	return result
}

export function modelApiAssetLinkVisitorResponseBodyFromRequest(name: string, value: any): Api.AssetLinkVisitorResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetLinkVisitorResponseBody = modelApiAssetLinkVisitorResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetLinkVisitorResponseBodyToResponse(name: string, value: Api.AssetLinkVisitorResponseBody): ToResponse<Api.AssetLinkVisitorResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetLinkVisitorResponseBody> = modelApiAssetLinkVisitorResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetLinkVisitorResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetNamespaceDetailRequestKeys: string[] = ['header', 'body']

function modelApiAssetNamespaceDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetNamespaceDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetNamespaceDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetNamespaceDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetNamespaceDetailRequestToResponseContent(name: string, value: Api.AssetNamespaceDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetNamespaceDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetNamespaceDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetNamespaceDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetNamespaceDetailRequestFromRequest(name: string, value: any): Api.AssetNamespaceDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetNamespaceDetailRequest = modelApiAssetNamespaceDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetNamespaceDetailRequestToResponse(name: string, value: Api.AssetNamespaceDetailRequest): ToResponse<Api.AssetNamespaceDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetNamespaceDetailRequest> = modelApiAssetNamespaceDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetNamespaceDetailRequestBodyKeys: string[] = ['uid']

function modelApiAssetNamespaceDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetNamespaceDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetNamespaceDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiAssetNamespaceDetailRequestBodyToResponseContent(name: string, value: Api.AssetNamespaceDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetNamespaceDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetNamespaceDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiAssetNamespaceDetailRequestBodyFromRequest(name: string, value: any): Api.AssetNamespaceDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetNamespaceDetailRequestBody = modelApiAssetNamespaceDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetNamespaceDetailRequestBodyToResponse(name: string, value: Api.AssetNamespaceDetailRequestBody): ToResponse<Api.AssetNamespaceDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetNamespaceDetailRequestBody> = modelApiAssetNamespaceDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetNamespaceDetailResponseKeys: string[] = ['header', 'body']

function modelApiAssetNamespaceDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetNamespaceDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetNamespaceDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetNamespaceDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetNamespaceDetailResponseToResponseContent(name: string, value: Api.AssetNamespaceDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetNamespaceDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetNamespaceDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetNamespaceDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetNamespaceDetailResponseFromRequest(name: string, value: any): Api.AssetNamespaceDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetNamespaceDetailResponse = modelApiAssetNamespaceDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetNamespaceDetailResponseToResponse(name: string, value: Api.AssetNamespaceDetailResponse): ToResponse<Api.AssetNamespaceDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetNamespaceDetailResponse> = modelApiAssetNamespaceDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetNamespaceDetailResponseBodyKeys: string[] = ['status', 'namespace']

function modelApiAssetNamespaceDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetNamespaceDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetNamespaceDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataFromRequest)(`${name}.namespace`, value['namespace']),
	}

	return result
}

function modelApiAssetNamespaceDetailResponseBodyToResponseContent(name: string, value: Api.AssetNamespaceDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetNamespaceDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetNamespaceDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataToResponse)(`${name}.namespace`, value['namespace']),
	}

	return result
}

export function modelApiAssetNamespaceDetailResponseBodyFromRequest(name: string, value: any): Api.AssetNamespaceDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetNamespaceDetailResponseBody = modelApiAssetNamespaceDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetNamespaceDetailResponseBodyToResponse(name: string, value: Api.AssetNamespaceDetailResponseBody): ToResponse<Api.AssetNamespaceDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetNamespaceDetailResponseBody> = modelApiAssetNamespaceDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetNamespaceMetadataKeys: string[] = ['owner', 'participants', 'uid', 'name', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiAssetNamespaceMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetNamespaceMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetNamespaceMetadata = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'participants': allowUndefined(stringFromRequest)(`${name}.participants`, value['participants']),
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetNamespaceMetadataToResponseContent(name: string, value: Api.AssetNamespaceMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetNamespaceMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetNamespaceMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetNamespaceMetadata> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'participants': allowUndefined(stringToResponse)(`${name}.participants`, value['participants']),
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetNamespaceMetadataFromRequest(name: string, value: any): Api.AssetNamespaceMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetNamespaceMetadata = modelApiAssetNamespaceMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetNamespaceMetadataToResponse(name: string, value: Api.AssetNamespaceMetadata): ToResponse<Api.AssetNamespaceMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetNamespaceMetadata> = modelApiAssetNamespaceMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetNamespaceMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAssetPutBlockRequestKeys: string[] = ['header', 'body', 'data']

function modelApiAssetPutBlockRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetPutBlockRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetPutBlockRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetPutBlockRequestBodyFromRequest)(`${name}.body`, value['body']),
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiAssetPutBlockRequestToResponseContent(name: string, value: Api.AssetPutBlockRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetPutBlockRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetPutBlockRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetPutBlockRequestBodyToResponse)(`${name}.body`, value['body']),
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiAssetPutBlockRequestFromRequest(name: string, value: any): Api.AssetPutBlockRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetPutBlockRequest = modelApiAssetPutBlockRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetPutBlockRequestToResponse(name: string, value: Api.AssetPutBlockRequest): ToResponse<Api.AssetPutBlockRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetPutBlockRequest> = modelApiAssetPutBlockRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetPutBlockRequestBodyKeys: string[] = ['block']

function modelApiAssetPutBlockRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetPutBlockRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetPutBlockRequestBody = {
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetPutBlockRequestBodyToResponseContent(name: string, value: Api.AssetPutBlockRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetPutBlockRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetPutBlockRequestBody> = {
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetPutBlockRequestBodyFromRequest(name: string, value: any): Api.AssetPutBlockRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetPutBlockRequestBody = modelApiAssetPutBlockRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetPutBlockRequestBodyToResponse(name: string, value: Api.AssetPutBlockRequestBody): ToResponse<Api.AssetPutBlockRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetPutBlockRequestBody> = modelApiAssetPutBlockRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetPutBlockResponseKeys: string[] = ['header', 'body']

function modelApiAssetPutBlockResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetPutBlockResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetPutBlockResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetPutBlockResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetPutBlockResponseToResponseContent(name: string, value: Api.AssetPutBlockResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetPutBlockResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetPutBlockResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetPutBlockResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetPutBlockResponseFromRequest(name: string, value: any): Api.AssetPutBlockResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetPutBlockResponse = modelApiAssetPutBlockResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetPutBlockResponseToResponse(name: string, value: Api.AssetPutBlockResponse): ToResponse<Api.AssetPutBlockResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetPutBlockResponse> = modelApiAssetPutBlockResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetPutBlockResponseBodyKeys: string[] = ['status', 'block']

function modelApiAssetPutBlockResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetPutBlockResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetPutBlockResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetPutBlockResponseBodyToResponseContent(name: string, value: Api.AssetPutBlockResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetPutBlockResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetPutBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetPutBlockResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetPutBlockResponseBodyFromRequest(name: string, value: any): Api.AssetPutBlockResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetPutBlockResponseBody = modelApiAssetPutBlockResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetPutBlockResponseBodyToResponse(name: string, value: Api.AssetPutBlockResponseBody): ToResponse<Api.AssetPutBlockResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetPutBlockResponseBody> = modelApiAssetPutBlockResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetPutBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRecoverDeletedAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetRecoverDeletedAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRecoverDeletedAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRecoverDeletedAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRecoverDeletedAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetRecoverDeletedAssetRequestToResponseContent(name: string, value: Api.AssetRecoverDeletedAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRecoverDeletedAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRecoverDeletedAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRecoverDeletedAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetRequestFromRequest(name: string, value: any): Api.AssetRecoverDeletedAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRecoverDeletedAssetRequest = modelApiAssetRecoverDeletedAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetRequestToResponse(name: string, value: Api.AssetRecoverDeletedAssetRequest): ToResponse<Api.AssetRecoverDeletedAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRecoverDeletedAssetRequest> = modelApiAssetRecoverDeletedAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRecoverDeletedAssetRequestBodyKeys: string[] = ['hash', 'namespaceId']

function modelApiAssetRecoverDeletedAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRecoverDeletedAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRecoverDeletedAssetRequestBody = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

function modelApiAssetRecoverDeletedAssetRequestBodyToResponseContent(name: string, value: Api.AssetRecoverDeletedAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRecoverDeletedAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRecoverDeletedAssetRequestBody> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetRequestBodyFromRequest(name: string, value: any): Api.AssetRecoverDeletedAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRecoverDeletedAssetRequestBody = modelApiAssetRecoverDeletedAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetRequestBodyToResponse(name: string, value: Api.AssetRecoverDeletedAssetRequestBody): ToResponse<Api.AssetRecoverDeletedAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRecoverDeletedAssetRequestBody> = modelApiAssetRecoverDeletedAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRecoverDeletedAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetRecoverDeletedAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRecoverDeletedAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRecoverDeletedAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRecoverDeletedAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetRecoverDeletedAssetResponseToResponseContent(name: string, value: Api.AssetRecoverDeletedAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRecoverDeletedAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRecoverDeletedAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRecoverDeletedAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetResponseFromRequest(name: string, value: any): Api.AssetRecoverDeletedAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRecoverDeletedAssetResponse = modelApiAssetRecoverDeletedAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetResponseToResponse(name: string, value: Api.AssetRecoverDeletedAssetResponse): ToResponse<Api.AssetRecoverDeletedAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRecoverDeletedAssetResponse> = modelApiAssetRecoverDeletedAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRecoverDeletedAssetResponseBodyKeys: string[] = ['status']

function modelApiAssetRecoverDeletedAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRecoverDeletedAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRecoverDeletedAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetRecoverDeletedAssetResponseBodyToResponseContent(name: string, value: Api.AssetRecoverDeletedAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRecoverDeletedAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRecoverDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRecoverDeletedAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetResponseBodyFromRequest(name: string, value: any): Api.AssetRecoverDeletedAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRecoverDeletedAssetResponseBody = modelApiAssetRecoverDeletedAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRecoverDeletedAssetResponseBodyToResponse(name: string, value: Api.AssetRecoverDeletedAssetResponseBody): ToResponse<Api.AssetRecoverDeletedAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRecoverDeletedAssetResponseBody> = modelApiAssetRecoverDeletedAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRecoverDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRemoveDeletedAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetRemoveDeletedAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRemoveDeletedAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRemoveDeletedAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRemoveDeletedAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetRemoveDeletedAssetRequestToResponseContent(name: string, value: Api.AssetRemoveDeletedAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRemoveDeletedAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRemoveDeletedAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRemoveDeletedAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetRequestFromRequest(name: string, value: any): Api.AssetRemoveDeletedAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRemoveDeletedAssetRequest = modelApiAssetRemoveDeletedAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetRequestToResponse(name: string, value: Api.AssetRemoveDeletedAssetRequest): ToResponse<Api.AssetRemoveDeletedAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRemoveDeletedAssetRequest> = modelApiAssetRemoveDeletedAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRemoveDeletedAssetRequestBodyKeys: string[] = ['hash', 'namespaceId']

function modelApiAssetRemoveDeletedAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRemoveDeletedAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRemoveDeletedAssetRequestBody = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

function modelApiAssetRemoveDeletedAssetRequestBodyToResponseContent(name: string, value: Api.AssetRemoveDeletedAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRemoveDeletedAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRemoveDeletedAssetRequestBody> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetRequestBodyFromRequest(name: string, value: any): Api.AssetRemoveDeletedAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRemoveDeletedAssetRequestBody = modelApiAssetRemoveDeletedAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetRequestBodyToResponse(name: string, value: Api.AssetRemoveDeletedAssetRequestBody): ToResponse<Api.AssetRemoveDeletedAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRemoveDeletedAssetRequestBody> = modelApiAssetRemoveDeletedAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRemoveDeletedAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetRemoveDeletedAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRemoveDeletedAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRemoveDeletedAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRemoveDeletedAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetRemoveDeletedAssetResponseToResponseContent(name: string, value: Api.AssetRemoveDeletedAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRemoveDeletedAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRemoveDeletedAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetRemoveDeletedAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetResponseFromRequest(name: string, value: any): Api.AssetRemoveDeletedAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRemoveDeletedAssetResponse = modelApiAssetRemoveDeletedAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetResponseToResponse(name: string, value: Api.AssetRemoveDeletedAssetResponse): ToResponse<Api.AssetRemoveDeletedAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRemoveDeletedAssetResponse> = modelApiAssetRemoveDeletedAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetRemoveDeletedAssetResponseBodyKeys: string[] = ['status']

function modelApiAssetRemoveDeletedAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetRemoveDeletedAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetRemoveDeletedAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetRemoveDeletedAssetResponseBodyToResponseContent(name: string, value: Api.AssetRemoveDeletedAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetRemoveDeletedAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetRemoveDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetRemoveDeletedAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetResponseBodyFromRequest(name: string, value: any): Api.AssetRemoveDeletedAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetRemoveDeletedAssetResponseBody = modelApiAssetRemoveDeletedAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetRemoveDeletedAssetResponseBodyToResponse(name: string, value: Api.AssetRemoveDeletedAssetResponseBody): ToResponse<Api.AssetRemoveDeletedAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetRemoveDeletedAssetResponseBody> = modelApiAssetRemoveDeletedAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetRemoveDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchAssetConditionKeys: string[] = ['format', 'hash', 'namespaceId', 'name']

function modelApiAssetSearchAssetConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchAssetCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchAssetCondition = {
		'format': allowUndefined(enumApiCommonDigitalFormatEnumFromRequest)(`${name}.format`, value['format']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
	}

	return result
}

function modelApiAssetSearchAssetConditionToResponseContent(name: string, value: Api.AssetSearchAssetCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchAssetCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchAssetCondition> = {
		'format': allowUndefined(enumApiCommonDigitalFormatEnumToResponse)(`${name}.format`, value['format']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
	}

	return result
}

export function modelApiAssetSearchAssetConditionFromRequest(name: string, value: any): Api.AssetSearchAssetCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchAssetCondition = modelApiAssetSearchAssetConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchAssetConditionToResponse(name: string, value: Api.AssetSearchAssetCondition): ToResponse<Api.AssetSearchAssetCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchAssetCondition> = modelApiAssetSearchAssetConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetCondition: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetSearchAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchAssetRequestToResponseContent(name: string, value: Api.AssetSearchAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchAssetRequestFromRequest(name: string, value: any): Api.AssetSearchAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchAssetRequest = modelApiAssetSearchAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchAssetRequestToResponse(name: string, value: Api.AssetSearchAssetRequest): ToResponse<Api.AssetSearchAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchAssetRequest> = modelApiAssetSearchAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchAssetRequestBodyKeys: string[] = ['condition', 'page']

function modelApiAssetSearchAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchAssetRequestBody = {
		'condition': allowUndefined(modelApiAssetSearchAssetConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAssetSearchAssetRequestBodyToResponseContent(name: string, value: Api.AssetSearchAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchAssetRequestBody> = {
		'condition': allowUndefined(modelApiAssetSearchAssetConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAssetSearchAssetRequestBodyFromRequest(name: string, value: any): Api.AssetSearchAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchAssetRequestBody = modelApiAssetSearchAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchAssetRequestBodyToResponse(name: string, value: Api.AssetSearchAssetRequestBody): ToResponse<Api.AssetSearchAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchAssetRequestBody> = modelApiAssetSearchAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetSearchAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchAssetResponseToResponseContent(name: string, value: Api.AssetSearchAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchAssetResponseFromRequest(name: string, value: any): Api.AssetSearchAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchAssetResponse = modelApiAssetSearchAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchAssetResponseToResponse(name: string, value: Api.AssetSearchAssetResponse): ToResponse<Api.AssetSearchAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchAssetResponse> = modelApiAssetSearchAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchAssetResponseBodyKeys: string[] = ['status', 'assets']

function modelApiAssetSearchAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'assets': allowUndefined(arrayFromRequest(modelApiAssetAssetMetadataFromRequest))(`${name}.assets`, value['assets']),
	}

	return result
}

function modelApiAssetSearchAssetResponseBodyToResponseContent(name: string, value: Api.AssetSearchAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'assets': allowUndefined(arrayToResponse(modelApiAssetAssetMetadataToResponse))(`${name}.assets`, value['assets']),
	}

	return result
}

export function modelApiAssetSearchAssetResponseBodyFromRequest(name: string, value: any): Api.AssetSearchAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchAssetResponseBody = modelApiAssetSearchAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchAssetResponseBodyToResponse(name: string, value: Api.AssetSearchAssetResponseBody): ToResponse<Api.AssetSearchAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchAssetResponseBody> = modelApiAssetSearchAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchDeletedAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetSearchDeletedAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchDeletedAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchDeletedAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchDeletedAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchDeletedAssetRequestToResponseContent(name: string, value: Api.AssetSearchDeletedAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchDeletedAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchDeletedAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchDeletedAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchDeletedAssetRequestFromRequest(name: string, value: any): Api.AssetSearchDeletedAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchDeletedAssetRequest = modelApiAssetSearchDeletedAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchDeletedAssetRequestToResponse(name: string, value: Api.AssetSearchDeletedAssetRequest): ToResponse<Api.AssetSearchDeletedAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchDeletedAssetRequest> = modelApiAssetSearchDeletedAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchDeletedAssetRequestBodyKeys: string[] = ['condition', 'page']

function modelApiAssetSearchDeletedAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchDeletedAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchDeletedAssetRequestBody = {
		'condition': allowUndefined(modelApiAssetSearchAssetConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAssetSearchDeletedAssetRequestBodyToResponseContent(name: string, value: Api.AssetSearchDeletedAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchDeletedAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchDeletedAssetRequestBody> = {
		'condition': allowUndefined(modelApiAssetSearchAssetConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAssetSearchDeletedAssetRequestBodyFromRequest(name: string, value: any): Api.AssetSearchDeletedAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchDeletedAssetRequestBody = modelApiAssetSearchDeletedAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchDeletedAssetRequestBodyToResponse(name: string, value: Api.AssetSearchDeletedAssetRequestBody): ToResponse<Api.AssetSearchDeletedAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchDeletedAssetRequestBody> = modelApiAssetSearchDeletedAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchDeletedAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetSearchDeletedAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchDeletedAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchDeletedAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchDeletedAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchDeletedAssetResponseToResponseContent(name: string, value: Api.AssetSearchDeletedAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchDeletedAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchDeletedAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchDeletedAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchDeletedAssetResponseFromRequest(name: string, value: any): Api.AssetSearchDeletedAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchDeletedAssetResponse = modelApiAssetSearchDeletedAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchDeletedAssetResponseToResponse(name: string, value: Api.AssetSearchDeletedAssetResponse): ToResponse<Api.AssetSearchDeletedAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchDeletedAssetResponse> = modelApiAssetSearchDeletedAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchDeletedAssetResponseBodyKeys: string[] = ['status', 'assets']

function modelApiAssetSearchDeletedAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchDeletedAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchDeletedAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'assets': allowUndefined(arrayFromRequest(modelApiAssetDeletedAssetMetadataFromRequest))(`${name}.assets`, value['assets']),
	}

	return result
}

function modelApiAssetSearchDeletedAssetResponseBodyToResponseContent(name: string, value: Api.AssetSearchDeletedAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchDeletedAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchDeletedAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchDeletedAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'assets': allowUndefined(arrayToResponse(modelApiAssetDeletedAssetMetadataToResponse))(`${name}.assets`, value['assets']),
	}

	return result
}

export function modelApiAssetSearchDeletedAssetResponseBodyFromRequest(name: string, value: any): Api.AssetSearchDeletedAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchDeletedAssetResponseBody = modelApiAssetSearchDeletedAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchDeletedAssetResponseBodyToResponse(name: string, value: Api.AssetSearchDeletedAssetResponseBody): ToResponse<Api.AssetSearchDeletedAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchDeletedAssetResponseBody> = modelApiAssetSearchDeletedAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchDeletedAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchLinkConditionKeys: string[] = ['hash']

function modelApiAssetSearchLinkConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchLinkCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchLinkCondition = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
	}

	return result
}

function modelApiAssetSearchLinkConditionToResponseContent(name: string, value: Api.AssetSearchLinkCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchLinkCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchLinkCondition> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
	}

	return result
}

export function modelApiAssetSearchLinkConditionFromRequest(name: string, value: any): Api.AssetSearchLinkCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchLinkCondition = modelApiAssetSearchLinkConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchLinkConditionToResponse(name: string, value: Api.AssetSearchLinkCondition): ToResponse<Api.AssetSearchLinkCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchLinkCondition> = modelApiAssetSearchLinkConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkCondition: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchLinkRequestKeys: string[] = ['header', 'body']

function modelApiAssetSearchLinkRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchLinkRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchLinkRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchLinkRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchLinkRequestToResponseContent(name: string, value: Api.AssetSearchLinkRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchLinkRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchLinkRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchLinkRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchLinkRequestFromRequest(name: string, value: any): Api.AssetSearchLinkRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchLinkRequest = modelApiAssetSearchLinkRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchLinkRequestToResponse(name: string, value: Api.AssetSearchLinkRequest): ToResponse<Api.AssetSearchLinkRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchLinkRequest> = modelApiAssetSearchLinkRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchLinkRequestBodyKeys: string[] = ['page', 'condition']

function modelApiAssetSearchLinkRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchLinkRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchLinkRequestBody = {
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
		'condition': allowUndefined(modelApiAssetSearchLinkConditionFromRequest)(`${name}.condition`, value['condition']),
	}

	return result
}

function modelApiAssetSearchLinkRequestBodyToResponseContent(name: string, value: Api.AssetSearchLinkRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchLinkRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchLinkRequestBody> = {
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
		'condition': allowUndefined(modelApiAssetSearchLinkConditionToResponse)(`${name}.condition`, value['condition']),
	}

	return result
}

export function modelApiAssetSearchLinkRequestBodyFromRequest(name: string, value: any): Api.AssetSearchLinkRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchLinkRequestBody = modelApiAssetSearchLinkRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchLinkRequestBodyToResponse(name: string, value: Api.AssetSearchLinkRequestBody): ToResponse<Api.AssetSearchLinkRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchLinkRequestBody> = modelApiAssetSearchLinkRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchLinkResponseKeys: string[] = ['header', 'body']

function modelApiAssetSearchLinkResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchLinkResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchLinkResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchLinkResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchLinkResponseToResponseContent(name: string, value: Api.AssetSearchLinkResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchLinkResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchLinkResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchLinkResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchLinkResponseFromRequest(name: string, value: any): Api.AssetSearchLinkResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchLinkResponse = modelApiAssetSearchLinkResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchLinkResponseToResponse(name: string, value: Api.AssetSearchLinkResponse): ToResponse<Api.AssetSearchLinkResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchLinkResponse> = modelApiAssetSearchLinkResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchLinkResponseBodyKeys: string[] = ['status', 'page', 'links']

function modelApiAssetSearchLinkResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchLinkResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchLinkResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
		'links': allowUndefined(arrayFromRequest(modelApiAssetLinkMetadataFromRequest))(`${name}.links`, value['links']),
	}

	return result
}

function modelApiAssetSearchLinkResponseBodyToResponseContent(name: string, value: Api.AssetSearchLinkResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchLinkResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchLinkResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
		'links': allowUndefined(arrayToResponse(modelApiAssetLinkMetadataToResponse))(`${name}.links`, value['links']),
	}

	return result
}

export function modelApiAssetSearchLinkResponseBodyFromRequest(name: string, value: any): Api.AssetSearchLinkResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchLinkResponseBody = modelApiAssetSearchLinkResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchLinkResponseBodyToResponse(name: string, value: Api.AssetSearchLinkResponseBody): ToResponse<Api.AssetSearchLinkResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchLinkResponseBody> = modelApiAssetSearchLinkResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchNamespaceConditionKeys: string[] = ['name']

function modelApiAssetSearchNamespaceConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchNamespaceCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchNamespaceCondition = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
	}

	return result
}

function modelApiAssetSearchNamespaceConditionToResponseContent(name: string, value: Api.AssetSearchNamespaceCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchNamespaceCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchNamespaceCondition> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
	}

	return result
}

export function modelApiAssetSearchNamespaceConditionFromRequest(name: string, value: any): Api.AssetSearchNamespaceCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchNamespaceCondition = modelApiAssetSearchNamespaceConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchNamespaceConditionToResponse(name: string, value: Api.AssetSearchNamespaceCondition): ToResponse<Api.AssetSearchNamespaceCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchNamespaceCondition> = modelApiAssetSearchNamespaceConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceCondition: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchNamespaceRequestKeys: string[] = ['header', 'body']

function modelApiAssetSearchNamespaceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchNamespaceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchNamespaceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchNamespaceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchNamespaceRequestToResponseContent(name: string, value: Api.AssetSearchNamespaceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchNamespaceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchNamespaceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchNamespaceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchNamespaceRequestFromRequest(name: string, value: any): Api.AssetSearchNamespaceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchNamespaceRequest = modelApiAssetSearchNamespaceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchNamespaceRequestToResponse(name: string, value: Api.AssetSearchNamespaceRequest): ToResponse<Api.AssetSearchNamespaceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchNamespaceRequest> = modelApiAssetSearchNamespaceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchNamespaceRequestBodyKeys: string[] = ['condition', 'page']

function modelApiAssetSearchNamespaceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchNamespaceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchNamespaceRequestBody = {
		'condition': allowUndefined(modelApiAssetSearchNamespaceConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAssetSearchNamespaceRequestBodyToResponseContent(name: string, value: Api.AssetSearchNamespaceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchNamespaceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchNamespaceRequestBody> = {
		'condition': allowUndefined(modelApiAssetSearchNamespaceConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAssetSearchNamespaceRequestBodyFromRequest(name: string, value: any): Api.AssetSearchNamespaceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchNamespaceRequestBody = modelApiAssetSearchNamespaceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchNamespaceRequestBodyToResponse(name: string, value: Api.AssetSearchNamespaceRequestBody): ToResponse<Api.AssetSearchNamespaceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchNamespaceRequestBody> = modelApiAssetSearchNamespaceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchNamespaceResponseKeys: string[] = ['header', 'body']

function modelApiAssetSearchNamespaceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchNamespaceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchNamespaceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchNamespaceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSearchNamespaceResponseToResponseContent(name: string, value: Api.AssetSearchNamespaceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchNamespaceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchNamespaceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSearchNamespaceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSearchNamespaceResponseFromRequest(name: string, value: any): Api.AssetSearchNamespaceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchNamespaceResponse = modelApiAssetSearchNamespaceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchNamespaceResponseToResponse(name: string, value: Api.AssetSearchNamespaceResponse): ToResponse<Api.AssetSearchNamespaceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchNamespaceResponse> = modelApiAssetSearchNamespaceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSearchNamespaceResponseBodyKeys: string[] = ['status', 'namespaces']

function modelApiAssetSearchNamespaceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSearchNamespaceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSearchNamespaceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'namespaces': allowUndefined(arrayFromRequest(modelApiAssetNamespaceMetadataFromRequest))(`${name}.namespaces`, value['namespaces']),
	}

	return result
}

function modelApiAssetSearchNamespaceResponseBodyToResponseContent(name: string, value: Api.AssetSearchNamespaceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSearchNamespaceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSearchNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSearchNamespaceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'namespaces': allowUndefined(arrayToResponse(modelApiAssetNamespaceMetadataToResponse))(`${name}.namespaces`, value['namespaces']),
	}

	return result
}

export function modelApiAssetSearchNamespaceResponseBodyFromRequest(name: string, value: any): Api.AssetSearchNamespaceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSearchNamespaceResponseBody = modelApiAssetSearchNamespaceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSearchNamespaceResponseBodyToResponse(name: string, value: Api.AssetSearchNamespaceResponseBody): ToResponse<Api.AssetSearchNamespaceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSearchNamespaceResponseBody> = modelApiAssetSearchNamespaceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSearchNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSignAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetSignAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSignAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSignAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSignAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSignAssetRequestToResponseContent(name: string, value: Api.AssetSignAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSignAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSignAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSignAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSignAssetRequestFromRequest(name: string, value: any): Api.AssetSignAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSignAssetRequest = modelApiAssetSignAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSignAssetRequestToResponse(name: string, value: Api.AssetSignAssetRequest): ToResponse<Api.AssetSignAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSignAssetRequest> = modelApiAssetSignAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSignAssetRequestBodyKeys: string[] = ['asset']

function modelApiAssetSignAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSignAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSignAssetRequestBody = {
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
	}

	return result
}

function modelApiAssetSignAssetRequestBodyToResponseContent(name: string, value: Api.AssetSignAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSignAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSignAssetRequestBody> = {
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
	}

	return result
}

export function modelApiAssetSignAssetRequestBodyFromRequest(name: string, value: any): Api.AssetSignAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSignAssetRequestBody = modelApiAssetSignAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSignAssetRequestBodyToResponse(name: string, value: Api.AssetSignAssetRequestBody): ToResponse<Api.AssetSignAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSignAssetRequestBody> = modelApiAssetSignAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSignAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetSignAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSignAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSignAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSignAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetSignAssetResponseToResponseContent(name: string, value: Api.AssetSignAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSignAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSignAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetSignAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetSignAssetResponseFromRequest(name: string, value: any): Api.AssetSignAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSignAssetResponse = modelApiAssetSignAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSignAssetResponseToResponse(name: string, value: Api.AssetSignAssetResponse): ToResponse<Api.AssetSignAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSignAssetResponse> = modelApiAssetSignAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetSignAssetResponseBodyKeys: string[] = ['status', 'asset']

function modelApiAssetSignAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetSignAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetSignAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
	}

	return result
}

function modelApiAssetSignAssetResponseBodyToResponseContent(name: string, value: Api.AssetSignAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetSignAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetSignAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetSignAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
	}

	return result
}

export function modelApiAssetSignAssetResponseBodyFromRequest(name: string, value: any): Api.AssetSignAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetSignAssetResponseBody = modelApiAssetSignAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetSignAssetResponseBodyToResponse(name: string, value: Api.AssetSignAssetResponseBody): ToResponse<Api.AssetSignAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetSignAssetResponseBody> = modelApiAssetSignAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetSignAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockRequestKeys: string[] = ['head', 'body']

function modelApiAssetStreamGetBlockRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockRequest = {
		'head': allowUndefined(modelApiAssetStreamGetBlockRequestHeadFromRequest)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamGetBlockRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamGetBlockRequestToResponseContent(name: string, value: Api.AssetStreamGetBlockRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockRequest> = {
		'head': allowUndefined(modelApiAssetStreamGetBlockRequestHeadToResponse)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamGetBlockRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestFromRequest(name: string, value: any): Api.AssetStreamGetBlockRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockRequest = modelApiAssetStreamGetBlockRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestToResponse(name: string, value: Api.AssetStreamGetBlockRequest): ToResponse<Api.AssetStreamGetBlockRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockRequest> = modelApiAssetStreamGetBlockRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockRequestBodyKeys: string[] = ['header']

function modelApiAssetStreamGetBlockRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockRequestBody = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiAssetStreamGetBlockRequestBodyToResponseContent(name: string, value: Api.AssetStreamGetBlockRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockRequestBody> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestBodyFromRequest(name: string, value: any): Api.AssetStreamGetBlockRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockRequestBody = modelApiAssetStreamGetBlockRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestBodyToResponse(name: string, value: Api.AssetStreamGetBlockRequestBody): ToResponse<Api.AssetStreamGetBlockRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockRequestBody> = modelApiAssetStreamGetBlockRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockRequestHeadKeys: string[] = ['header', 'body']

function modelApiAssetStreamGetBlockRequestHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockRequestHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockRequestHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockRequestHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamGetBlockRequestHeadToResponseContent(name: string, value: Api.AssetStreamGetBlockRequestHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockRequestHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockRequestHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockRequestHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestHeadFromRequest(name: string, value: any): Api.AssetStreamGetBlockRequestHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockRequestHead = modelApiAssetStreamGetBlockRequestHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestHeadToResponse(name: string, value: Api.AssetStreamGetBlockRequestHead): ToResponse<Api.AssetStreamGetBlockRequestHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockRequestHead> = modelApiAssetStreamGetBlockRequestHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestHead: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockRequestHeadBodyKeys: string[] = ['namespaceId', 'hash']

function modelApiAssetStreamGetBlockRequestHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockRequestHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockRequestHeadBody = {
		'namespaceId': allowUndefined(stringFromRequest)(`${name}.namespaceId`, value['namespaceId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
	}

	return result
}

function modelApiAssetStreamGetBlockRequestHeadBodyToResponseContent(name: string, value: Api.AssetStreamGetBlockRequestHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockRequestHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockRequestHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockRequestHeadBody> = {
		'namespaceId': allowUndefined(stringToResponse)(`${name}.namespaceId`, value['namespaceId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestHeadBodyFromRequest(name: string, value: any): Api.AssetStreamGetBlockRequestHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockRequestHeadBody = modelApiAssetStreamGetBlockRequestHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockRequestHeadBodyToResponse(name: string, value: Api.AssetStreamGetBlockRequestHeadBody): ToResponse<Api.AssetStreamGetBlockRequestHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockRequestHeadBody> = modelApiAssetStreamGetBlockRequestHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockRequestHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseKeys: string[] = ['head', 'body', 'tail']

function modelApiAssetStreamGetBlockResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponse = {
		'head': allowUndefined(modelApiAssetStreamGetBlockResponseHeadFromRequest)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseBodyFromRequest)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiAssetStreamGetBlockResponseTailFromRequest)(`${name}.tail`, value['tail']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseToResponseContent(name: string, value: Api.AssetStreamGetBlockResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponse> = {
		'head': allowUndefined(modelApiAssetStreamGetBlockResponseHeadToResponse)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseBodyToResponse)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiAssetStreamGetBlockResponseTailToResponse)(`${name}.tail`, value['tail']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponse = modelApiAssetStreamGetBlockResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseToResponse(name: string, value: Api.AssetStreamGetBlockResponse): ToResponse<Api.AssetStreamGetBlockResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponse> = modelApiAssetStreamGetBlockResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseBodyKeys: string[] = ['data']

function modelApiAssetStreamGetBlockResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponseBody = {
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseBodyToResponseContent(name: string, value: Api.AssetStreamGetBlockResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponseBody> = {
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseBodyFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponseBody = modelApiAssetStreamGetBlockResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseBodyToResponse(name: string, value: Api.AssetStreamGetBlockResponseBody): ToResponse<Api.AssetStreamGetBlockResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponseBody> = modelApiAssetStreamGetBlockResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseHeadKeys: string[] = ['header', 'body']

function modelApiAssetStreamGetBlockResponseHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponseHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponseHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseHeadToResponseContent(name: string, value: Api.AssetStreamGetBlockResponseHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponseHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponseHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseHeadFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponseHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponseHead = modelApiAssetStreamGetBlockResponseHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseHeadToResponse(name: string, value: Api.AssetStreamGetBlockResponseHead): ToResponse<Api.AssetStreamGetBlockResponseHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponseHead> = modelApiAssetStreamGetBlockResponseHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseHead: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseHeadBodyKeys: string[] = ['status', 'block']

function modelApiAssetStreamGetBlockResponseHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponseHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponseHeadBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseHeadBodyToResponseContent(name: string, value: Api.AssetStreamGetBlockResponseHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponseHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponseHeadBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseHeadBodyFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponseHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponseHeadBody = modelApiAssetStreamGetBlockResponseHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseHeadBodyToResponse(name: string, value: Api.AssetStreamGetBlockResponseHeadBody): ToResponse<Api.AssetStreamGetBlockResponseHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponseHeadBody> = modelApiAssetStreamGetBlockResponseHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseTailKeys: string[] = ['header', 'body']

function modelApiAssetStreamGetBlockResponseTailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponseTail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseTailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponseTail = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseTailBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseTailToResponseContent(name: string, value: Api.AssetStreamGetBlockResponseTail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponseTail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseTailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponseTail> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamGetBlockResponseTailBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseTailFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponseTail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponseTail = modelApiAssetStreamGetBlockResponseTailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseTail: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseTailToResponse(name: string, value: Api.AssetStreamGetBlockResponseTail): ToResponse<Api.AssetStreamGetBlockResponseTail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponseTail> = modelApiAssetStreamGetBlockResponseTailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseTail: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamGetBlockResponseTailBodyKeys: string[] = ['status']

function modelApiAssetStreamGetBlockResponseTailBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamGetBlockResponseTailBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseTailBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamGetBlockResponseTailBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetStreamGetBlockResponseTailBodyToResponseContent(name: string, value: Api.AssetStreamGetBlockResponseTailBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamGetBlockResponseTailBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamGetBlockResponseTailBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamGetBlockResponseTailBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseTailBodyFromRequest(name: string, value: any): Api.AssetStreamGetBlockResponseTailBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamGetBlockResponseTailBody = modelApiAssetStreamGetBlockResponseTailBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseTailBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamGetBlockResponseTailBodyToResponse(name: string, value: Api.AssetStreamGetBlockResponseTailBody): ToResponse<Api.AssetStreamGetBlockResponseTailBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamGetBlockResponseTailBody> = modelApiAssetStreamGetBlockResponseTailBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamGetBlockResponseTailBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockRequestKeys: string[] = ['head', 'body', 'Tail']

function modelApiAssetStreamPutBlockRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockRequest = {
		'head': allowUndefined(modelApiAssetStreamPutBlockRequestHeadFromRequest)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamPutBlockRequestBodyFromRequest)(`${name}.body`, value['body']),
		'Tail': allowUndefined(modelApiAssetStreamPutBlockRequestTailFromRequest)(`${name}.Tail`, value['Tail']),
	}

	return result
}

function modelApiAssetStreamPutBlockRequestToResponseContent(name: string, value: Api.AssetStreamPutBlockRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockRequest> = {
		'head': allowUndefined(modelApiAssetStreamPutBlockRequestHeadToResponse)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiAssetStreamPutBlockRequestBodyToResponse)(`${name}.body`, value['body']),
		'Tail': allowUndefined(modelApiAssetStreamPutBlockRequestTailToResponse)(`${name}.Tail`, value['Tail']),
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestFromRequest(name: string, value: any): Api.AssetStreamPutBlockRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockRequest = modelApiAssetStreamPutBlockRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestToResponse(name: string, value: Api.AssetStreamPutBlockRequest): ToResponse<Api.AssetStreamPutBlockRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockRequest> = modelApiAssetStreamPutBlockRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockRequestBodyKeys: string[] = ['data']

function modelApiAssetStreamPutBlockRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockRequestBody = {
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiAssetStreamPutBlockRequestBodyToResponseContent(name: string, value: Api.AssetStreamPutBlockRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockRequestBody> = {
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestBodyFromRequest(name: string, value: any): Api.AssetStreamPutBlockRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockRequestBody = modelApiAssetStreamPutBlockRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestBodyToResponse(name: string, value: Api.AssetStreamPutBlockRequestBody): ToResponse<Api.AssetStreamPutBlockRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockRequestBody> = modelApiAssetStreamPutBlockRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockRequestHeadKeys: string[] = ['header', 'body']

function modelApiAssetStreamPutBlockRequestHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockRequestHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockRequestHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockRequestHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamPutBlockRequestHeadToResponseContent(name: string, value: Api.AssetStreamPutBlockRequestHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockRequestHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockRequestHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockRequestHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestHeadFromRequest(name: string, value: any): Api.AssetStreamPutBlockRequestHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockRequestHead = modelApiAssetStreamPutBlockRequestHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestHeadToResponse(name: string, value: Api.AssetStreamPutBlockRequestHead): ToResponse<Api.AssetStreamPutBlockRequestHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockRequestHead> = modelApiAssetStreamPutBlockRequestHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestHead: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockRequestHeadBodyKeys: string[] = ['block']

function modelApiAssetStreamPutBlockRequestHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockRequestHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockRequestHeadBody = {
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetStreamPutBlockRequestHeadBodyToResponseContent(name: string, value: Api.AssetStreamPutBlockRequestHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockRequestHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockRequestHeadBody> = {
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestHeadBodyFromRequest(name: string, value: any): Api.AssetStreamPutBlockRequestHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockRequestHeadBody = modelApiAssetStreamPutBlockRequestHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestHeadBodyToResponse(name: string, value: Api.AssetStreamPutBlockRequestHeadBody): ToResponse<Api.AssetStreamPutBlockRequestHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockRequestHeadBody> = modelApiAssetStreamPutBlockRequestHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockRequestTailKeys: string[] = ['header']

function modelApiAssetStreamPutBlockRequestTailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockRequestTail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestTailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockRequestTail = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiAssetStreamPutBlockRequestTailToResponseContent(name: string, value: Api.AssetStreamPutBlockRequestTail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockRequestTail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockRequestTailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockRequestTail> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestTailFromRequest(name: string, value: any): Api.AssetStreamPutBlockRequestTail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockRequestTail = modelApiAssetStreamPutBlockRequestTailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestTail: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockRequestTailToResponse(name: string, value: Api.AssetStreamPutBlockRequestTail): ToResponse<Api.AssetStreamPutBlockRequestTail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockRequestTail> = modelApiAssetStreamPutBlockRequestTailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockRequestTail: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockResponseKeys: string[] = ['head', 'tail']

function modelApiAssetStreamPutBlockResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockResponse = {
		'head': allowUndefined(modelApiAssetStreamPutBlockResponseHeadFromRequest)(`${name}.head`, value['head']),
		'tail': allowUndefined(modelApiAssetStreamPutBlockResponseTailFromRequest)(`${name}.tail`, value['tail']),
	}

	return result
}

function modelApiAssetStreamPutBlockResponseToResponseContent(name: string, value: Api.AssetStreamPutBlockResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockResponse> = {
		'head': allowUndefined(modelApiAssetStreamPutBlockResponseHeadToResponse)(`${name}.head`, value['head']),
		'tail': allowUndefined(modelApiAssetStreamPutBlockResponseTailToResponse)(`${name}.tail`, value['tail']),
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseFromRequest(name: string, value: any): Api.AssetStreamPutBlockResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockResponse = modelApiAssetStreamPutBlockResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseToResponse(name: string, value: Api.AssetStreamPutBlockResponse): ToResponse<Api.AssetStreamPutBlockResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockResponse> = modelApiAssetStreamPutBlockResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockResponseHeadKeys: string[] = ['header', 'body']

function modelApiAssetStreamPutBlockResponseHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockResponseHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockResponseHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockResponseHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamPutBlockResponseHeadToResponseContent(name: string, value: Api.AssetStreamPutBlockResponseHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockResponseHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockResponseHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockResponseHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseHeadFromRequest(name: string, value: any): Api.AssetStreamPutBlockResponseHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockResponseHead = modelApiAssetStreamPutBlockResponseHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseHeadToResponse(name: string, value: Api.AssetStreamPutBlockResponseHead): ToResponse<Api.AssetStreamPutBlockResponseHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockResponseHead> = modelApiAssetStreamPutBlockResponseHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseHead: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockResponseHeadBodyKeys: string[] = ['status', 'block']

function modelApiAssetStreamPutBlockResponseHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockResponseHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockResponseHeadBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataFromRequest)(`${name}.block`, value['block']),
	}

	return result
}

function modelApiAssetStreamPutBlockResponseHeadBodyToResponseContent(name: string, value: Api.AssetStreamPutBlockResponseHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockResponseHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockResponseHeadBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'block': allowUndefined(modelApiAssetBlockMetadataToResponse)(`${name}.block`, value['block']),
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseHeadBodyFromRequest(name: string, value: any): Api.AssetStreamPutBlockResponseHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockResponseHeadBody = modelApiAssetStreamPutBlockResponseHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseHeadBodyToResponse(name: string, value: Api.AssetStreamPutBlockResponseHeadBody): ToResponse<Api.AssetStreamPutBlockResponseHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockResponseHeadBody> = modelApiAssetStreamPutBlockResponseHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockResponseTailKeys: string[] = ['header', 'body']

function modelApiAssetStreamPutBlockResponseTailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockResponseTail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseTailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockResponseTail = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockResponseTailBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetStreamPutBlockResponseTailToResponseContent(name: string, value: Api.AssetStreamPutBlockResponseTail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockResponseTail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseTailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockResponseTail> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetStreamPutBlockResponseTailBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseTailFromRequest(name: string, value: any): Api.AssetStreamPutBlockResponseTail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockResponseTail = modelApiAssetStreamPutBlockResponseTailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseTail: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseTailToResponse(name: string, value: Api.AssetStreamPutBlockResponseTail): ToResponse<Api.AssetStreamPutBlockResponseTail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockResponseTail> = modelApiAssetStreamPutBlockResponseTailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseTail: ${key}`
			}
		}
	}

	return result
}

const ApiAssetStreamPutBlockResponseTailBodyKeys: string[] = ['status']

function modelApiAssetStreamPutBlockResponseTailBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetStreamPutBlockResponseTailBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseTailBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetStreamPutBlockResponseTailBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiAssetStreamPutBlockResponseTailBodyToResponseContent(name: string, value: Api.AssetStreamPutBlockResponseTailBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetStreamPutBlockResponseTailBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetStreamPutBlockResponseTailBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetStreamPutBlockResponseTailBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseTailBodyFromRequest(name: string, value: any): Api.AssetStreamPutBlockResponseTailBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetStreamPutBlockResponseTailBody = modelApiAssetStreamPutBlockResponseTailBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseTailBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetStreamPutBlockResponseTailBodyToResponse(name: string, value: Api.AssetStreamPutBlockResponseTailBody): ToResponse<Api.AssetStreamPutBlockResponseTailBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetStreamPutBlockResponseTailBody> = modelApiAssetStreamPutBlockResponseTailBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetStreamPutBlockResponseTailBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateAssetRequestKeys: string[] = ['header', 'body']

function modelApiAssetUpdateAssetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateAssetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateAssetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateAssetRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateAssetRequestToResponseContent(name: string, value: Api.AssetUpdateAssetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateAssetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateAssetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateAssetRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateAssetRequestFromRequest(name: string, value: any): Api.AssetUpdateAssetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateAssetRequest = modelApiAssetUpdateAssetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateAssetRequestToResponse(name: string, value: Api.AssetUpdateAssetRequest): ToResponse<Api.AssetUpdateAssetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateAssetRequest> = modelApiAssetUpdateAssetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateAssetRequestBodyKeys: string[] = ['asset']

function modelApiAssetUpdateAssetRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateAssetRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateAssetRequestBody = {
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
	}

	return result
}

function modelApiAssetUpdateAssetRequestBodyToResponseContent(name: string, value: Api.AssetUpdateAssetRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateAssetRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateAssetRequestBody> = {
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
	}

	return result
}

export function modelApiAssetUpdateAssetRequestBodyFromRequest(name: string, value: any): Api.AssetUpdateAssetRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateAssetRequestBody = modelApiAssetUpdateAssetRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateAssetRequestBodyToResponse(name: string, value: Api.AssetUpdateAssetRequestBody): ToResponse<Api.AssetUpdateAssetRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateAssetRequestBody> = modelApiAssetUpdateAssetRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateAssetResponseKeys: string[] = ['header', 'body']

function modelApiAssetUpdateAssetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateAssetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateAssetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateAssetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateAssetResponseToResponseContent(name: string, value: Api.AssetUpdateAssetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateAssetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateAssetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateAssetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateAssetResponseFromRequest(name: string, value: any): Api.AssetUpdateAssetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateAssetResponse = modelApiAssetUpdateAssetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateAssetResponseToResponse(name: string, value: Api.AssetUpdateAssetResponse): ToResponse<Api.AssetUpdateAssetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateAssetResponse> = modelApiAssetUpdateAssetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateAssetResponseBodyKeys: string[] = ['status', 'asset']

function modelApiAssetUpdateAssetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateAssetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateAssetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataFromRequest)(`${name}.asset`, value['asset']),
	}

	return result
}

function modelApiAssetUpdateAssetResponseBodyToResponseContent(name: string, value: Api.AssetUpdateAssetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateAssetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateAssetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateAssetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'asset': allowUndefined(modelApiAssetAssetMetadataToResponse)(`${name}.asset`, value['asset']),
	}

	return result
}

export function modelApiAssetUpdateAssetResponseBodyFromRequest(name: string, value: any): Api.AssetUpdateAssetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateAssetResponseBody = modelApiAssetUpdateAssetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateAssetResponseBodyToResponse(name: string, value: Api.AssetUpdateAssetResponseBody): ToResponse<Api.AssetUpdateAssetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateAssetResponseBody> = modelApiAssetUpdateAssetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateAssetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateLinkRequestKeys: string[] = ['header', 'body']

function modelApiAssetUpdateLinkRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateLinkRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateLinkRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateLinkRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateLinkRequestToResponseContent(name: string, value: Api.AssetUpdateLinkRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateLinkRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateLinkRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateLinkRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateLinkRequestFromRequest(name: string, value: any): Api.AssetUpdateLinkRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateLinkRequest = modelApiAssetUpdateLinkRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateLinkRequestToResponse(name: string, value: Api.AssetUpdateLinkRequest): ToResponse<Api.AssetUpdateLinkRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateLinkRequest> = modelApiAssetUpdateLinkRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateLinkRequestBodyKeys: string[] = ['link']

function modelApiAssetUpdateLinkRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateLinkRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateLinkRequestBody = {
		'link': allowUndefined(modelApiAssetLinkMetadataFromRequest)(`${name}.link`, value['link']),
	}

	return result
}

function modelApiAssetUpdateLinkRequestBodyToResponseContent(name: string, value: Api.AssetUpdateLinkRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateLinkRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateLinkRequestBody> = {
		'link': allowUndefined(modelApiAssetLinkMetadataToResponse)(`${name}.link`, value['link']),
	}

	return result
}

export function modelApiAssetUpdateLinkRequestBodyFromRequest(name: string, value: any): Api.AssetUpdateLinkRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateLinkRequestBody = modelApiAssetUpdateLinkRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateLinkRequestBodyToResponse(name: string, value: Api.AssetUpdateLinkRequestBody): ToResponse<Api.AssetUpdateLinkRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateLinkRequestBody> = modelApiAssetUpdateLinkRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateLinkResponseKeys: string[] = ['header', 'body']

function modelApiAssetUpdateLinkResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateLinkResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateLinkResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateLinkResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateLinkResponseToResponseContent(name: string, value: Api.AssetUpdateLinkResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateLinkResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateLinkResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateLinkResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateLinkResponseFromRequest(name: string, value: any): Api.AssetUpdateLinkResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateLinkResponse = modelApiAssetUpdateLinkResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateLinkResponseToResponse(name: string, value: Api.AssetUpdateLinkResponse): ToResponse<Api.AssetUpdateLinkResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateLinkResponse> = modelApiAssetUpdateLinkResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateLinkResponseBodyKeys: string[] = ['status', 'detail']

function modelApiAssetUpdateLinkResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateLinkResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateLinkResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiAssetUpdateLinkResponseBodyToResponseContent(name: string, value: Api.AssetUpdateLinkResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateLinkResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateLinkResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateLinkResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAssetLinkDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiAssetUpdateLinkResponseBodyFromRequest(name: string, value: any): Api.AssetUpdateLinkResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateLinkResponseBody = modelApiAssetUpdateLinkResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateLinkResponseBodyToResponse(name: string, value: Api.AssetUpdateLinkResponseBody): ToResponse<Api.AssetUpdateLinkResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateLinkResponseBody> = modelApiAssetUpdateLinkResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateLinkResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateNamespaceRequestKeys: string[] = ['header', 'body']

function modelApiAssetUpdateNamespaceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateNamespaceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateNamespaceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateNamespaceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateNamespaceRequestToResponseContent(name: string, value: Api.AssetUpdateNamespaceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateNamespaceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateNamespaceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateNamespaceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateNamespaceRequestFromRequest(name: string, value: any): Api.AssetUpdateNamespaceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateNamespaceRequest = modelApiAssetUpdateNamespaceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateNamespaceRequestToResponse(name: string, value: Api.AssetUpdateNamespaceRequest): ToResponse<Api.AssetUpdateNamespaceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateNamespaceRequest> = modelApiAssetUpdateNamespaceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateNamespaceRequestBodyKeys: string[] = ['namespace']

function modelApiAssetUpdateNamespaceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateNamespaceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateNamespaceRequestBody = {
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataFromRequest)(`${name}.namespace`, value['namespace']),
	}

	return result
}

function modelApiAssetUpdateNamespaceRequestBodyToResponseContent(name: string, value: Api.AssetUpdateNamespaceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateNamespaceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateNamespaceRequestBody> = {
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataToResponse)(`${name}.namespace`, value['namespace']),
	}

	return result
}

export function modelApiAssetUpdateNamespaceRequestBodyFromRequest(name: string, value: any): Api.AssetUpdateNamespaceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateNamespaceRequestBody = modelApiAssetUpdateNamespaceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateNamespaceRequestBodyToResponse(name: string, value: Api.AssetUpdateNamespaceRequestBody): ToResponse<Api.AssetUpdateNamespaceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateNamespaceRequestBody> = modelApiAssetUpdateNamespaceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateNamespaceResponseKeys: string[] = ['header', 'body']

function modelApiAssetUpdateNamespaceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateNamespaceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateNamespaceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateNamespaceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAssetUpdateNamespaceResponseToResponseContent(name: string, value: Api.AssetUpdateNamespaceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateNamespaceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateNamespaceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAssetUpdateNamespaceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAssetUpdateNamespaceResponseFromRequest(name: string, value: any): Api.AssetUpdateNamespaceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateNamespaceResponse = modelApiAssetUpdateNamespaceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateNamespaceResponseToResponse(name: string, value: Api.AssetUpdateNamespaceResponse): ToResponse<Api.AssetUpdateNamespaceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateNamespaceResponse> = modelApiAssetUpdateNamespaceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUpdateNamespaceResponseBodyKeys: string[] = ['status', 'namespace']

function modelApiAssetUpdateNamespaceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUpdateNamespaceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUpdateNamespaceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataFromRequest)(`${name}.namespace`, value['namespace']),
	}

	return result
}

function modelApiAssetUpdateNamespaceResponseBodyToResponseContent(name: string, value: Api.AssetUpdateNamespaceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUpdateNamespaceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUpdateNamespaceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUpdateNamespaceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'namespace': allowUndefined(modelApiAssetNamespaceMetadataToResponse)(`${name}.namespace`, value['namespace']),
	}

	return result
}

export function modelApiAssetUpdateNamespaceResponseBodyFromRequest(name: string, value: any): Api.AssetUpdateNamespaceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUpdateNamespaceResponseBody = modelApiAssetUpdateNamespaceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUpdateNamespaceResponseBodyToResponse(name: string, value: Api.AssetUpdateNamespaceResponseBody): ToResponse<Api.AssetUpdateNamespaceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUpdateNamespaceResponseBody> = modelApiAssetUpdateNamespaceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUpdateNamespaceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAssetUrlMetadataKeys: string[] = ['serviceDid', 'linkId', 'token', 'url', 'status', 'createdAt', 'updatedAt', 'signature']

function modelApiAssetUrlMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetUrlMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUrlMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetUrlMetadata = {
		'serviceDid': allowUndefined(stringFromRequest)(`${name}.serviceDid`, value['serviceDid']),
		'linkId': allowUndefined(stringFromRequest)(`${name}.linkId`, value['linkId']),
		'token': allowUndefined(stringFromRequest)(`${name}.token`, value['token']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
		'status': allowUndefined(enumApiAssetUrlStatusEnumFromRequest)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetUrlMetadataToResponseContent(name: string, value: Api.AssetUrlMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetUrlMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetUrlMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetUrlMetadata> = {
		'serviceDid': allowUndefined(stringToResponse)(`${name}.serviceDid`, value['serviceDid']),
		'linkId': allowUndefined(stringToResponse)(`${name}.linkId`, value['linkId']),
		'token': allowUndefined(stringToResponse)(`${name}.token`, value['token']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
		'status': allowUndefined(enumApiAssetUrlStatusEnumToResponse)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetUrlMetadataFromRequest(name: string, value: any): Api.AssetUrlMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetUrlMetadata = modelApiAssetUrlMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUrlMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetUrlMetadataToResponse(name: string, value: Api.AssetUrlMetadata): ToResponse<Api.AssetUrlMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetUrlMetadata> = modelApiAssetUrlMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetUrlMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiAssetUrlStatusEnumFromRequest(name: string, value: any): Api.AssetUrlStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'URL_STATUS_UNKNOWN') {
		return Api.AssetUrlStatusEnum.URLSTATUSUNKNOWN
	}
	if (value === 'URL_STATUS_ENABLE') {
		return Api.AssetUrlStatusEnum.URLSTATUSENABLE
	}
	if (value === 'URL_STATUS_DISABLE') {
		return Api.AssetUrlStatusEnum.URLSTATUSDISABLE
	}

	throw `Unexpected enum value for Api.AssetUrlStatusEnum: ${value}`
}

export function enumApiAssetUrlStatusEnumToResponse(name: string, value: Api.AssetUrlStatusEnum): Api.AssetUrlStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'URL_STATUS_UNKNOWN') {
		return Api.AssetUrlStatusEnum.URLSTATUSUNKNOWN
	}
	if (value === 'URL_STATUS_ENABLE') {
		return Api.AssetUrlStatusEnum.URLSTATUSENABLE
	}
	if (value === 'URL_STATUS_DISABLE') {
		return Api.AssetUrlStatusEnum.URLSTATUSDISABLE
	}

	throw `Unexpected enum value for Api.AssetUrlStatusEnum: ${value}`
}

const ApiAssetVisitorMetadataKeys: string[] = ['linkId', 'did', 'createdAt', 'signature']

function modelApiAssetVisitorMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AssetVisitorMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetVisitorMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AssetVisitorMetadata = {
		'linkId': allowUndefined(stringFromRequest)(`${name}.linkId`, value['linkId']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAssetVisitorMetadataToResponseContent(name: string, value: Api.AssetVisitorMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AssetVisitorMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAssetVisitorMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AssetVisitorMetadata> = {
		'linkId': allowUndefined(stringToResponse)(`${name}.linkId`, value['linkId']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAssetVisitorMetadataFromRequest(name: string, value: any): Api.AssetVisitorMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AssetVisitorMetadata = modelApiAssetVisitorMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetVisitorMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAssetVisitorMetadataToResponse(name: string, value: Api.AssetVisitorMetadata): ToResponse<Api.AssetVisitorMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AssetVisitorMetadata> = modelApiAssetVisitorMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AssetVisitorMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditApproveRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditApproveRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditApproveRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditApproveRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditApproveRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditApproveRequestToResponseContent(name: string, value: Api.AuditAuditApproveRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditApproveRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditApproveRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditApproveRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditApproveRequestFromRequest(name: string, value: any): Api.AuditAuditApproveRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditApproveRequest = modelApiAuditAuditApproveRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditApproveRequestToResponse(name: string, value: Api.AuditAuditApproveRequest): ToResponse<Api.AuditAuditApproveRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditApproveRequest> = modelApiAuditAuditApproveRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditApproveRequestBodyKeys: string[] = ['metadata']

function modelApiAuditAuditApproveRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditApproveRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditApproveRequestBody = {
		'metadata': allowUndefined(modelApiAuditCommentMetadataFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiAuditAuditApproveRequestBodyToResponseContent(name: string, value: Api.AuditAuditApproveRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditApproveRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditApproveRequestBody> = {
		'metadata': allowUndefined(modelApiAuditCommentMetadataToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiAuditAuditApproveRequestBodyFromRequest(name: string, value: any): Api.AuditAuditApproveRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditApproveRequestBody = modelApiAuditAuditApproveRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditApproveRequestBodyToResponse(name: string, value: Api.AuditAuditApproveRequestBody): ToResponse<Api.AuditAuditApproveRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditApproveRequestBody> = modelApiAuditAuditApproveRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditApproveResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditApproveResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditApproveResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditApproveResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditApproveResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditApproveResponseToResponseContent(name: string, value: Api.AuditAuditApproveResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditApproveResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditApproveResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditApproveResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditApproveResponseFromRequest(name: string, value: any): Api.AuditAuditApproveResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditApproveResponse = modelApiAuditAuditApproveResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditApproveResponseToResponse(name: string, value: Api.AuditAuditApproveResponse): ToResponse<Api.AuditAuditApproveResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditApproveResponse> = modelApiAuditAuditApproveResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditApproveResponseBodyKeys: string[] = ['status', 'metadata']

function modelApiAuditAuditApproveResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditApproveResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditApproveResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'metadata': allowUndefined(modelApiAuditCommentMetadataFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiAuditAuditApproveResponseBodyToResponseContent(name: string, value: Api.AuditAuditApproveResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditApproveResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditApproveResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditApproveResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'metadata': allowUndefined(modelApiAuditCommentMetadataToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiAuditAuditApproveResponseBodyFromRequest(name: string, value: any): Api.AuditAuditApproveResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditApproveResponseBody = modelApiAuditAuditApproveResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditApproveResponseBodyToResponse(name: string, value: Api.AuditAuditApproveResponseBody): ToResponse<Api.AuditAuditApproveResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditApproveResponseBody> = modelApiAuditAuditApproveResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditApproveResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCancelRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditCancelRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCancelRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCancelRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCancelRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditCancelRequestToResponseContent(name: string, value: Api.AuditAuditCancelRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCancelRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCancelRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCancelRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditCancelRequestFromRequest(name: string, value: any): Api.AuditAuditCancelRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCancelRequest = modelApiAuditAuditCancelRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCancelRequestToResponse(name: string, value: Api.AuditAuditCancelRequest): ToResponse<Api.AuditAuditCancelRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCancelRequest> = modelApiAuditAuditCancelRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCancelRequestBodyKeys: string[] = ['uid']

function modelApiAuditAuditCancelRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCancelRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCancelRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiAuditAuditCancelRequestBodyToResponseContent(name: string, value: Api.AuditAuditCancelRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCancelRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCancelRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiAuditAuditCancelRequestBodyFromRequest(name: string, value: any): Api.AuditAuditCancelRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCancelRequestBody = modelApiAuditAuditCancelRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCancelRequestBodyToResponse(name: string, value: Api.AuditAuditCancelRequestBody): ToResponse<Api.AuditAuditCancelRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCancelRequestBody> = modelApiAuditAuditCancelRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCancelResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditCancelResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCancelResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCancelResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCancelResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditCancelResponseToResponseContent(name: string, value: Api.AuditAuditCancelResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCancelResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCancelResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCancelResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditCancelResponseFromRequest(name: string, value: any): Api.AuditAuditCancelResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCancelResponse = modelApiAuditAuditCancelResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCancelResponseToResponse(name: string, value: Api.AuditAuditCancelResponse): ToResponse<Api.AuditAuditCancelResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCancelResponse> = modelApiAuditAuditCancelResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCancelResponseBodyKeys: string[] = ['status', 'meta']

function modelApiAuditAuditCancelResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCancelResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCancelResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiAuditAuditMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiAuditAuditCancelResponseBodyToResponseContent(name: string, value: Api.AuditAuditCancelResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCancelResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCancelResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCancelResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiAuditAuditMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiAuditAuditCancelResponseBodyFromRequest(name: string, value: any): Api.AuditAuditCancelResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCancelResponseBody = modelApiAuditAuditCancelResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCancelResponseBodyToResponse(name: string, value: Api.AuditAuditCancelResponseBody): ToResponse<Api.AuditAuditCancelResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCancelResponseBody> = modelApiAuditAuditCancelResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCancelResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCreateRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditCreateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCreateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCreateRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCreateRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditCreateRequestToResponseContent(name: string, value: Api.AuditAuditCreateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCreateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCreateRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCreateRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditCreateRequestFromRequest(name: string, value: any): Api.AuditAuditCreateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCreateRequest = modelApiAuditAuditCreateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCreateRequestToResponse(name: string, value: Api.AuditAuditCreateRequest): ToResponse<Api.AuditAuditCreateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCreateRequest> = modelApiAuditAuditCreateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCreateRequestBodyKeys: string[] = ['meta']

function modelApiAuditAuditCreateRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCreateRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCreateRequestBody = {
		'meta': allowUndefined(modelApiAuditAuditMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiAuditAuditCreateRequestBodyToResponseContent(name: string, value: Api.AuditAuditCreateRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCreateRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCreateRequestBody> = {
		'meta': allowUndefined(modelApiAuditAuditMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiAuditAuditCreateRequestBodyFromRequest(name: string, value: any): Api.AuditAuditCreateRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCreateRequestBody = modelApiAuditAuditCreateRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCreateRequestBodyToResponse(name: string, value: Api.AuditAuditCreateRequestBody): ToResponse<Api.AuditAuditCreateRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCreateRequestBody> = modelApiAuditAuditCreateRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCreateResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditCreateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCreateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCreateResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCreateResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditCreateResponseToResponseContent(name: string, value: Api.AuditAuditCreateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCreateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCreateResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditCreateResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditCreateResponseFromRequest(name: string, value: any): Api.AuditAuditCreateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCreateResponse = modelApiAuditAuditCreateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCreateResponseToResponse(name: string, value: Api.AuditAuditCreateResponse): ToResponse<Api.AuditAuditCreateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCreateResponse> = modelApiAuditAuditCreateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditCreateResponseBodyKeys: string[] = ['status', 'meta']

function modelApiAuditAuditCreateResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditCreateResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditCreateResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiAuditAuditMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiAuditAuditCreateResponseBodyToResponseContent(name: string, value: Api.AuditAuditCreateResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditCreateResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditCreateResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditCreateResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiAuditAuditMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiAuditAuditCreateResponseBodyFromRequest(name: string, value: any): Api.AuditAuditCreateResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditCreateResponseBody = modelApiAuditAuditCreateResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditCreateResponseBodyToResponse(name: string, value: Api.AuditAuditCreateResponseBody): ToResponse<Api.AuditAuditCreateResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditCreateResponseBody> = modelApiAuditAuditCreateResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditCreateResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditDetailKeys: string[] = ['meta', 'commentMeta']

function modelApiAuditAuditDetailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditDetail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditDetail = {
		'meta': allowUndefined(modelApiAuditAuditMetadataFromRequest)(`${name}.meta`, value['meta']),
		'commentMeta': allowUndefined(arrayFromRequest(modelApiAuditCommentMetadataFromRequest))(`${name}.commentMeta`, value['commentMeta']),
	}

	return result
}

function modelApiAuditAuditDetailToResponseContent(name: string, value: Api.AuditAuditDetail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditDetail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditDetail> = {
		'meta': allowUndefined(modelApiAuditAuditMetadataToResponse)(`${name}.meta`, value['meta']),
		'commentMeta': allowUndefined(arrayToResponse(modelApiAuditCommentMetadataToResponse))(`${name}.commentMeta`, value['commentMeta']),
	}

	return result
}

export function modelApiAuditAuditDetailFromRequest(name: string, value: any): Api.AuditAuditDetail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditDetail = modelApiAuditAuditDetailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetail: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditDetailToResponse(name: string, value: Api.AuditAuditDetail): ToResponse<Api.AuditAuditDetail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditDetail> = modelApiAuditAuditDetailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetail: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditDetailRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditDetailRequestToResponseContent(name: string, value: Api.AuditAuditDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditDetailRequestFromRequest(name: string, value: any): Api.AuditAuditDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditDetailRequest = modelApiAuditAuditDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditDetailRequestToResponse(name: string, value: Api.AuditAuditDetailRequest): ToResponse<Api.AuditAuditDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditDetailRequest> = modelApiAuditAuditDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditDetailRequestBodyKeys: string[] = ['uid']

function modelApiAuditAuditDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiAuditAuditDetailRequestBodyToResponseContent(name: string, value: Api.AuditAuditDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiAuditAuditDetailRequestBodyFromRequest(name: string, value: any): Api.AuditAuditDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditDetailRequestBody = modelApiAuditAuditDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditDetailRequestBodyToResponse(name: string, value: Api.AuditAuditDetailRequestBody): ToResponse<Api.AuditAuditDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditDetailRequestBody> = modelApiAuditAuditDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditDetailResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditDetailResponseToResponseContent(name: string, value: Api.AuditAuditDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditDetailResponseFromRequest(name: string, value: any): Api.AuditAuditDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditDetailResponse = modelApiAuditAuditDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditDetailResponseToResponse(name: string, value: Api.AuditAuditDetailResponse): ToResponse<Api.AuditAuditDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditDetailResponse> = modelApiAuditAuditDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditDetailResponseBodyKeys: string[] = ['status', 'detail']

function modelApiAuditAuditDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAuditAuditDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiAuditAuditDetailResponseBodyToResponseContent(name: string, value: Api.AuditAuditDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiAuditAuditDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiAuditAuditDetailResponseBodyFromRequest(name: string, value: any): Api.AuditAuditDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditDetailResponseBody = modelApiAuditAuditDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditDetailResponseBodyToResponse(name: string, value: Api.AuditAuditDetailResponseBody): ToResponse<Api.AuditAuditDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditDetailResponseBody> = modelApiAuditAuditDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditMetadataKeys: string[] = ['uid', 'appOrServiceMetadata', 'applicant', 'approver', 'reason', 'createdAt', 'updatedAt', 'signature', 'auditType']

function modelApiAuditAuditMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'appOrServiceMetadata': allowUndefined(stringFromRequest)(`${name}.appOrServiceMetadata`, value['appOrServiceMetadata']),
		'applicant': allowUndefined(stringFromRequest)(`${name}.applicant`, value['applicant']),
		'approver': allowUndefined(stringFromRequest)(`${name}.approver`, value['approver']),
		'reason': allowUndefined(stringFromRequest)(`${name}.reason`, value['reason']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
		'auditType': allowUndefined(stringFromRequest)(`${name}.auditType`, value['auditType']),
	}

	return result
}

function modelApiAuditAuditMetadataToResponseContent(name: string, value: Api.AuditAuditMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'appOrServiceMetadata': allowUndefined(stringToResponse)(`${name}.appOrServiceMetadata`, value['appOrServiceMetadata']),
		'applicant': allowUndefined(stringToResponse)(`${name}.applicant`, value['applicant']),
		'approver': allowUndefined(stringToResponse)(`${name}.approver`, value['approver']),
		'reason': allowUndefined(stringToResponse)(`${name}.reason`, value['reason']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
		'auditType': allowUndefined(stringToResponse)(`${name}.auditType`, value['auditType']),
	}

	return result
}

export function modelApiAuditAuditMetadataFromRequest(name: string, value: any): Api.AuditAuditMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditMetadata = modelApiAuditAuditMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditMetadataToResponse(name: string, value: Api.AuditAuditMetadata): ToResponse<Api.AuditAuditMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditMetadata> = modelApiAuditAuditMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditRejectRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditRejectRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditRejectRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditRejectRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditRejectRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditRejectRequestToResponseContent(name: string, value: Api.AuditAuditRejectRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditRejectRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditRejectRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditRejectRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditRejectRequestFromRequest(name: string, value: any): Api.AuditAuditRejectRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditRejectRequest = modelApiAuditAuditRejectRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditRejectRequestToResponse(name: string, value: Api.AuditAuditRejectRequest): ToResponse<Api.AuditAuditRejectRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditRejectRequest> = modelApiAuditAuditRejectRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditRejectRequestBodyKeys: string[] = ['metadata']

function modelApiAuditAuditRejectRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditRejectRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditRejectRequestBody = {
		'metadata': allowUndefined(modelApiAuditCommentMetadataFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiAuditAuditRejectRequestBodyToResponseContent(name: string, value: Api.AuditAuditRejectRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditRejectRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditRejectRequestBody> = {
		'metadata': allowUndefined(modelApiAuditCommentMetadataToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiAuditAuditRejectRequestBodyFromRequest(name: string, value: any): Api.AuditAuditRejectRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditRejectRequestBody = modelApiAuditAuditRejectRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditRejectRequestBodyToResponse(name: string, value: Api.AuditAuditRejectRequestBody): ToResponse<Api.AuditAuditRejectRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditRejectRequestBody> = modelApiAuditAuditRejectRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditRejectResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditRejectResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditRejectResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditRejectResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditRejectResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditRejectResponseToResponseContent(name: string, value: Api.AuditAuditRejectResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditRejectResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditRejectResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditRejectResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditRejectResponseFromRequest(name: string, value: any): Api.AuditAuditRejectResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditRejectResponse = modelApiAuditAuditRejectResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditRejectResponseToResponse(name: string, value: Api.AuditAuditRejectResponse): ToResponse<Api.AuditAuditRejectResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditRejectResponse> = modelApiAuditAuditRejectResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditRejectResponseBodyKeys: string[] = ['status', 'metadata']

function modelApiAuditAuditRejectResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditRejectResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditRejectResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'metadata': allowUndefined(modelApiAuditCommentMetadataFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiAuditAuditRejectResponseBodyToResponseContent(name: string, value: Api.AuditAuditRejectResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditRejectResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditRejectResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditRejectResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'metadata': allowUndefined(modelApiAuditCommentMetadataToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiAuditAuditRejectResponseBodyFromRequest(name: string, value: any): Api.AuditAuditRejectResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditRejectResponseBody = modelApiAuditAuditRejectResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditRejectResponseBodyToResponse(name: string, value: Api.AuditAuditRejectResponseBody): ToResponse<Api.AuditAuditRejectResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditRejectResponseBody> = modelApiAuditAuditRejectResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditRejectResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditSearchConditionKeys: string[] = ['approver', 'name', 'type', 'applicant', 'startTime', 'endTime']

function modelApiAuditAuditSearchConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditSearchCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditSearchCondition = {
		'approver': allowUndefined(stringFromRequest)(`${name}.approver`, value['approver']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'type': allowUndefined(stringFromRequest)(`${name}.type`, value['type']),
		'applicant': allowUndefined(stringFromRequest)(`${name}.applicant`, value['applicant']),
		'startTime': allowUndefined(stringFromRequest)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringFromRequest)(`${name}.endTime`, value['endTime']),
	}

	return result
}

function modelApiAuditAuditSearchConditionToResponseContent(name: string, value: Api.AuditAuditSearchCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditSearchCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditSearchCondition> = {
		'approver': allowUndefined(stringToResponse)(`${name}.approver`, value['approver']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'type': allowUndefined(stringToResponse)(`${name}.type`, value['type']),
		'applicant': allowUndefined(stringToResponse)(`${name}.applicant`, value['applicant']),
		'startTime': allowUndefined(stringToResponse)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringToResponse)(`${name}.endTime`, value['endTime']),
	}

	return result
}

export function modelApiAuditAuditSearchConditionFromRequest(name: string, value: any): Api.AuditAuditSearchCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditSearchCondition = modelApiAuditAuditSearchConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditSearchConditionToResponse(name: string, value: Api.AuditAuditSearchCondition): ToResponse<Api.AuditAuditSearchCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditSearchCondition> = modelApiAuditAuditSearchConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchCondition: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditSearchRequestKeys: string[] = ['header', 'body']

function modelApiAuditAuditSearchRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditSearchRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditSearchRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditSearchRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditSearchRequestToResponseContent(name: string, value: Api.AuditAuditSearchRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditSearchRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditSearchRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditSearchRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditSearchRequestFromRequest(name: string, value: any): Api.AuditAuditSearchRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditSearchRequest = modelApiAuditAuditSearchRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditSearchRequestToResponse(name: string, value: Api.AuditAuditSearchRequest): ToResponse<Api.AuditAuditSearchRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditSearchRequest> = modelApiAuditAuditSearchRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditSearchRequestBodyKeys: string[] = ['condition', 'page']

function modelApiAuditAuditSearchRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditSearchRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditSearchRequestBody = {
		'condition': allowUndefined(modelApiAuditAuditSearchConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAuditAuditSearchRequestBodyToResponseContent(name: string, value: Api.AuditAuditSearchRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditSearchRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditSearchRequestBody> = {
		'condition': allowUndefined(modelApiAuditAuditSearchConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAuditAuditSearchRequestBodyFromRequest(name: string, value: any): Api.AuditAuditSearchRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditSearchRequestBody = modelApiAuditAuditSearchRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditSearchRequestBodyToResponse(name: string, value: Api.AuditAuditSearchRequestBody): ToResponse<Api.AuditAuditSearchRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditSearchRequestBody> = modelApiAuditAuditSearchRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditSearchResponseKeys: string[] = ['header', 'body']

function modelApiAuditAuditSearchResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditSearchResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditSearchResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditSearchResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuditAuditSearchResponseToResponseContent(name: string, value: Api.AuditAuditSearchResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditSearchResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditSearchResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuditAuditSearchResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuditAuditSearchResponseFromRequest(name: string, value: any): Api.AuditAuditSearchResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditSearchResponse = modelApiAuditAuditSearchResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditSearchResponseToResponse(name: string, value: Api.AuditAuditSearchResponse): ToResponse<Api.AuditAuditSearchResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditSearchResponse> = modelApiAuditAuditSearchResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuditAuditSearchResponseBodyKeys: string[] = ['status', 'detail', 'page']

function modelApiAuditAuditSearchResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditAuditSearchResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditAuditSearchResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(arrayFromRequest(modelApiAuditAuditDetailFromRequest))(`${name}.detail`, value['detail']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiAuditAuditSearchResponseBodyToResponseContent(name: string, value: Api.AuditAuditSearchResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditAuditSearchResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditAuditSearchResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditAuditSearchResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(arrayToResponse(modelApiAuditAuditDetailToResponse))(`${name}.detail`, value['detail']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiAuditAuditSearchResponseBodyFromRequest(name: string, value: any): Api.AuditAuditSearchResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditAuditSearchResponseBody = modelApiAuditAuditSearchResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditAuditSearchResponseBodyToResponse(name: string, value: Api.AuditAuditSearchResponseBody): ToResponse<Api.AuditAuditSearchResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditAuditSearchResponseBody> = modelApiAuditAuditSearchResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditAuditSearchResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuditCommentMetadataKeys: string[] = ['uid', 'auditId', 'text', 'status', 'createdAt', 'updatedAt', 'signature']

function modelApiAuditCommentMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuditCommentMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditCommentMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuditCommentMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'auditId': allowUndefined(stringFromRequest)(`${name}.auditId`, value['auditId']),
		'text': allowUndefined(stringFromRequest)(`${name}.text`, value['text']),
		'status': allowUndefined(enumApiAuditCommentStatusEnumFromRequest)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAuditCommentMetadataToResponseContent(name: string, value: Api.AuditCommentMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuditCommentMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuditCommentMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuditCommentMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'auditId': allowUndefined(stringToResponse)(`${name}.auditId`, value['auditId']),
		'text': allowUndefined(stringToResponse)(`${name}.text`, value['text']),
		'status': allowUndefined(enumApiAuditCommentStatusEnumToResponse)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAuditCommentMetadataFromRequest(name: string, value: any): Api.AuditCommentMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuditCommentMetadata = modelApiAuditCommentMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditCommentMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuditCommentMetadataToResponse(name: string, value: Api.AuditCommentMetadata): ToResponse<Api.AuditCommentMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuditCommentMetadata> = modelApiAuditCommentMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuditCommentMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiAuditCommentStatusEnumFromRequest(name: string, value: any): Api.AuditCommentStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'COMMENT_STATUS_AGREE') {
		return Api.AuditCommentStatusEnum.COMMENTSTATUSAGREE
	}
	if (value === 'COMMENT_STATUS_REJECT') {
		return Api.AuditCommentStatusEnum.COMMENTSTATUSREJECT
	}

	throw `Unexpected enum value for Api.AuditCommentStatusEnum: ${value}`
}

export function enumApiAuditCommentStatusEnumToResponse(name: string, value: Api.AuditCommentStatusEnum): Api.AuditCommentStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'COMMENT_STATUS_AGREE') {
		return Api.AuditCommentStatusEnum.COMMENTSTATUSAGREE
	}
	if (value === 'COMMENT_STATUS_REJECT') {
		return Api.AuditCommentStatusEnum.COMMENTSTATUSREJECT
	}

	throw `Unexpected enum value for Api.AuditCommentStatusEnum: ${value}`
}

const ApiAuthChallengeRequestKeys: string[] = ['header', 'body']

function modelApiAuthChallengeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthChallengeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthChallengeRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthChallengeRequestRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuthChallengeRequestToResponseContent(name: string, value: Api.AuthChallengeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthChallengeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthChallengeRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthChallengeRequestRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuthChallengeRequestFromRequest(name: string, value: any): Api.AuthChallengeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthChallengeRequest = modelApiAuthChallengeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthChallengeRequestToResponse(name: string, value: Api.AuthChallengeRequest): ToResponse<Api.AuthChallengeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthChallengeRequest> = modelApiAuthChallengeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuthChallengeRequestRequestBodyKeys: string[] = ['address']

function modelApiAuthChallengeRequestRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthChallengeRequestRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeRequestRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthChallengeRequestRequestBody = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
	}

	return result
}

function modelApiAuthChallengeRequestRequestBodyToResponseContent(name: string, value: Api.AuthChallengeRequestRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthChallengeRequestRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeRequestRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthChallengeRequestRequestBody> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
	}

	return result
}

export function modelApiAuthChallengeRequestRequestBodyFromRequest(name: string, value: any): Api.AuthChallengeRequestRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthChallengeRequestRequestBody = modelApiAuthChallengeRequestRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeRequestRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthChallengeRequestRequestBodyToResponse(name: string, value: Api.AuthChallengeRequestRequestBody): ToResponse<Api.AuthChallengeRequestRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthChallengeRequestRequestBody> = modelApiAuthChallengeRequestRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeRequestRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuthChallengeResponseKeys: string[] = ['header', 'body']

function modelApiAuthChallengeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthChallengeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthChallengeResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthChallengeResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuthChallengeResponseToResponseContent(name: string, value: Api.AuthChallengeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthChallengeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthChallengeResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthChallengeResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuthChallengeResponseFromRequest(name: string, value: any): Api.AuthChallengeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthChallengeResponse = modelApiAuthChallengeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthChallengeResponseToResponse(name: string, value: Api.AuthChallengeResponse): ToResponse<Api.AuthChallengeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthChallengeResponse> = modelApiAuthChallengeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuthChallengeResponseBodyKeys: string[] = ['status', 'result']

function modelApiAuthChallengeResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthChallengeResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthChallengeResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'result': allowUndefined(stringFromRequest)(`${name}.result`, value['result']),
	}

	return result
}

function modelApiAuthChallengeResponseBodyToResponseContent(name: string, value: Api.AuthChallengeResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthChallengeResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthChallengeResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthChallengeResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'result': allowUndefined(stringToResponse)(`${name}.result`, value['result']),
	}

	return result
}

export function modelApiAuthChallengeResponseBodyFromRequest(name: string, value: any): Api.AuthChallengeResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthChallengeResponseBody = modelApiAuthChallengeResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthChallengeResponseBodyToResponse(name: string, value: Api.AuthChallengeResponseBody): ToResponse<Api.AuthChallengeResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthChallengeResponseBody> = modelApiAuthChallengeResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthChallengeResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuthVerifyRequestKeys: string[] = ['header', 'body']

function modelApiAuthVerifyRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthVerifyRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthVerifyRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthVerifyRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuthVerifyRequestToResponseContent(name: string, value: Api.AuthVerifyRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthVerifyRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthVerifyRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthVerifyRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuthVerifyRequestFromRequest(name: string, value: any): Api.AuthVerifyRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthVerifyRequest = modelApiAuthVerifyRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthVerifyRequestToResponse(name: string, value: Api.AuthVerifyRequest): ToResponse<Api.AuthVerifyRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthVerifyRequest> = modelApiAuthVerifyRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyRequest: ${key}`
			}
		}
	}

	return result
}

const ApiAuthVerifyRequestBodyKeys: string[] = ['address', 'signature']

function modelApiAuthVerifyRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthVerifyRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthVerifyRequestBody = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiAuthVerifyRequestBodyToResponseContent(name: string, value: Api.AuthVerifyRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthVerifyRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthVerifyRequestBody> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiAuthVerifyRequestBodyFromRequest(name: string, value: any): Api.AuthVerifyRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthVerifyRequestBody = modelApiAuthVerifyRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthVerifyRequestBodyToResponse(name: string, value: Api.AuthVerifyRequestBody): ToResponse<Api.AuthVerifyRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthVerifyRequestBody> = modelApiAuthVerifyRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiAuthVerifyResponseKeys: string[] = ['header', 'body']

function modelApiAuthVerifyResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthVerifyResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthVerifyResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthVerifyResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiAuthVerifyResponseToResponseContent(name: string, value: Api.AuthVerifyResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthVerifyResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthVerifyResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiAuthVerifyResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiAuthVerifyResponseFromRequest(name: string, value: any): Api.AuthVerifyResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthVerifyResponse = modelApiAuthVerifyResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthVerifyResponseToResponse(name: string, value: Api.AuthVerifyResponse): ToResponse<Api.AuthVerifyResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthVerifyResponse> = modelApiAuthVerifyResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyResponse: ${key}`
			}
		}
	}

	return result
}

const ApiAuthVerifyResponseBodyKeys: string[] = ['status', 'token']

function modelApiAuthVerifyResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthVerifyResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthVerifyResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'token': allowUndefined(stringFromRequest)(`${name}.token`, value['token']),
	}

	return result
}

function modelApiAuthVerifyResponseBodyToResponseContent(name: string, value: Api.AuthVerifyResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.AuthVerifyResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthVerifyResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.AuthVerifyResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'token': allowUndefined(stringToResponse)(`${name}.token`, value['token']),
	}

	return result
}

export function modelApiAuthVerifyResponseBodyFromRequest(name: string, value: any): Api.AuthVerifyResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthVerifyResponseBody = modelApiAuthVerifyResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiAuthVerifyResponseBodyToResponse(name: string, value: Api.AuthVerifyResponseBody): ToResponse<Api.AuthVerifyResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.AuthVerifyResponseBody> = modelApiAuthVerifyResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.AuthVerifyResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiBlockStreamGet200ResponseKeys: string[] = ['result', 'error']

function modelApiBlockStreamGet200ResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BlockStreamGet200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBlockStreamGet200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BlockStreamGet200Response = {
		'result': allowUndefined(modelApiAssetStreamGetBlockResponseFromRequest)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusFromRequest)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiBlockStreamGet200ResponseToResponseContent(name: string, value: Api.BlockStreamGet200Response, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BlockStreamGet200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBlockStreamGet200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BlockStreamGet200Response> = {
		'result': allowUndefined(modelApiAssetStreamGetBlockResponseToResponse)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusToResponse)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiBlockStreamGet200ResponseFromRequest(name: string, value: any): Api.BlockStreamGet200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BlockStreamGet200Response = modelApiBlockStreamGet200ResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BlockStreamGet200Response: ${key}`
			}
		}
	}

	return result
}

export function modelApiBlockStreamGet200ResponseToResponse(name: string, value: Api.BlockStreamGet200Response): ToResponse<Api.BlockStreamGet200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BlockStreamGet200Response> = modelApiBlockStreamGet200ResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BlockStreamGet200Response: ${key}`
			}
		}
	}

	return result
}

const ApiBlockStreamPut200ResponseKeys: string[] = ['result', 'error']

function modelApiBlockStreamPut200ResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BlockStreamPut200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBlockStreamPut200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BlockStreamPut200Response = {
		'result': allowUndefined(modelApiAssetStreamPutBlockResponseFromRequest)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusFromRequest)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiBlockStreamPut200ResponseToResponseContent(name: string, value: Api.BlockStreamPut200Response, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BlockStreamPut200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBlockStreamPut200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BlockStreamPut200Response> = {
		'result': allowUndefined(modelApiAssetStreamPutBlockResponseToResponse)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusToResponse)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiBlockStreamPut200ResponseFromRequest(name: string, value: any): Api.BlockStreamPut200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BlockStreamPut200Response = modelApiBlockStreamPut200ResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BlockStreamPut200Response: ${key}`
			}
		}
	}

	return result
}

export function modelApiBlockStreamPut200ResponseToResponse(name: string, value: Api.BlockStreamPut200Response): ToResponse<Api.BlockStreamPut200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BlockStreamPut200Response> = modelApiBlockStreamPut200ResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BlockStreamPut200Response: ${key}`
			}
		}
	}

	return result
}

export function enumApiBulletinBulletinCodeEnumFromRequest(name: string, value: any): Api.BulletinBulletinCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'BULLETIN_CODE_SOLUTION') {
		return Api.BulletinBulletinCodeEnum.BULLETINCODESOLUTION
	}

	throw `Unexpected enum value for Api.BulletinBulletinCodeEnum: ${value}`
}

export function enumApiBulletinBulletinCodeEnumToResponse(name: string, value: Api.BulletinBulletinCodeEnum): Api.BulletinBulletinCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'BULLETIN_CODE_SOLUTION') {
		return Api.BulletinBulletinCodeEnum.BULLETINCODESOLUTION
	}

	throw `Unexpected enum value for Api.BulletinBulletinCodeEnum: ${value}`
}

const ApiBulletinBulletinListRequestKeys: string[] = ['header', 'body']

function modelApiBulletinBulletinListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinBulletinListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinBulletinListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiBulletinBulletinListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiBulletinBulletinListRequestToResponseContent(name: string, value: Api.BulletinBulletinListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinBulletinListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinBulletinListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiBulletinBulletinListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiBulletinBulletinListRequestFromRequest(name: string, value: any): Api.BulletinBulletinListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinBulletinListRequest = modelApiBulletinBulletinListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinBulletinListRequestToResponse(name: string, value: Api.BulletinBulletinListRequest): ToResponse<Api.BulletinBulletinListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinBulletinListRequest> = modelApiBulletinBulletinListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiBulletinBulletinListRequestBodyKeys: string[] = ['code', 'language', 'page']

function modelApiBulletinBulletinListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinBulletinListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinBulletinListRequestBody = {
		'code': allowUndefined(enumApiBulletinBulletinCodeEnumFromRequest)(`${name}.code`, value['code']),
		'language': allowUndefined(enumApiCommonLanguageCodeEnumFromRequest)(`${name}.language`, value['language']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiBulletinBulletinListRequestBodyToResponseContent(name: string, value: Api.BulletinBulletinListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinBulletinListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinBulletinListRequestBody> = {
		'code': allowUndefined(enumApiBulletinBulletinCodeEnumToResponse)(`${name}.code`, value['code']),
		'language': allowUndefined(enumApiCommonLanguageCodeEnumToResponse)(`${name}.language`, value['language']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiBulletinBulletinListRequestBodyFromRequest(name: string, value: any): Api.BulletinBulletinListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinBulletinListRequestBody = modelApiBulletinBulletinListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinBulletinListRequestBodyToResponse(name: string, value: Api.BulletinBulletinListRequestBody): ToResponse<Api.BulletinBulletinListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinBulletinListRequestBody> = modelApiBulletinBulletinListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiBulletinBulletinListResponseKeys: string[] = ['header', 'body']

function modelApiBulletinBulletinListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinBulletinListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinBulletinListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiBulletinBulletinListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiBulletinBulletinListResponseToResponseContent(name: string, value: Api.BulletinBulletinListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinBulletinListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinBulletinListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiBulletinBulletinListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiBulletinBulletinListResponseFromRequest(name: string, value: any): Api.BulletinBulletinListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinBulletinListResponse = modelApiBulletinBulletinListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinBulletinListResponseToResponse(name: string, value: Api.BulletinBulletinListResponse): ToResponse<Api.BulletinBulletinListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinBulletinListResponse> = modelApiBulletinBulletinListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiBulletinBulletinListResponseBodyKeys: string[] = ['status', 'solutions', 'page']

function modelApiBulletinBulletinListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinBulletinListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinBulletinListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'solutions': allowUndefined(arrayFromRequest(modelApiBulletinSolutionMetadataFromRequest))(`${name}.solutions`, value['solutions']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiBulletinBulletinListResponseBodyToResponseContent(name: string, value: Api.BulletinBulletinListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinBulletinListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinBulletinListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinBulletinListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'solutions': allowUndefined(arrayToResponse(modelApiBulletinSolutionMetadataToResponse))(`${name}.solutions`, value['solutions']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiBulletinBulletinListResponseBodyFromRequest(name: string, value: any): Api.BulletinBulletinListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinBulletinListResponseBody = modelApiBulletinBulletinListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinBulletinListResponseBodyToResponse(name: string, value: Api.BulletinBulletinListResponseBody): ToResponse<Api.BulletinBulletinListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinBulletinListResponseBody> = modelApiBulletinBulletinListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinBulletinListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiBulletinSolutionCardKeys: string[] = ['name', 'price', 'variables']

function modelApiBulletinSolutionCardFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinSolutionCard {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinSolutionCardKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinSolutionCard = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'price': allowUndefined(stringFromRequest)(`${name}.price`, value['price']),
		'variables': allowUndefined(stringFromRequest)(`${name}.variables`, value['variables']),
	}

	return result
}

function modelApiBulletinSolutionCardToResponseContent(name: string, value: Api.BulletinSolutionCard, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinSolutionCard> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinSolutionCardKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinSolutionCard> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'price': allowUndefined(stringToResponse)(`${name}.price`, value['price']),
		'variables': allowUndefined(stringToResponse)(`${name}.variables`, value['variables']),
	}

	return result
}

export function modelApiBulletinSolutionCardFromRequest(name: string, value: any): Api.BulletinSolutionCard {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinSolutionCard = modelApiBulletinSolutionCardFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinSolutionCard: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinSolutionCardToResponse(name: string, value: Api.BulletinSolutionCard): ToResponse<Api.BulletinSolutionCard> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinSolutionCard> = modelApiBulletinSolutionCardToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinSolutionCard: ${key}`
			}
		}
	}

	return result
}

const ApiBulletinSolutionMetadataKeys: string[] = ['publisher', 'language', 'uid', 'name', 'description', 'createdAt', 'cards', 'signature']

function modelApiBulletinSolutionMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.BulletinSolutionMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinSolutionMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.BulletinSolutionMetadata = {
		'publisher': allowUndefined(stringFromRequest)(`${name}.publisher`, value['publisher']),
		'language': allowUndefined(enumApiCommonLanguageCodeEnumFromRequest)(`${name}.language`, value['language']),
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'cards': allowUndefined(arrayFromRequest(modelApiBulletinSolutionCardFromRequest))(`${name}.cards`, value['cards']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiBulletinSolutionMetadataToResponseContent(name: string, value: Api.BulletinSolutionMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.BulletinSolutionMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiBulletinSolutionMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.BulletinSolutionMetadata> = {
		'publisher': allowUndefined(stringToResponse)(`${name}.publisher`, value['publisher']),
		'language': allowUndefined(enumApiCommonLanguageCodeEnumToResponse)(`${name}.language`, value['language']),
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'cards': allowUndefined(arrayToResponse(modelApiBulletinSolutionCardToResponse))(`${name}.cards`, value['cards']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiBulletinSolutionMetadataFromRequest(name: string, value: any): Api.BulletinSolutionMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.BulletinSolutionMetadata = modelApiBulletinSolutionMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinSolutionMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiBulletinSolutionMetadataToResponse(name: string, value: Api.BulletinSolutionMetadata): ToResponse<Api.BulletinSolutionMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.BulletinSolutionMetadata> = modelApiBulletinSolutionMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.BulletinSolutionMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateCertificateMetadataKeys: string[] = ['crt', 'ca']

function modelApiCertificateCertificateMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateCertificateMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateCertificateMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateCertificateMetadata = {
		'crt': allowUndefined(stringFromRequest)(`${name}.crt`, value['crt']),
		'ca': allowUndefined(stringFromRequest)(`${name}.ca`, value['ca']),
	}

	return result
}

function modelApiCertificateCertificateMetadataToResponseContent(name: string, value: Api.CertificateCertificateMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateCertificateMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateCertificateMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateCertificateMetadata> = {
		'crt': allowUndefined(stringToResponse)(`${name}.crt`, value['crt']),
		'ca': allowUndefined(stringToResponse)(`${name}.ca`, value['ca']),
	}

	return result
}

export function modelApiCertificateCertificateMetadataFromRequest(name: string, value: any): Api.CertificateCertificateMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateCertificateMetadata = modelApiCertificateCertificateMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateCertificateMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateCertificateMetadataToResponse(name: string, value: Api.CertificateCertificateMetadata): ToResponse<Api.CertificateCertificateMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateCertificateMetadata> = modelApiCertificateCertificateMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateCertificateMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateGetRequestKeys: string[] = ['header']

function modelApiCertificateGetRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateGetRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateGetRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiCertificateGetRequestToResponseContent(name: string, value: Api.CertificateGetRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateGetRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateGetRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiCertificateGetRequestFromRequest(name: string, value: any): Api.CertificateGetRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateGetRequest = modelApiCertificateGetRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateGetRequestToResponse(name: string, value: Api.CertificateGetRequest): ToResponse<Api.CertificateGetRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateGetRequest> = modelApiCertificateGetRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateGetResponseKeys: string[] = ['header', 'body']

function modelApiCertificateGetResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateGetResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateGetResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateGetResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCertificateGetResponseToResponseContent(name: string, value: Api.CertificateGetResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateGetResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateGetResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateGetResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCertificateGetResponseFromRequest(name: string, value: any): Api.CertificateGetResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateGetResponse = modelApiCertificateGetResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateGetResponseToResponse(name: string, value: Api.CertificateGetResponse): ToResponse<Api.CertificateGetResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateGetResponse> = modelApiCertificateGetResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateGetResponseBodyKeys: string[] = ['status', 'certificate']

function modelApiCertificateGetResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateGetResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateGetResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'certificate': allowUndefined(modelApiCertificateCertificateMetadataFromRequest)(`${name}.certificate`, value['certificate']),
	}

	return result
}

function modelApiCertificateGetResponseBodyToResponseContent(name: string, value: Api.CertificateGetResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateGetResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateGetResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateGetResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'certificate': allowUndefined(modelApiCertificateCertificateMetadataToResponse)(`${name}.certificate`, value['certificate']),
	}

	return result
}

export function modelApiCertificateGetResponseBodyFromRequest(name: string, value: any): Api.CertificateGetResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateGetResponseBody = modelApiCertificateGetResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateGetResponseBodyToResponse(name: string, value: Api.CertificateGetResponseBody): ToResponse<Api.CertificateGetResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateGetResponseBody> = modelApiCertificateGetResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateGetResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateSignRequestKeys: string[] = ['header', 'body']

function modelApiCertificateSignRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateSignRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateSignRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateSignRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCertificateSignRequestToResponseContent(name: string, value: Api.CertificateSignRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateSignRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateSignRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateSignRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCertificateSignRequestFromRequest(name: string, value: any): Api.CertificateSignRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateSignRequest = modelApiCertificateSignRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateSignRequestToResponse(name: string, value: Api.CertificateSignRequest): ToResponse<Api.CertificateSignRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateSignRequest> = modelApiCertificateSignRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateSignRequestBodyKeys: string[] = ['domain', 'csr']

function modelApiCertificateSignRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateSignRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateSignRequestBody = {
		'domain': allowUndefined(stringFromRequest)(`${name}.domain`, value['domain']),
		'csr': allowUndefined(stringFromRequest)(`${name}.csr`, value['csr']),
	}

	return result
}

function modelApiCertificateSignRequestBodyToResponseContent(name: string, value: Api.CertificateSignRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateSignRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateSignRequestBody> = {
		'domain': allowUndefined(stringToResponse)(`${name}.domain`, value['domain']),
		'csr': allowUndefined(stringToResponse)(`${name}.csr`, value['csr']),
	}

	return result
}

export function modelApiCertificateSignRequestBodyFromRequest(name: string, value: any): Api.CertificateSignRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateSignRequestBody = modelApiCertificateSignRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateSignRequestBodyToResponse(name: string, value: Api.CertificateSignRequestBody): ToResponse<Api.CertificateSignRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateSignRequestBody> = modelApiCertificateSignRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateSignResponseKeys: string[] = ['header', 'body']

function modelApiCertificateSignResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateSignResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateSignResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateSignResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCertificateSignResponseToResponseContent(name: string, value: Api.CertificateSignResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateSignResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateSignResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCertificateSignResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCertificateSignResponseFromRequest(name: string, value: any): Api.CertificateSignResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateSignResponse = modelApiCertificateSignResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateSignResponseToResponse(name: string, value: Api.CertificateSignResponse): ToResponse<Api.CertificateSignResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateSignResponse> = modelApiCertificateSignResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCertificateSignResponseBodyKeys: string[] = ['status', 'certificate']

function modelApiCertificateSignResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CertificateSignResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CertificateSignResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'certificate': allowUndefined(modelApiCertificateCertificateMetadataFromRequest)(`${name}.certificate`, value['certificate']),
	}

	return result
}

function modelApiCertificateSignResponseBodyToResponseContent(name: string, value: Api.CertificateSignResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CertificateSignResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCertificateSignResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CertificateSignResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'certificate': allowUndefined(modelApiCertificateCertificateMetadataToResponse)(`${name}.certificate`, value['certificate']),
	}

	return result
}

export function modelApiCertificateSignResponseBodyFromRequest(name: string, value: any): Api.CertificateSignResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CertificateSignResponseBody = modelApiCertificateSignResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCertificateSignResponseBodyToResponse(name: string, value: Api.CertificateSignResponseBody): ToResponse<Api.CertificateSignResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CertificateSignResponseBody> = modelApiCertificateSignResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CertificateSignResponseBody: ${key}`
			}
		}
	}

	return result
}

export function enumApiCommonApiCodeEnumFromRequest(name: string, value: any): Api.CommonApiCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'API_CODE_UNKNOWN') {
		return Api.CommonApiCodeEnum.APICODEUNKNOWN
	}
	if (value === 'API_CODE_USER') {
		return Api.CommonApiCodeEnum.APICODEUSER
	}
	if (value === 'API_CODE_IDENTITY') {
		return Api.CommonApiCodeEnum.APICODEIDENTITY
	}
	if (value === 'API_CODE_LLM_SERVICE') {
		return Api.CommonApiCodeEnum.APICODELLMSERVICE
	}
	if (value === 'API_CODE_LLM_PROVIDER') {
		return Api.CommonApiCodeEnum.APICODELLMPROVIDER
	}
	if (value === 'API_CODE_ASSET_SERVICE') {
		return Api.CommonApiCodeEnum.APICODEASSETSERVICE
	}
	if (value === 'API_CODE_ASSET_BLOCK') {
		return Api.CommonApiCodeEnum.APICODEASSETBLOCK
	}
	if (value === 'API_CODE_ASSET_LINK') {
		return Api.CommonApiCodeEnum.APICODEASSETLINK
	}
	if (value === 'API_CODE_ASSET_NAMESPACE') {
		return Api.CommonApiCodeEnum.APICODEASSETNAMESPACE
	}
	if (value === 'API_CODE_ASSET_RECYCLE') {
		return Api.CommonApiCodeEnum.APICODEASSETRECYCLE
	}
	if (value === 'API_CODE_CERTIFICATE') {
		return Api.CommonApiCodeEnum.APICODECERTIFICATE
	}
	if (value === 'API_CODE_STORAGE') {
		return Api.CommonApiCodeEnum.APICODESTORAGE
	}
	if (value === 'API_CODE_APPLICATION') {
		return Api.CommonApiCodeEnum.APICODEAPPLICATION
	}
	if (value === 'API_CODE_EVENT') {
		return Api.CommonApiCodeEnum.APICODEEVENT
	}
	if (value === 'API_CODE_INVITATION') {
		return Api.CommonApiCodeEnum.APICODEINVITATION
	}
	if (value === 'API_CODE_SERVICE') {
		return Api.CommonApiCodeEnum.APICODESERVICE
	}
	if (value === 'API_CODE_RAG') {
		return Api.CommonApiCodeEnum.APICODERAG
	}

	throw `Unexpected enum value for Api.CommonApiCodeEnum: ${value}`
}

export function enumApiCommonApiCodeEnumToResponse(name: string, value: Api.CommonApiCodeEnum): Api.CommonApiCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'API_CODE_UNKNOWN') {
		return Api.CommonApiCodeEnum.APICODEUNKNOWN
	}
	if (value === 'API_CODE_USER') {
		return Api.CommonApiCodeEnum.APICODEUSER
	}
	if (value === 'API_CODE_IDENTITY') {
		return Api.CommonApiCodeEnum.APICODEIDENTITY
	}
	if (value === 'API_CODE_LLM_SERVICE') {
		return Api.CommonApiCodeEnum.APICODELLMSERVICE
	}
	if (value === 'API_CODE_LLM_PROVIDER') {
		return Api.CommonApiCodeEnum.APICODELLMPROVIDER
	}
	if (value === 'API_CODE_ASSET_SERVICE') {
		return Api.CommonApiCodeEnum.APICODEASSETSERVICE
	}
	if (value === 'API_CODE_ASSET_BLOCK') {
		return Api.CommonApiCodeEnum.APICODEASSETBLOCK
	}
	if (value === 'API_CODE_ASSET_LINK') {
		return Api.CommonApiCodeEnum.APICODEASSETLINK
	}
	if (value === 'API_CODE_ASSET_NAMESPACE') {
		return Api.CommonApiCodeEnum.APICODEASSETNAMESPACE
	}
	if (value === 'API_CODE_ASSET_RECYCLE') {
		return Api.CommonApiCodeEnum.APICODEASSETRECYCLE
	}
	if (value === 'API_CODE_CERTIFICATE') {
		return Api.CommonApiCodeEnum.APICODECERTIFICATE
	}
	if (value === 'API_CODE_STORAGE') {
		return Api.CommonApiCodeEnum.APICODESTORAGE
	}
	if (value === 'API_CODE_APPLICATION') {
		return Api.CommonApiCodeEnum.APICODEAPPLICATION
	}
	if (value === 'API_CODE_EVENT') {
		return Api.CommonApiCodeEnum.APICODEEVENT
	}
	if (value === 'API_CODE_INVITATION') {
		return Api.CommonApiCodeEnum.APICODEINVITATION
	}
	if (value === 'API_CODE_SERVICE') {
		return Api.CommonApiCodeEnum.APICODESERVICE
	}
	if (value === 'API_CODE_RAG') {
		return Api.CommonApiCodeEnum.APICODERAG
	}

	throw `Unexpected enum value for Api.CommonApiCodeEnum: ${value}`
}

export function enumApiCommonApplicationCodeEnumFromRequest(name: string, value: any): Api.CommonApplicationCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLICATION_CODE_UNKNOWN') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEUNKNOWN
	}
	if (value === 'APPLICATION_CODE_MARKET') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEMARKET
	}
	if (value === 'APPLICATION_CODE_ASSET') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEASSET
	}
	if (value === 'APPLICATION_CODE_KNOWLEDGE') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEKNOWLEDGE
	}
	if (value === 'APPLICATION_CODE_KEEPER') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEKEEPER
	}
	if (value === 'APPLICATION_CODE_SOCIAL') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODESOCIAL
	}
	if (value === 'APPLICATION_CODE_WORKBENCH') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEWORKBENCH
	}

	throw `Unexpected enum value for Api.CommonApplicationCodeEnum: ${value}`
}

export function enumApiCommonApplicationCodeEnumToResponse(name: string, value: Api.CommonApplicationCodeEnum): Api.CommonApplicationCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLICATION_CODE_UNKNOWN') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEUNKNOWN
	}
	if (value === 'APPLICATION_CODE_MARKET') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEMARKET
	}
	if (value === 'APPLICATION_CODE_ASSET') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEASSET
	}
	if (value === 'APPLICATION_CODE_KNOWLEDGE') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEKNOWLEDGE
	}
	if (value === 'APPLICATION_CODE_KEEPER') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEKEEPER
	}
	if (value === 'APPLICATION_CODE_SOCIAL') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODESOCIAL
	}
	if (value === 'APPLICATION_CODE_WORKBENCH') {
		return Api.CommonApplicationCodeEnum.APPLICATIONCODEWORKBENCH
	}

	throw `Unexpected enum value for Api.CommonApplicationCodeEnum: ${value}`
}

const ApiCommonApplicationMetadataKeys: string[] = ['owner', 'network', 'address', 'did', 'version', 'hash', 'name', 'code', 'description', 'location', 'serviceCodes', 'avatar', 'createdAt', 'updatedAt', 'signature', 'codePackagePath', 'ownerName']

function modelApiCommonApplicationMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonApplicationMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonApplicationMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonApplicationMetadata = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'network': allowUndefined(stringFromRequest)(`${name}.network`, value['network']),
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'code': allowUndefined(enumApiCommonApplicationCodeEnumFromRequest)(`${name}.code`, value['code']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'location': allowUndefined(stringFromRequest)(`${name}.location`, value['location']),
		'serviceCodes': allowUndefined(arrayFromRequest(enumApiCommonServiceCodeEnumFromRequest))(`${name}.serviceCodes`, value['serviceCodes']),
		'avatar': allowUndefined(stringFromRequest)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
		'codePackagePath': allowUndefined(stringFromRequest)(`${name}.codePackagePath`, value['codePackagePath']),
		'ownerName': allowUndefined(stringFromRequest)(`${name}.ownerName`, value['ownerName']),
	}

	return result
}

function modelApiCommonApplicationMetadataToResponseContent(name: string, value: Api.CommonApplicationMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonApplicationMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonApplicationMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonApplicationMetadata> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'network': allowUndefined(stringToResponse)(`${name}.network`, value['network']),
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'code': allowUndefined(enumApiCommonApplicationCodeEnumToResponse)(`${name}.code`, value['code']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'location': allowUndefined(stringToResponse)(`${name}.location`, value['location']),
		'serviceCodes': allowUndefined(arrayToResponse(enumApiCommonServiceCodeEnumToResponse))(`${name}.serviceCodes`, value['serviceCodes']),
		'avatar': allowUndefined(stringToResponse)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
		'codePackagePath': allowUndefined(stringToResponse)(`${name}.codePackagePath`, value['codePackagePath']),
		'ownerName': allowUndefined(stringToResponse)(`${name}.ownerName`, value['ownerName']),
	}

	return result
}

export function modelApiCommonApplicationMetadataFromRequest(name: string, value: any): Api.CommonApplicationMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonApplicationMetadata = modelApiCommonApplicationMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonApplicationMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonApplicationMetadataToResponse(name: string, value: Api.CommonApplicationMetadata): ToResponse<Api.CommonApplicationMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonApplicationMetadata> = modelApiCommonApplicationMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonApplicationMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiCommonApplicationStatusEnumFromRequest(name: string, value: any): Api.CommonApplicationStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLICATION_STATUS_UNKNOWN') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSUNKNOWN
	}
	if (value === 'APPLICATION_STATUS_CREATED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSCREATED
	}
	if (value === 'APPLICATION_STATUS_AUDITED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSAUDITED
	}
	if (value === 'APPLICATION_STATUS_REFUSED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSREFUSED
	}
	if (value === 'APPLICATION_STATUS_OFFLINE') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSOFFLINE
	}
	if (value === 'APPLICATION_STATUS_ONLINE') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSONLINE
	}

	throw `Unexpected enum value for Api.CommonApplicationStatusEnum: ${value}`
}

export function enumApiCommonApplicationStatusEnumToResponse(name: string, value: Api.CommonApplicationStatusEnum): Api.CommonApplicationStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLICATION_STATUS_UNKNOWN') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSUNKNOWN
	}
	if (value === 'APPLICATION_STATUS_CREATED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSCREATED
	}
	if (value === 'APPLICATION_STATUS_AUDITED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSAUDITED
	}
	if (value === 'APPLICATION_STATUS_REFUSED') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSREFUSED
	}
	if (value === 'APPLICATION_STATUS_OFFLINE') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSOFFLINE
	}
	if (value === 'APPLICATION_STATUS_ONLINE') {
		return Api.CommonApplicationStatusEnum.APPLICATIONSTATUSONLINE
	}

	throw `Unexpected enum value for Api.CommonApplicationStatusEnum: ${value}`
}

export function enumApiCommonAuthenticateTypeEnumFromRequest(name: string, value: any): Api.CommonAuthenticateTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'AUTHENTICATE_TYPE_UNKNOWN') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPEUNKNOWN
	}
	if (value === 'AUTHENTICATE_TYPE_CERT') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPECERT
	}
	if (value === 'AUTHENTICATE_TYPE_TOKEN') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPETOKEN
	}

	throw `Unexpected enum value for Api.CommonAuthenticateTypeEnum: ${value}`
}

export function enumApiCommonAuthenticateTypeEnumToResponse(name: string, value: Api.CommonAuthenticateTypeEnum): Api.CommonAuthenticateTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'AUTHENTICATE_TYPE_UNKNOWN') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPEUNKNOWN
	}
	if (value === 'AUTHENTICATE_TYPE_CERT') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPECERT
	}
	if (value === 'AUTHENTICATE_TYPE_TOKEN') {
		return Api.CommonAuthenticateTypeEnum.AUTHENTICATETYPETOKEN
	}

	throw `Unexpected enum value for Api.CommonAuthenticateTypeEnum: ${value}`
}

export function enumApiCommonContentFormatEnumFromRequest(name: string, value: any): Api.CommonContentFormatEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTENT_FORMAT_UNKNOWN') {
		return Api.CommonContentFormatEnum.CONTENTFORMATUNKNOWN
	}
	if (value === 'CONTENT_FORMAT_URL') {
		return Api.CommonContentFormatEnum.CONTENTFORMATURL
	}
	if (value === 'CONTENT_FORMAT_BASE64') {
		return Api.CommonContentFormatEnum.CONTENTFORMATBASE64
	}

	throw `Unexpected enum value for Api.CommonContentFormatEnum: ${value}`
}

export function enumApiCommonContentFormatEnumToResponse(name: string, value: Api.CommonContentFormatEnum): Api.CommonContentFormatEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTENT_FORMAT_UNKNOWN') {
		return Api.CommonContentFormatEnum.CONTENTFORMATUNKNOWN
	}
	if (value === 'CONTENT_FORMAT_URL') {
		return Api.CommonContentFormatEnum.CONTENTFORMATURL
	}
	if (value === 'CONTENT_FORMAT_BASE64') {
		return Api.CommonContentFormatEnum.CONTENTFORMATBASE64
	}

	throw `Unexpected enum value for Api.CommonContentFormatEnum: ${value}`
}

export function enumApiCommonContractStatusEnumFromRequest(name: string, value: any): Api.CommonContractStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTRACT_STATUS_UNKNOWN') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSUNKNOWN
	}
	if (value === 'CONTRACT_STATUS_INACTIVATED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSINACTIVATED
	}
	if (value === 'CONTRACT_STATUS_ACTIVATED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSACTIVATED
	}
	if (value === 'CONTRACT_STATUS_EXPIRED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSEXPIRED
	}
	if (value === 'CONTRACT_STATUS_CANCELED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSCANCELED
	}

	throw `Unexpected enum value for Api.CommonContractStatusEnum: ${value}`
}

export function enumApiCommonContractStatusEnumToResponse(name: string, value: Api.CommonContractStatusEnum): Api.CommonContractStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTRACT_STATUS_UNKNOWN') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSUNKNOWN
	}
	if (value === 'CONTRACT_STATUS_INACTIVATED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSINACTIVATED
	}
	if (value === 'CONTRACT_STATUS_ACTIVATED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSACTIVATED
	}
	if (value === 'CONTRACT_STATUS_EXPIRED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSEXPIRED
	}
	if (value === 'CONTRACT_STATUS_CANCELED') {
		return Api.CommonContractStatusEnum.CONTRACTSTATUSCANCELED
	}

	throw `Unexpected enum value for Api.CommonContractStatusEnum: ${value}`
}

export function enumApiCommonDigitalFormatEnumFromRequest(name: string, value: any): Api.CommonDigitalFormatEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'DIGITAL_FORMAT_UNKNOWN') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATUNKNOWN
	}
	if (value === 'DIGITAL_FORMAT_TEXT') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATTEXT
	}
	if (value === 'DIGITAL_FORMAT_IMAGE') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATIMAGE
	}
	if (value === 'DIGITAL_FORMAT_VIDEO') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATVIDEO
	}
	if (value === 'DIGITAL_FORMAT_AUDIO') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATAUDIO
	}
	if (value === 'DIGITAL_FORMAT_APP') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATAPP
	}
	if (value === 'DIGITAL_FORMAT_OTHER') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATOTHER
	}

	throw `Unexpected enum value for Api.CommonDigitalFormatEnum: ${value}`
}

export function enumApiCommonDigitalFormatEnumToResponse(name: string, value: Api.CommonDigitalFormatEnum): Api.CommonDigitalFormatEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'DIGITAL_FORMAT_UNKNOWN') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATUNKNOWN
	}
	if (value === 'DIGITAL_FORMAT_TEXT') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATTEXT
	}
	if (value === 'DIGITAL_FORMAT_IMAGE') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATIMAGE
	}
	if (value === 'DIGITAL_FORMAT_VIDEO') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATVIDEO
	}
	if (value === 'DIGITAL_FORMAT_AUDIO') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATAUDIO
	}
	if (value === 'DIGITAL_FORMAT_APP') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATAPP
	}
	if (value === 'DIGITAL_FORMAT_OTHER') {
		return Api.CommonDigitalFormatEnum.DIGITALFORMATOTHER
	}

	throw `Unexpected enum value for Api.CommonDigitalFormatEnum: ${value}`
}

export function enumApiCommonLanguageCodeEnumFromRequest(name: string, value: any): Api.CommonLanguageCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'LANGUAGE_CODE_UNKNOWN') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEUNKNOWN
	}
	if (value === 'LANGUAGE_CODE_ZH_CH') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEZHCH
	}
	if (value === 'LANGUAGE_CODE_EN_US') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEENUS
	}

	throw `Unexpected enum value for Api.CommonLanguageCodeEnum: ${value}`
}

export function enumApiCommonLanguageCodeEnumToResponse(name: string, value: Api.CommonLanguageCodeEnum): Api.CommonLanguageCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'LANGUAGE_CODE_UNKNOWN') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEUNKNOWN
	}
	if (value === 'LANGUAGE_CODE_ZH_CH') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEZHCH
	}
	if (value === 'LANGUAGE_CODE_EN_US') {
		return Api.CommonLanguageCodeEnum.LANGUAGECODEENUS
	}

	throw `Unexpected enum value for Api.CommonLanguageCodeEnum: ${value}`
}

const ApiCommonMessageHeaderKeys: string[] = ['did', 'authType', 'authContent', 'nonce', 'timestamp', 'version']

function modelApiCommonMessageHeaderFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonMessageHeader {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonMessageHeaderKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonMessageHeader = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'authType': allowUndefined(enumApiCommonAuthenticateTypeEnumFromRequest)(`${name}.authType`, value['authType']),
		'authContent': allowUndefined(stringFromRequest)(`${name}.authContent`, value['authContent']),
		'nonce': allowUndefined(stringFromRequest)(`${name}.nonce`, value['nonce']),
		'timestamp': allowUndefined(stringFromRequest)(`${name}.timestamp`, value['timestamp']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
	}

	return result
}

function modelApiCommonMessageHeaderToResponseContent(name: string, value: Api.CommonMessageHeader, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonMessageHeader> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonMessageHeaderKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonMessageHeader> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'authType': allowUndefined(enumApiCommonAuthenticateTypeEnumToResponse)(`${name}.authType`, value['authType']),
		'authContent': allowUndefined(stringToResponse)(`${name}.authContent`, value['authContent']),
		'nonce': allowUndefined(stringToResponse)(`${name}.nonce`, value['nonce']),
		'timestamp': allowUndefined(stringToResponse)(`${name}.timestamp`, value['timestamp']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
	}

	return result
}

export function modelApiCommonMessageHeaderFromRequest(name: string, value: any): Api.CommonMessageHeader {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonMessageHeader = modelApiCommonMessageHeaderFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonMessageHeader: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonMessageHeaderToResponse(name: string, value: Api.CommonMessageHeader): ToResponse<Api.CommonMessageHeader> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonMessageHeader> = modelApiCommonMessageHeaderToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonMessageHeader: ${key}`
			}
		}
	}

	return result
}

const ApiCommonRequestPageKeys: string[] = ['page', 'pageSize']

function modelApiCommonRequestPageFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonRequestPage {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonRequestPageKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonRequestPage = {
		'page': allowUndefined(integerFromRequest)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiCommonRequestPageToResponseContent(name: string, value: Api.CommonRequestPage, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonRequestPage> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonRequestPageKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonRequestPage> = {
		'page': allowUndefined(integerToResponse)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiCommonRequestPageFromRequest(name: string, value: any): Api.CommonRequestPage {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonRequestPage = modelApiCommonRequestPageFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonRequestPage: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonRequestPageToResponse(name: string, value: Api.CommonRequestPage): ToResponse<Api.CommonRequestPage> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonRequestPage> = modelApiCommonRequestPageToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonRequestPage: ${key}`
			}
		}
	}

	return result
}

export function enumApiCommonResponseCodeEnumFromRequest(name: string, value: any): Api.CommonResponseCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'RESPONSE_CODE_UNKNOWN') {
		return Api.CommonResponseCodeEnum.RESPONSECODEUNKNOWN
	}
	if (value === 'OK') {
		return Api.CommonResponseCodeEnum.OK
	}
	if (value === 'INVALID_ARGUMENT') {
		return Api.CommonResponseCodeEnum.INVALIDARGUMENT
	}
	if (value === 'UNAUTHENTICATED') {
		return Api.CommonResponseCodeEnum.UNAUTHENTICATED
	}
	if (value === 'PERMISSION_DENIED') {
		return Api.CommonResponseCodeEnum.PERMISSIONDENIED
	}
	if (value === 'NOT_FOUND') {
		return Api.CommonResponseCodeEnum.NOTFOUND
	}
	if (value === 'ALREADY_EXISTS') {
		return Api.CommonResponseCodeEnum.ALREADYEXISTS
	}
	if (value === 'LIMIT_EXCEEDED') {
		return Api.CommonResponseCodeEnum.LIMITEXCEEDED
	}
	if (value === 'UNAVAILABLE') {
		return Api.CommonResponseCodeEnum.UNAVAILABLE
	}
	if (value === 'UNKNOWN_ERROR') {
		return Api.CommonResponseCodeEnum.UNKNOWNERROR
	}
	if (value === 'NETWORK_ERROR') {
		return Api.CommonResponseCodeEnum.NETWORKERROR
	}
	if (value === 'INVALID_CERT') {
		return Api.CommonResponseCodeEnum.INVALIDCERT
	}
	if (value === 'NOT_SUPPORTED') {
		return Api.CommonResponseCodeEnum.NOTSUPPORTED
	}
	if (value === 'DATA_CORRUPTED') {
		return Api.CommonResponseCodeEnum.DATACORRUPTED
	}

	throw `Unexpected enum value for Api.CommonResponseCodeEnum: ${value}`
}

export function enumApiCommonResponseCodeEnumToResponse(name: string, value: Api.CommonResponseCodeEnum): Api.CommonResponseCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'RESPONSE_CODE_UNKNOWN') {
		return Api.CommonResponseCodeEnum.RESPONSECODEUNKNOWN
	}
	if (value === 'OK') {
		return Api.CommonResponseCodeEnum.OK
	}
	if (value === 'INVALID_ARGUMENT') {
		return Api.CommonResponseCodeEnum.INVALIDARGUMENT
	}
	if (value === 'UNAUTHENTICATED') {
		return Api.CommonResponseCodeEnum.UNAUTHENTICATED
	}
	if (value === 'PERMISSION_DENIED') {
		return Api.CommonResponseCodeEnum.PERMISSIONDENIED
	}
	if (value === 'NOT_FOUND') {
		return Api.CommonResponseCodeEnum.NOTFOUND
	}
	if (value === 'ALREADY_EXISTS') {
		return Api.CommonResponseCodeEnum.ALREADYEXISTS
	}
	if (value === 'LIMIT_EXCEEDED') {
		return Api.CommonResponseCodeEnum.LIMITEXCEEDED
	}
	if (value === 'UNAVAILABLE') {
		return Api.CommonResponseCodeEnum.UNAVAILABLE
	}
	if (value === 'UNKNOWN_ERROR') {
		return Api.CommonResponseCodeEnum.UNKNOWNERROR
	}
	if (value === 'NETWORK_ERROR') {
		return Api.CommonResponseCodeEnum.NETWORKERROR
	}
	if (value === 'INVALID_CERT') {
		return Api.CommonResponseCodeEnum.INVALIDCERT
	}
	if (value === 'NOT_SUPPORTED') {
		return Api.CommonResponseCodeEnum.NOTSUPPORTED
	}
	if (value === 'DATA_CORRUPTED') {
		return Api.CommonResponseCodeEnum.DATACORRUPTED
	}

	throw `Unexpected enum value for Api.CommonResponseCodeEnum: ${value}`
}

const ApiCommonResponsePageKeys: string[] = ['total', 'page', 'pageSize']

function modelApiCommonResponsePageFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonResponsePage {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonResponsePageKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonResponsePage = {
		'total': allowUndefined(integerFromRequest)(`${name}.total`, value['total']),
		'page': allowUndefined(integerFromRequest)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiCommonResponsePageToResponseContent(name: string, value: Api.CommonResponsePage, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonResponsePage> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonResponsePageKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonResponsePage> = {
		'total': allowUndefined(integerToResponse)(`${name}.total`, value['total']),
		'page': allowUndefined(integerToResponse)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiCommonResponsePageFromRequest(name: string, value: any): Api.CommonResponsePage {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonResponsePage = modelApiCommonResponsePageFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonResponsePage: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonResponsePageToResponse(name: string, value: Api.CommonResponsePage): ToResponse<Api.CommonResponsePage> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonResponsePage> = modelApiCommonResponsePageToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonResponsePage: ${key}`
			}
		}
	}

	return result
}

const ApiCommonResponseStatusKeys: string[] = ['code', 'message']

function modelApiCommonResponseStatusFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonResponseStatus {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonResponseStatusKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonResponseStatus = {
		'code': allowUndefined(enumApiCommonResponseCodeEnumFromRequest)(`${name}.code`, value['code']),
		'message': allowUndefined(stringFromRequest)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCommonResponseStatusToResponseContent(name: string, value: Api.CommonResponseStatus, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonResponseStatus> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonResponseStatusKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonResponseStatus> = {
		'code': allowUndefined(enumApiCommonResponseCodeEnumToResponse)(`${name}.code`, value['code']),
		'message': allowUndefined(stringToResponse)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCommonResponseStatusFromRequest(name: string, value: any): Api.CommonResponseStatus {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonResponseStatus = modelApiCommonResponseStatusFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonResponseStatus: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonResponseStatusToResponse(name: string, value: Api.CommonResponseStatus): ToResponse<Api.CommonResponseStatus> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonResponseStatus> = modelApiCommonResponseStatusToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonResponseStatus: ${key}`
			}
		}
	}

	return result
}

export function enumApiCommonServiceCodeEnumFromRequest(name: string, value: any): Api.CommonServiceCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SERVICE_CODE_UNKNOWN') {
		return Api.CommonServiceCodeEnum.SERVICECODEUNKNOWN
	}
	if (value === 'SERVICE_CODE_NODE') {
		return Api.CommonServiceCodeEnum.SERVICECODENODE
	}
	if (value === 'SERVICE_CODE_WAREHOUSE') {
		return Api.CommonServiceCodeEnum.SERVICECODEWAREHOUSE
	}
	if (value === 'SERVICE_CODE_AGENT') {
		return Api.CommonServiceCodeEnum.SERVICECODEAGENT
	}
	if (value === 'SERVICE_CODE_MCP') {
		return Api.CommonServiceCodeEnum.SERVICECODEMCP
	}
	if (value === 'SERVICE_CODE_RAG') {
		return Api.CommonServiceCodeEnum.SERVICECODERAG
	}
	if (value === 'SERVICE_CODE_CORRECTION') {
		return Api.CommonServiceCodeEnum.SERVICECODECORRECTION
	}

	throw `Unexpected enum value for Api.CommonServiceCodeEnum: ${value}`
}

export function enumApiCommonServiceCodeEnumToResponse(name: string, value: Api.CommonServiceCodeEnum): Api.CommonServiceCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SERVICE_CODE_UNKNOWN') {
		return Api.CommonServiceCodeEnum.SERVICECODEUNKNOWN
	}
	if (value === 'SERVICE_CODE_NODE') {
		return Api.CommonServiceCodeEnum.SERVICECODENODE
	}
	if (value === 'SERVICE_CODE_WAREHOUSE') {
		return Api.CommonServiceCodeEnum.SERVICECODEWAREHOUSE
	}
	if (value === 'SERVICE_CODE_AGENT') {
		return Api.CommonServiceCodeEnum.SERVICECODEAGENT
	}
	if (value === 'SERVICE_CODE_MCP') {
		return Api.CommonServiceCodeEnum.SERVICECODEMCP
	}
	if (value === 'SERVICE_CODE_RAG') {
		return Api.CommonServiceCodeEnum.SERVICECODERAG
	}
	if (value === 'SERVICE_CODE_CORRECTION') {
		return Api.CommonServiceCodeEnum.SERVICECODECORRECTION
	}

	throw `Unexpected enum value for Api.CommonServiceCodeEnum: ${value}`
}

const ApiCommonServiceMetadataKeys: string[] = ['owner', 'network', 'address', 'did', 'version', 'name', 'description', 'code', 'apiCodes', 'proxy', 'grpc', 'avatar', 'createdAt', 'updatedAt', 'signature', 'codePackagePath', 'ownerName']

function modelApiCommonServiceMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CommonServiceMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonServiceMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CommonServiceMetadata = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'network': allowUndefined(stringFromRequest)(`${name}.network`, value['network']),
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'code': allowUndefined(enumApiCommonServiceCodeEnumFromRequest)(`${name}.code`, value['code']),
		'apiCodes': allowUndefined(arrayFromRequest(enumApiCommonApiCodeEnumFromRequest))(`${name}.apiCodes`, value['apiCodes']),
		'proxy': allowUndefined(stringFromRequest)(`${name}.proxy`, value['proxy']),
		'grpc': allowUndefined(stringFromRequest)(`${name}.grpc`, value['grpc']),
		'avatar': allowUndefined(stringFromRequest)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
		'codePackagePath': allowUndefined(stringFromRequest)(`${name}.codePackagePath`, value['codePackagePath']),
		'ownerName': allowUndefined(stringFromRequest)(`${name}.ownerName`, value['ownerName']),
	}

	return result
}

function modelApiCommonServiceMetadataToResponseContent(name: string, value: Api.CommonServiceMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CommonServiceMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCommonServiceMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CommonServiceMetadata> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'network': allowUndefined(stringToResponse)(`${name}.network`, value['network']),
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'code': allowUndefined(enumApiCommonServiceCodeEnumToResponse)(`${name}.code`, value['code']),
		'apiCodes': allowUndefined(arrayToResponse(enumApiCommonApiCodeEnumToResponse))(`${name}.apiCodes`, value['apiCodes']),
		'proxy': allowUndefined(stringToResponse)(`${name}.proxy`, value['proxy']),
		'grpc': allowUndefined(stringToResponse)(`${name}.grpc`, value['grpc']),
		'avatar': allowUndefined(stringToResponse)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
		'codePackagePath': allowUndefined(stringToResponse)(`${name}.codePackagePath`, value['codePackagePath']),
		'ownerName': allowUndefined(stringToResponse)(`${name}.ownerName`, value['ownerName']),
	}

	return result
}

export function modelApiCommonServiceMetadataFromRequest(name: string, value: any): Api.CommonServiceMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CommonServiceMetadata = modelApiCommonServiceMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonServiceMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCommonServiceMetadataToResponse(name: string, value: Api.CommonServiceMetadata): ToResponse<Api.CommonServiceMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CommonServiceMetadata> = modelApiCommonServiceMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CommonServiceMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiConfigConfigMetadataKeys: string[] = ['owner', 'key', 'value', 'createdAt', 'updatedAt', 'signature']

function modelApiConfigConfigMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigConfigMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigConfigMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigConfigMetadata = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'key': allowUndefined(stringFromRequest)(`${name}.key`, value['key']),
		'value': allowUndefined(stringFromRequest)(`${name}.value`, value['value']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiConfigConfigMetadataToResponseContent(name: string, value: Api.ConfigConfigMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigConfigMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigConfigMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigConfigMetadata> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'key': allowUndefined(stringToResponse)(`${name}.key`, value['key']),
		'value': allowUndefined(stringToResponse)(`${name}.value`, value['value']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiConfigConfigMetadataFromRequest(name: string, value: any): Api.ConfigConfigMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigConfigMetadata = modelApiConfigConfigMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigConfigMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigConfigMetadataToResponse(name: string, value: Api.ConfigConfigMetadata): ToResponse<Api.ConfigConfigMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigConfigMetadata> = modelApiConfigConfigMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigConfigMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiConfigConfigTypeEnumFromRequest(name: string, value: any): Api.ConfigConfigTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONFIG_TYPE_UNKNOWN') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPEUNKNOWN
	}
	if (value === 'CONFIG_TYPE_SYSTEM') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPESYSTEM
	}
	if (value === 'CONFIG_TYPE_USER') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPEUSER
	}

	throw `Unexpected enum value for Api.ConfigConfigTypeEnum: ${value}`
}

export function enumApiConfigConfigTypeEnumToResponse(name: string, value: Api.ConfigConfigTypeEnum): Api.ConfigConfigTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONFIG_TYPE_UNKNOWN') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPEUNKNOWN
	}
	if (value === 'CONFIG_TYPE_SYSTEM') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPESYSTEM
	}
	if (value === 'CONFIG_TYPE_USER') {
		return Api.ConfigConfigTypeEnum.CONFIGTYPEUSER
	}

	throw `Unexpected enum value for Api.ConfigConfigTypeEnum: ${value}`
}

const ApiConfigGetConfigRequestKeys: string[] = ['header', 'body']

function modelApiConfigGetConfigRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigGetConfigRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigGetConfigRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigGetConfigRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiConfigGetConfigRequestToResponseContent(name: string, value: Api.ConfigGetConfigRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigGetConfigRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigGetConfigRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigGetConfigRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiConfigGetConfigRequestFromRequest(name: string, value: any): Api.ConfigGetConfigRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigGetConfigRequest = modelApiConfigGetConfigRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigGetConfigRequestToResponse(name: string, value: Api.ConfigGetConfigRequest): ToResponse<Api.ConfigGetConfigRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigGetConfigRequest> = modelApiConfigGetConfigRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigRequest: ${key}`
			}
		}
	}

	return result
}

const ApiConfigGetConfigRequestBodyKeys: string[] = ['key', 'type']

function modelApiConfigGetConfigRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigGetConfigRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigGetConfigRequestBody = {
		'key': allowUndefined(stringFromRequest)(`${name}.key`, value['key']),
		'type': allowUndefined(enumApiConfigConfigTypeEnumFromRequest)(`${name}.type`, value['type']),
	}

	return result
}

function modelApiConfigGetConfigRequestBodyToResponseContent(name: string, value: Api.ConfigGetConfigRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigGetConfigRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigGetConfigRequestBody> = {
		'key': allowUndefined(stringToResponse)(`${name}.key`, value['key']),
		'type': allowUndefined(enumApiConfigConfigTypeEnumToResponse)(`${name}.type`, value['type']),
	}

	return result
}

export function modelApiConfigGetConfigRequestBodyFromRequest(name: string, value: any): Api.ConfigGetConfigRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigGetConfigRequestBody = modelApiConfigGetConfigRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigGetConfigRequestBodyToResponse(name: string, value: Api.ConfigGetConfigRequestBody): ToResponse<Api.ConfigGetConfigRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigGetConfigRequestBody> = modelApiConfigGetConfigRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiConfigGetConfigResponseKeys: string[] = ['header', 'body']

function modelApiConfigGetConfigResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigGetConfigResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigGetConfigResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigGetConfigResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiConfigGetConfigResponseToResponseContent(name: string, value: Api.ConfigGetConfigResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigGetConfigResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigGetConfigResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigGetConfigResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiConfigGetConfigResponseFromRequest(name: string, value: any): Api.ConfigGetConfigResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigGetConfigResponse = modelApiConfigGetConfigResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigGetConfigResponseToResponse(name: string, value: Api.ConfigGetConfigResponse): ToResponse<Api.ConfigGetConfigResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigGetConfigResponse> = modelApiConfigGetConfigResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigResponse: ${key}`
			}
		}
	}

	return result
}

const ApiConfigGetConfigResponseBodyKeys: string[] = ['status', 'config']

function modelApiConfigGetConfigResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigGetConfigResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigGetConfigResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'config': allowUndefined(modelApiConfigConfigMetadataFromRequest)(`${name}.config`, value['config']),
	}

	return result
}

function modelApiConfigGetConfigResponseBodyToResponseContent(name: string, value: Api.ConfigGetConfigResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigGetConfigResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigGetConfigResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigGetConfigResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'config': allowUndefined(modelApiConfigConfigMetadataToResponse)(`${name}.config`, value['config']),
	}

	return result
}

export function modelApiConfigGetConfigResponseBodyFromRequest(name: string, value: any): Api.ConfigGetConfigResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigGetConfigResponseBody = modelApiConfigGetConfigResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigGetConfigResponseBodyToResponse(name: string, value: Api.ConfigGetConfigResponseBody): ToResponse<Api.ConfigGetConfigResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigGetConfigResponseBody> = modelApiConfigGetConfigResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigGetConfigResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiConfigSetConfigRequestKeys: string[] = ['header', 'body']

function modelApiConfigSetConfigRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigSetConfigRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigSetConfigRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigSetConfigRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiConfigSetConfigRequestToResponseContent(name: string, value: Api.ConfigSetConfigRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigSetConfigRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigSetConfigRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigSetConfigRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiConfigSetConfigRequestFromRequest(name: string, value: any): Api.ConfigSetConfigRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigSetConfigRequest = modelApiConfigSetConfigRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigSetConfigRequestToResponse(name: string, value: Api.ConfigSetConfigRequest): ToResponse<Api.ConfigSetConfigRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigSetConfigRequest> = modelApiConfigSetConfigRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigRequest: ${key}`
			}
		}
	}

	return result
}

const ApiConfigSetConfigRequestBodyKeys: string[] = ['config']

function modelApiConfigSetConfigRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigSetConfigRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigSetConfigRequestBody = {
		'config': allowUndefined(modelApiConfigConfigMetadataFromRequest)(`${name}.config`, value['config']),
	}

	return result
}

function modelApiConfigSetConfigRequestBodyToResponseContent(name: string, value: Api.ConfigSetConfigRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigSetConfigRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigSetConfigRequestBody> = {
		'config': allowUndefined(modelApiConfigConfigMetadataToResponse)(`${name}.config`, value['config']),
	}

	return result
}

export function modelApiConfigSetConfigRequestBodyFromRequest(name: string, value: any): Api.ConfigSetConfigRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigSetConfigRequestBody = modelApiConfigSetConfigRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigSetConfigRequestBodyToResponse(name: string, value: Api.ConfigSetConfigRequestBody): ToResponse<Api.ConfigSetConfigRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigSetConfigRequestBody> = modelApiConfigSetConfigRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiConfigSetConfigResponseKeys: string[] = ['header', 'body']

function modelApiConfigSetConfigResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigSetConfigResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigSetConfigResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigSetConfigResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiConfigSetConfigResponseToResponseContent(name: string, value: Api.ConfigSetConfigResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigSetConfigResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigSetConfigResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiConfigSetConfigResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiConfigSetConfigResponseFromRequest(name: string, value: any): Api.ConfigSetConfigResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigSetConfigResponse = modelApiConfigSetConfigResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigSetConfigResponseToResponse(name: string, value: Api.ConfigSetConfigResponse): ToResponse<Api.ConfigSetConfigResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigSetConfigResponse> = modelApiConfigSetConfigResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigResponse: ${key}`
			}
		}
	}

	return result
}

const ApiConfigSetConfigResponseBodyKeys: string[] = ['status', 'config']

function modelApiConfigSetConfigResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ConfigSetConfigResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ConfigSetConfigResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'config': allowUndefined(modelApiConfigConfigMetadataFromRequest)(`${name}.config`, value['config']),
	}

	return result
}

function modelApiConfigSetConfigResponseBodyToResponseContent(name: string, value: Api.ConfigSetConfigResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ConfigSetConfigResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiConfigSetConfigResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ConfigSetConfigResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'config': allowUndefined(modelApiConfigConfigMetadataToResponse)(`${name}.config`, value['config']),
	}

	return result
}

export function modelApiConfigSetConfigResponseBodyFromRequest(name: string, value: any): Api.ConfigSetConfigResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ConfigSetConfigResponseBody = modelApiConfigSetConfigResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiConfigSetConfigResponseBodyToResponse(name: string, value: Api.ConfigSetConfigResponseBody): ToResponse<Api.ConfigSetConfigResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ConfigSetConfigResponseBody> = modelApiConfigSetConfigResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ConfigSetConfigResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiContentAppendMetadataKeys: string[] = ['hash', 'subscriber', 'content']

function modelApiContentAppendMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContentAppendMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContentAppendMetadata = {
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'subscriber': allowUndefined(stringFromRequest)(`${name}.subscriber`, value['subscriber']),
		'content': allowUndefined(stringFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiContentAppendMetadataToResponseContent(name: string, value: Api.ContentAppendMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContentAppendMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContentAppendMetadata> = {
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'subscriber': allowUndefined(stringToResponse)(`${name}.subscriber`, value['subscriber']),
		'content': allowUndefined(stringToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiContentAppendMetadataFromRequest(name: string, value: any): Api.ContentAppendMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContentAppendMetadata = modelApiContentAppendMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiContentAppendMetadataToResponse(name: string, value: Api.ContentAppendMetadata): ToResponse<Api.ContentAppendMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContentAppendMetadata> = modelApiContentAppendMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiContentAppendRequestKeys: string[] = ['appendMetadata']

function modelApiContentAppendRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContentAppendRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContentAppendRequest = {
		'appendMetadata': allowUndefined(arrayFromRequest(modelApiContentAppendMetadataFromRequest))(`${name}.appendMetadata`, value['appendMetadata']),
	}

	return result
}

function modelApiContentAppendRequestToResponseContent(name: string, value: Api.ContentAppendRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContentAppendRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContentAppendRequest> = {
		'appendMetadata': allowUndefined(arrayToResponse(modelApiContentAppendMetadataToResponse))(`${name}.appendMetadata`, value['appendMetadata']),
	}

	return result
}

export function modelApiContentAppendRequestFromRequest(name: string, value: any): Api.ContentAppendRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContentAppendRequest = modelApiContentAppendRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContentAppendRequestToResponse(name: string, value: Api.ContentAppendRequest): ToResponse<Api.ContentAppendRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContentAppendRequest> = modelApiContentAppendRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContentAppendResponseKeys: string[] = ['status']

function modelApiContentAppendResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContentAppendResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContentAppendResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiContentAppendResponseToResponseContent(name: string, value: Api.ContentAppendResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContentAppendResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentAppendResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContentAppendResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiContentAppendResponseFromRequest(name: string, value: any): Api.ContentAppendResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContentAppendResponse = modelApiContentAppendResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContentAppendResponseToResponse(name: string, value: Api.ContentAppendResponse): ToResponse<Api.ContentAppendResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContentAppendResponse> = modelApiContentAppendResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentAppendResponse: ${key}`
			}
		}
	}

	return result
}

const ApiContentValidateRequestKeys: string[] = ['header']

function modelApiContentValidateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContentValidateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentValidateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContentValidateRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiContentValidateRequestToResponseContent(name: string, value: Api.ContentValidateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContentValidateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentValidateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContentValidateRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiContentValidateRequestFromRequest(name: string, value: any): Api.ContentValidateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContentValidateRequest = modelApiContentValidateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentValidateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContentValidateRequestToResponse(name: string, value: Api.ContentValidateRequest): ToResponse<Api.ContentValidateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContentValidateRequest> = modelApiContentValidateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentValidateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContentValidateResponseKeys: string[] = ['header']

function modelApiContentValidateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContentValidateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentValidateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContentValidateResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiContentValidateResponseToResponseContent(name: string, value: Api.ContentValidateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContentValidateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContentValidateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContentValidateResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiContentValidateResponseFromRequest(name: string, value: any): Api.ContentValidateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContentValidateResponse = modelApiContentValidateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentValidateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContentValidateResponseToResponse(name: string, value: Api.ContentValidateResponse): ToResponse<Api.ContentValidateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContentValidateResponse> = modelApiContentValidateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContentValidateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiContractBalanceRequestKeys: string[] = ['address']

function modelApiContractBalanceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractBalanceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractBalanceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractBalanceRequest = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
	}

	return result
}

function modelApiContractBalanceRequestToResponseContent(name: string, value: Api.ContractBalanceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractBalanceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractBalanceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractBalanceRequest> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
	}

	return result
}

export function modelApiContractBalanceRequestFromRequest(name: string, value: any): Api.ContractBalanceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractBalanceRequest = modelApiContractBalanceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractBalanceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractBalanceRequestToResponse(name: string, value: Api.ContractBalanceRequest): ToResponse<Api.ContractBalanceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractBalanceRequest> = modelApiContractBalanceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractBalanceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContractBalanceResponseKeys: string[] = ['total', 'available']

function modelApiContractBalanceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractBalanceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractBalanceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractBalanceResponse = {
		'total': allowUndefined(stringFromRequest)(`${name}.total`, value['total']),
		'available': allowUndefined(stringFromRequest)(`${name}.available`, value['available']),
	}

	return result
}

function modelApiContractBalanceResponseToResponseContent(name: string, value: Api.ContractBalanceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractBalanceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractBalanceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractBalanceResponse> = {
		'total': allowUndefined(stringToResponse)(`${name}.total`, value['total']),
		'available': allowUndefined(stringToResponse)(`${name}.available`, value['available']),
	}

	return result
}

export function modelApiContractBalanceResponseFromRequest(name: string, value: any): Api.ContractBalanceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractBalanceResponse = modelApiContractBalanceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractBalanceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractBalanceResponseToResponse(name: string, value: Api.ContractBalanceResponse): ToResponse<Api.ContractBalanceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractBalanceResponse> = modelApiContractBalanceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractBalanceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiContractCreateAddressRequestKeys: string[] = []

function modelApiContractCreateAddressRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractCreateAddressRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractCreateAddressRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractCreateAddressRequest = {
	}

	return result
}

function modelApiContractCreateAddressRequestToResponseContent(name: string, value: Api.ContractCreateAddressRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractCreateAddressRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractCreateAddressRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractCreateAddressRequest> = {
	}

	return result
}

export function modelApiContractCreateAddressRequestFromRequest(name: string, value: any): Api.ContractCreateAddressRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractCreateAddressRequest = modelApiContractCreateAddressRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractCreateAddressRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractCreateAddressRequestToResponse(name: string, value: Api.ContractCreateAddressRequest): ToResponse<Api.ContractCreateAddressRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractCreateAddressRequest> = modelApiContractCreateAddressRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractCreateAddressRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContractCreateAddressResponseKeys: string[] = ['address']

function modelApiContractCreateAddressResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractCreateAddressResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractCreateAddressResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractCreateAddressResponse = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
	}

	return result
}

function modelApiContractCreateAddressResponseToResponseContent(name: string, value: Api.ContractCreateAddressResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractCreateAddressResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractCreateAddressResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractCreateAddressResponse> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
	}

	return result
}

export function modelApiContractCreateAddressResponseFromRequest(name: string, value: any): Api.ContractCreateAddressResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractCreateAddressResponse = modelApiContractCreateAddressResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractCreateAddressResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractCreateAddressResponseToResponse(name: string, value: Api.ContractCreateAddressResponse): ToResponse<Api.ContractCreateAddressResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractCreateAddressResponse> = modelApiContractCreateAddressResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractCreateAddressResponse: ${key}`
			}
		}
	}

	return result
}

const ApiContractTransactionKeys: string[] = ['toAddress', 'points', 'metadata']

function modelApiContractTransactionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractTransaction {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractTransaction = {
		'toAddress': allowUndefined(stringFromRequest)(`${name}.toAddress`, value['toAddress']),
		'points': allowUndefined(integerFromRequest)(`${name}.points`, value['points']),
		'metadata': allowUndefined(stringFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiContractTransactionToResponseContent(name: string, value: Api.ContractTransaction, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractTransaction> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractTransaction> = {
		'toAddress': allowUndefined(stringToResponse)(`${name}.toAddress`, value['toAddress']),
		'points': allowUndefined(integerToResponse)(`${name}.points`, value['points']),
		'metadata': allowUndefined(stringToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiContractTransactionFromRequest(name: string, value: any): Api.ContractTransaction {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractTransaction = modelApiContractTransactionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransaction: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractTransactionToResponse(name: string, value: Api.ContractTransaction): ToResponse<Api.ContractTransaction> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractTransaction> = modelApiContractTransactionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransaction: ${key}`
			}
		}
	}

	return result
}

const ApiContractTransactionRequestKeys: string[] = ['toAddress', 'points', 'metadata']

function modelApiContractTransactionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractTransactionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractTransactionRequest = {
		'toAddress': allowUndefined(stringFromRequest)(`${name}.toAddress`, value['toAddress']),
		'points': allowUndefined(integerFromRequest)(`${name}.points`, value['points']),
		'metadata': allowUndefined(stringFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiContractTransactionRequestToResponseContent(name: string, value: Api.ContractTransactionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractTransactionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractTransactionRequest> = {
		'toAddress': allowUndefined(stringToResponse)(`${name}.toAddress`, value['toAddress']),
		'points': allowUndefined(integerToResponse)(`${name}.points`, value['points']),
		'metadata': allowUndefined(stringToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiContractTransactionRequestFromRequest(name: string, value: any): Api.ContractTransactionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractTransactionRequest = modelApiContractTransactionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransactionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractTransactionRequestToResponse(name: string, value: Api.ContractTransactionRequest): ToResponse<Api.ContractTransactionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractTransactionRequest> = modelApiContractTransactionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransactionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContractTransactionResponseKeys: string[] = ['transactionId']

function modelApiContractTransactionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractTransactionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractTransactionResponse = {
		'transactionId': allowUndefined(stringFromRequest)(`${name}.transactionId`, value['transactionId']),
	}

	return result
}

function modelApiContractTransactionResponseToResponseContent(name: string, value: Api.ContractTransactionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractTransactionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractTransactionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractTransactionResponse> = {
		'transactionId': allowUndefined(stringToResponse)(`${name}.transactionId`, value['transactionId']),
	}

	return result
}

export function modelApiContractTransactionResponseFromRequest(name: string, value: any): Api.ContractTransactionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractTransactionResponse = modelApiContractTransactionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransactionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractTransactionResponseToResponse(name: string, value: Api.ContractTransactionResponse): ToResponse<Api.ContractTransactionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractTransactionResponse> = modelApiContractTransactionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractTransactionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiContractWalletInfoRequestKeys: string[] = ['address']

function modelApiContractWalletInfoRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractWalletInfoRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractWalletInfoRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractWalletInfoRequest = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
	}

	return result
}

function modelApiContractWalletInfoRequestToResponseContent(name: string, value: Api.ContractWalletInfoRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractWalletInfoRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractWalletInfoRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractWalletInfoRequest> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
	}

	return result
}

export function modelApiContractWalletInfoRequestFromRequest(name: string, value: any): Api.ContractWalletInfoRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractWalletInfoRequest = modelApiContractWalletInfoRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractWalletInfoRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractWalletInfoRequestToResponse(name: string, value: Api.ContractWalletInfoRequest): ToResponse<Api.ContractWalletInfoRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractWalletInfoRequest> = modelApiContractWalletInfoRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractWalletInfoRequest: ${key}`
			}
		}
	}

	return result
}

const ApiContractWalletInfoResponseKeys: string[] = ['total', 'available', 'transactions']

function modelApiContractWalletInfoResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ContractWalletInfoResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractWalletInfoResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ContractWalletInfoResponse = {
		'total': allowUndefined(stringFromRequest)(`${name}.total`, value['total']),
		'available': allowUndefined(stringFromRequest)(`${name}.available`, value['available']),
		'transactions': allowUndefined(arrayFromRequest(modelApiContractTransactionFromRequest))(`${name}.transactions`, value['transactions']),
	}

	return result
}

function modelApiContractWalletInfoResponseToResponseContent(name: string, value: Api.ContractWalletInfoResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ContractWalletInfoResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiContractWalletInfoResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ContractWalletInfoResponse> = {
		'total': allowUndefined(stringToResponse)(`${name}.total`, value['total']),
		'available': allowUndefined(stringToResponse)(`${name}.available`, value['available']),
		'transactions': allowUndefined(arrayToResponse(modelApiContractTransactionToResponse))(`${name}.transactions`, value['transactions']),
	}

	return result
}

export function modelApiContractWalletInfoResponseFromRequest(name: string, value: any): Api.ContractWalletInfoResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ContractWalletInfoResponse = modelApiContractWalletInfoResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractWalletInfoResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiContractWalletInfoResponseToResponse(name: string, value: Api.ContractWalletInfoResponse): ToResponse<Api.ContractWalletInfoResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ContractWalletInfoResponse> = modelApiContractWalletInfoResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ContractWalletInfoResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddGroupRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAddGroupRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddGroupRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddGroupRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddGroupRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddGroupRequestToResponseContent(name: string, value: Api.CorrectionAddGroupRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddGroupRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddGroupRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddGroupRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddGroupRequestFromRequest(name: string, value: any): Api.CorrectionAddGroupRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddGroupRequest = modelApiCorrectionAddGroupRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddGroupRequestToResponse(name: string, value: Api.CorrectionAddGroupRequest): ToResponse<Api.CorrectionAddGroupRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddGroupRequest> = modelApiCorrectionAddGroupRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddGroupRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionAddGroupRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddGroupRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddGroupRequestBody = {
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddGroupRequestBodyToResponseContent(name: string, value: Api.CorrectionAddGroupRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddGroupRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddGroupRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddGroupRequestBodyFromRequest(name: string, value: any): Api.CorrectionAddGroupRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddGroupRequestBody = modelApiCorrectionAddGroupRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddGroupRequestBodyToResponse(name: string, value: Api.CorrectionAddGroupRequestBody): ToResponse<Api.CorrectionAddGroupRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddGroupRequestBody> = modelApiCorrectionAddGroupRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddGroupResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAddGroupResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddGroupResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddGroupResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddGroupResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddGroupResponseToResponseContent(name: string, value: Api.CorrectionAddGroupResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddGroupResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddGroupResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddGroupResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddGroupResponseFromRequest(name: string, value: any): Api.CorrectionAddGroupResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddGroupResponse = modelApiCorrectionAddGroupResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddGroupResponseToResponse(name: string, value: Api.CorrectionAddGroupResponse): ToResponse<Api.CorrectionAddGroupResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddGroupResponse> = modelApiCorrectionAddGroupResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddGroupResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionAddGroupResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddGroupResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddGroupResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddGroupResponseBodyToResponseContent(name: string, value: Api.CorrectionAddGroupResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddGroupResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddGroupResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddGroupResponseBodyFromRequest(name: string, value: any): Api.CorrectionAddGroupResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddGroupResponseBody = modelApiCorrectionAddGroupResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddGroupResponseBodyToResponse(name: string, value: Api.CorrectionAddGroupResponseBody): ToResponse<Api.CorrectionAddGroupResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddGroupResponseBody> = modelApiCorrectionAddGroupResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAddTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddTaskRequestToResponseContent(name: string, value: Api.CorrectionAddTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddTaskRequestFromRequest(name: string, value: any): Api.CorrectionAddTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskRequest = modelApiCorrectionAddTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskRequestToResponse(name: string, value: Api.CorrectionAddTaskRequest): ToResponse<Api.CorrectionAddTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskRequest> = modelApiCorrectionAddTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionAddTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskRequestBody = {
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionAddTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskRequestBody> = {
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionAddTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskRequestBody = modelApiCorrectionAddTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskRequestBodyToResponse(name: string, value: Api.CorrectionAddTaskRequestBody): ToResponse<Api.CorrectionAddTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskRequestBody> = modelApiCorrectionAddTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAddTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddTaskResponseToResponseContent(name: string, value: Api.CorrectionAddTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddTaskResponseFromRequest(name: string, value: any): Api.CorrectionAddTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskResponse = modelApiCorrectionAddTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskResponseToResponse(name: string, value: Api.CorrectionAddTaskResponse): ToResponse<Api.CorrectionAddTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskResponse> = modelApiCorrectionAddTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionAddTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionAddTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionAddTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskResponseBody = modelApiCorrectionAddTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskResponseBodyToResponse(name: string, value: Api.CorrectionAddTaskResponseBody): ToResponse<Api.CorrectionAddTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskResponseBody> = modelApiCorrectionAddTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskTagRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAddTaskTagRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskTagRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskTagRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskTagRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddTaskTagRequestToResponseContent(name: string, value: Api.CorrectionAddTaskTagRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskTagRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskTagRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskTagRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddTaskTagRequestFromRequest(name: string, value: any): Api.CorrectionAddTaskTagRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskTagRequest = modelApiCorrectionAddTaskTagRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskTagRequestToResponse(name: string, value: Api.CorrectionAddTaskTagRequest): ToResponse<Api.CorrectionAddTaskTagRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskTagRequest> = modelApiCorrectionAddTaskTagRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskTagRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionAddTaskTagRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskTagRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskTagRequestBody = {
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddTaskTagRequestBodyToResponseContent(name: string, value: Api.CorrectionAddTaskTagRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskTagRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskTagRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddTaskTagRequestBodyFromRequest(name: string, value: any): Api.CorrectionAddTaskTagRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskTagRequestBody = modelApiCorrectionAddTaskTagRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskTagRequestBodyToResponse(name: string, value: Api.CorrectionAddTaskTagRequestBody): ToResponse<Api.CorrectionAddTaskTagRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskTagRequestBody> = modelApiCorrectionAddTaskTagRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskTagResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAddTaskTagResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskTagResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskTagResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskTagResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddTaskTagResponseToResponseContent(name: string, value: Api.CorrectionAddTaskTagResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskTagResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskTagResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddTaskTagResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddTaskTagResponseFromRequest(name: string, value: any): Api.CorrectionAddTaskTagResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskTagResponse = modelApiCorrectionAddTaskTagResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskTagResponseToResponse(name: string, value: Api.CorrectionAddTaskTagResponse): ToResponse<Api.CorrectionAddTaskTagResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskTagResponse> = modelApiCorrectionAddTaskTagResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddTaskTagResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionAddTaskTagResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddTaskTagResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddTaskTagResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddTaskTagResponseBodyToResponseContent(name: string, value: Api.CorrectionAddTaskTagResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddTaskTagResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddTaskTagResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddTaskTagResponseBodyFromRequest(name: string, value: any): Api.CorrectionAddTaskTagResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddTaskTagResponseBody = modelApiCorrectionAddTaskTagResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddTaskTagResponseBodyToResponse(name: string, value: Api.CorrectionAddTaskTagResponseBody): ToResponse<Api.CorrectionAddTaskTagResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddTaskTagResponseBody> = modelApiCorrectionAddTaskTagResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddWarehouseRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAddWarehouseRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddWarehouseRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddWarehouseRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddWarehouseRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddWarehouseRequestToResponseContent(name: string, value: Api.CorrectionAddWarehouseRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddWarehouseRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddWarehouseRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddWarehouseRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddWarehouseRequestFromRequest(name: string, value: any): Api.CorrectionAddWarehouseRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddWarehouseRequest = modelApiCorrectionAddWarehouseRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddWarehouseRequestToResponse(name: string, value: Api.CorrectionAddWarehouseRequest): ToResponse<Api.CorrectionAddWarehouseRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddWarehouseRequest> = modelApiCorrectionAddWarehouseRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddWarehouseRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionAddWarehouseRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddWarehouseRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddWarehouseRequestBody = {
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddWarehouseRequestBodyToResponseContent(name: string, value: Api.CorrectionAddWarehouseRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddWarehouseRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddWarehouseRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddWarehouseRequestBodyFromRequest(name: string, value: any): Api.CorrectionAddWarehouseRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddWarehouseRequestBody = modelApiCorrectionAddWarehouseRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddWarehouseRequestBodyToResponse(name: string, value: Api.CorrectionAddWarehouseRequestBody): ToResponse<Api.CorrectionAddWarehouseRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddWarehouseRequestBody> = modelApiCorrectionAddWarehouseRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddWarehouseResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAddWarehouseResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddWarehouseResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddWarehouseResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddWarehouseResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAddWarehouseResponseToResponseContent(name: string, value: Api.CorrectionAddWarehouseResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddWarehouseResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddWarehouseResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAddWarehouseResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAddWarehouseResponseFromRequest(name: string, value: any): Api.CorrectionAddWarehouseResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddWarehouseResponse = modelApiCorrectionAddWarehouseResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddWarehouseResponseToResponse(name: string, value: Api.CorrectionAddWarehouseResponse): ToResponse<Api.CorrectionAddWarehouseResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddWarehouseResponse> = modelApiCorrectionAddWarehouseResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAddWarehouseResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionAddWarehouseResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAddWarehouseResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAddWarehouseResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionAddWarehouseResponseBodyToResponseContent(name: string, value: Api.CorrectionAddWarehouseResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAddWarehouseResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAddWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAddWarehouseResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionAddWarehouseResponseBodyFromRequest(name: string, value: any): Api.CorrectionAddWarehouseResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAddWarehouseResponseBody = modelApiCorrectionAddWarehouseResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAddWarehouseResponseBodyToResponse(name: string, value: Api.CorrectionAddWarehouseResponseBody): ToResponse<Api.CorrectionAddWarehouseResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAddWarehouseResponseBody> = modelApiCorrectionAddWarehouseResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAddWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveAddRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveAddRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveAddRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveAddRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveAddRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveAddRequestToResponseContent(name: string, value: Api.CorrectionArchiveAddRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveAddRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveAddRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveAddRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveAddRequestFromRequest(name: string, value: any): Api.CorrectionArchiveAddRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveAddRequest = modelApiCorrectionArchiveAddRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveAddRequestToResponse(name: string, value: Api.CorrectionArchiveAddRequest): ToResponse<Api.CorrectionArchiveAddRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveAddRequest> = modelApiCorrectionArchiveAddRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveAddRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionArchiveAddRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveAddRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveAddRequestBody = {
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveAddRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveAddRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveAddRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveAddRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveAddRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveAddRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveAddRequestBody = modelApiCorrectionArchiveAddRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveAddRequestBodyToResponse(name: string, value: Api.CorrectionArchiveAddRequestBody): ToResponse<Api.CorrectionArchiveAddRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveAddRequestBody> = modelApiCorrectionArchiveAddRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveAddResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveAddResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveAddResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveAddResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveAddResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveAddResponseToResponseContent(name: string, value: Api.CorrectionArchiveAddResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveAddResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveAddResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveAddResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveAddResponseFromRequest(name: string, value: any): Api.CorrectionArchiveAddResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveAddResponse = modelApiCorrectionArchiveAddResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveAddResponseToResponse(name: string, value: Api.CorrectionArchiveAddResponse): ToResponse<Api.CorrectionArchiveAddResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveAddResponse> = modelApiCorrectionArchiveAddResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveAddResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionArchiveAddResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveAddResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveAddResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveAddResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveAddResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveAddResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveAddResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveAddResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveAddResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveAddResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveAddResponseBody = modelApiCorrectionArchiveAddResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveAddResponseBodyToResponse(name: string, value: Api.CorrectionArchiveAddResponseBody): ToResponse<Api.CorrectionArchiveAddResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveAddResponseBody> = modelApiCorrectionArchiveAddResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveAddResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDeleteRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDeleteRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDeleteRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDeleteRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDeleteRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDeleteRequestToResponseContent(name: string, value: Api.CorrectionArchiveDeleteRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDeleteRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDeleteRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDeleteRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDeleteRequestFromRequest(name: string, value: any): Api.CorrectionArchiveDeleteRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDeleteRequest = modelApiCorrectionArchiveDeleteRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDeleteRequestToResponse(name: string, value: Api.CorrectionArchiveDeleteRequest): ToResponse<Api.CorrectionArchiveDeleteRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDeleteRequest> = modelApiCorrectionArchiveDeleteRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDeleteRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionArchiveDeleteRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDeleteRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDeleteRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionArchiveDeleteRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveDeleteRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDeleteRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDeleteRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionArchiveDeleteRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDeleteRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDeleteRequestBody = modelApiCorrectionArchiveDeleteRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDeleteRequestBodyToResponse(name: string, value: Api.CorrectionArchiveDeleteRequestBody): ToResponse<Api.CorrectionArchiveDeleteRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDeleteRequestBody> = modelApiCorrectionArchiveDeleteRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDeleteResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDeleteResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDeleteResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDeleteResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDeleteResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDeleteResponseToResponseContent(name: string, value: Api.CorrectionArchiveDeleteResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDeleteResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDeleteResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDeleteResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDeleteResponseFromRequest(name: string, value: any): Api.CorrectionArchiveDeleteResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDeleteResponse = modelApiCorrectionArchiveDeleteResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDeleteResponseToResponse(name: string, value: Api.CorrectionArchiveDeleteResponse): ToResponse<Api.CorrectionArchiveDeleteResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDeleteResponse> = modelApiCorrectionArchiveDeleteResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDeleteResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionArchiveDeleteResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDeleteResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDeleteResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveDeleteResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveDeleteResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDeleteResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDeleteResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDeleteResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveDeleteResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDeleteResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDeleteResponseBody = modelApiCorrectionArchiveDeleteResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDeleteResponseBodyToResponse(name: string, value: Api.CorrectionArchiveDeleteResponseBody): ToResponse<Api.CorrectionArchiveDeleteResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDeleteResponseBody> = modelApiCorrectionArchiveDeleteResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDeleteResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDetailRequestToResponseContent(name: string, value: Api.CorrectionArchiveDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailRequestFromRequest(name: string, value: any): Api.CorrectionArchiveDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailRequest = modelApiCorrectionArchiveDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailRequestToResponse(name: string, value: Api.CorrectionArchiveDetailRequest): ToResponse<Api.CorrectionArchiveDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailRequest> = modelApiCorrectionArchiveDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionArchiveDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionArchiveDetailRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailRequestBody = modelApiCorrectionArchiveDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailRequestBodyToResponse(name: string, value: Api.CorrectionArchiveDetailRequestBody): ToResponse<Api.CorrectionArchiveDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailRequestBody> = modelApiCorrectionArchiveDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDetailResponseToResponseContent(name: string, value: Api.CorrectionArchiveDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailResponseFromRequest(name: string, value: any): Api.CorrectionArchiveDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailResponse = modelApiCorrectionArchiveDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailResponseToResponse(name: string, value: Api.CorrectionArchiveDetailResponse): ToResponse<Api.CorrectionArchiveDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailResponse> = modelApiCorrectionArchiveDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionArchiveDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveDetailResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailResponseBody = modelApiCorrectionArchiveDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailResponseBodyToResponse(name: string, value: Api.CorrectionArchiveDetailResponseBody): ToResponse<Api.CorrectionArchiveDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailResponseBody> = modelApiCorrectionArchiveDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailStudentRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDetailStudentRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailStudentRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailStudentRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailStudentRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDetailStudentRequestToResponseContent(name: string, value: Api.CorrectionArchiveDetailStudentRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailStudentRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailStudentRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailStudentRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentRequestFromRequest(name: string, value: any): Api.CorrectionArchiveDetailStudentRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailStudentRequest = modelApiCorrectionArchiveDetailStudentRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentRequestToResponse(name: string, value: Api.CorrectionArchiveDetailStudentRequest): ToResponse<Api.CorrectionArchiveDetailStudentRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailStudentRequest> = modelApiCorrectionArchiveDetailStudentRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailStudentRequestBodyKeys: string[] = ['studentDid']

function modelApiCorrectionArchiveDetailStudentRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailStudentRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailStudentRequestBody = {
		'studentDid': allowUndefined(stringFromRequest)(`${name}.studentDid`, value['studentDid']),
	}

	return result
}

function modelApiCorrectionArchiveDetailStudentRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveDetailStudentRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailStudentRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailStudentRequestBody> = {
		'studentDid': allowUndefined(stringToResponse)(`${name}.studentDid`, value['studentDid']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDetailStudentRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailStudentRequestBody = modelApiCorrectionArchiveDetailStudentRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentRequestBodyToResponse(name: string, value: Api.CorrectionArchiveDetailStudentRequestBody): ToResponse<Api.CorrectionArchiveDetailStudentRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailStudentRequestBody> = modelApiCorrectionArchiveDetailStudentRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailStudentResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveDetailStudentResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailStudentResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailStudentResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailStudentResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveDetailStudentResponseToResponseContent(name: string, value: Api.CorrectionArchiveDetailStudentResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailStudentResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailStudentResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveDetailStudentResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentResponseFromRequest(name: string, value: any): Api.CorrectionArchiveDetailStudentResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailStudentResponse = modelApiCorrectionArchiveDetailStudentResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentResponseToResponse(name: string, value: Api.CorrectionArchiveDetailStudentResponse): ToResponse<Api.CorrectionArchiveDetailStudentResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailStudentResponse> = modelApiCorrectionArchiveDetailStudentResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveDetailStudentResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionArchiveDetailStudentResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveDetailStudentResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveDetailStudentResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveDetailStudentResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveDetailStudentResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveDetailStudentResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveDetailStudentResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveDetailStudentResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveDetailStudentResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveDetailStudentResponseBody = modelApiCorrectionArchiveDetailStudentResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveDetailStudentResponseBodyToResponse(name: string, value: Api.CorrectionArchiveDetailStudentResponseBody): ToResponse<Api.CorrectionArchiveDetailStudentResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveDetailStudentResponseBody> = modelApiCorrectionArchiveDetailStudentResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveDetailStudentResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveListRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveListRequestToResponseContent(name: string, value: Api.CorrectionArchiveListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveListRequestFromRequest(name: string, value: any): Api.CorrectionArchiveListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveListRequest = modelApiCorrectionArchiveListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveListRequestToResponse(name: string, value: Api.CorrectionArchiveListRequest): ToResponse<Api.CorrectionArchiveListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveListRequest> = modelApiCorrectionArchiveListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveListRequestBodyKeys: string[] = ['teacherDid', 'name', 'page']

function modelApiCorrectionArchiveListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveListRequestBody = {
		'teacherDid': allowUndefined(stringFromRequest)(`${name}.teacherDid`, value['teacherDid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionArchiveListRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveListRequestBody> = {
		'teacherDid': allowUndefined(stringToResponse)(`${name}.teacherDid`, value['teacherDid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionArchiveListRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveListRequestBody = modelApiCorrectionArchiveListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveListRequestBodyToResponse(name: string, value: Api.CorrectionArchiveListRequestBody): ToResponse<Api.CorrectionArchiveListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveListRequestBody> = modelApiCorrectionArchiveListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveListResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveListResponseToResponseContent(name: string, value: Api.CorrectionArchiveListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveListResponseFromRequest(name: string, value: any): Api.CorrectionArchiveListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveListResponse = modelApiCorrectionArchiveListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveListResponseToResponse(name: string, value: Api.CorrectionArchiveListResponse): ToResponse<Api.CorrectionArchiveListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveListResponse> = modelApiCorrectionArchiveListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveListResponseBodyKeys: string[] = ['status', 'list', 'page']

function modelApiCorrectionArchiveListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionArchiveMetadataFromRequest))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionArchiveListResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionArchiveMetadataToResponse))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionArchiveListResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveListResponseBody = modelApiCorrectionArchiveListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveListResponseBodyToResponse(name: string, value: Api.CorrectionArchiveListResponseBody): ToResponse<Api.CorrectionArchiveListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveListResponseBody> = modelApiCorrectionArchiveListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveMetadataKeys: string[] = ['uid', 'name', 'studentDid', 'teacherDid', 'subject', 'createdAt', 'updatedAt', 'isDeleted', 'telephone', 'email', 'status']

function modelApiCorrectionArchiveMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'studentDid': allowUndefined(stringFromRequest)(`${name}.studentDid`, value['studentDid']),
		'teacherDid': allowUndefined(stringFromRequest)(`${name}.teacherDid`, value['teacherDid']),
		'subject': allowUndefined(stringFromRequest)(`${name}.subject`, value['subject']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
		'telephone': allowUndefined(stringFromRequest)(`${name}.telephone`, value['telephone']),
		'email': allowUndefined(stringFromRequest)(`${name}.email`, value['email']),
		'status': allowUndefined(stringFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionArchiveMetadataToResponseContent(name: string, value: Api.CorrectionArchiveMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'studentDid': allowUndefined(stringToResponse)(`${name}.studentDid`, value['studentDid']),
		'teacherDid': allowUndefined(stringToResponse)(`${name}.teacherDid`, value['teacherDid']),
		'subject': allowUndefined(stringToResponse)(`${name}.subject`, value['subject']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
		'telephone': allowUndefined(stringToResponse)(`${name}.telephone`, value['telephone']),
		'email': allowUndefined(stringToResponse)(`${name}.email`, value['email']),
		'status': allowUndefined(stringToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionArchiveMetadataFromRequest(name: string, value: any): Api.CorrectionArchiveMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveMetadata = modelApiCorrectionArchiveMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveMetadataToResponse(name: string, value: Api.CorrectionArchiveMetadata): ToResponse<Api.CorrectionArchiveMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveMetadata> = modelApiCorrectionArchiveMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveUpdateRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveUpdateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveUpdateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveUpdateRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveUpdateRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveUpdateRequestToResponseContent(name: string, value: Api.CorrectionArchiveUpdateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveUpdateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveUpdateRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveUpdateRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveUpdateRequestFromRequest(name: string, value: any): Api.CorrectionArchiveUpdateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveUpdateRequest = modelApiCorrectionArchiveUpdateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveUpdateRequestToResponse(name: string, value: Api.CorrectionArchiveUpdateRequest): ToResponse<Api.CorrectionArchiveUpdateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveUpdateRequest> = modelApiCorrectionArchiveUpdateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveUpdateRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionArchiveUpdateRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveUpdateRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveUpdateRequestBody = {
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveUpdateRequestBodyToResponseContent(name: string, value: Api.CorrectionArchiveUpdateRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveUpdateRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveUpdateRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveUpdateRequestBodyFromRequest(name: string, value: any): Api.CorrectionArchiveUpdateRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveUpdateRequestBody = modelApiCorrectionArchiveUpdateRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveUpdateRequestBodyToResponse(name: string, value: Api.CorrectionArchiveUpdateRequestBody): ToResponse<Api.CorrectionArchiveUpdateRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveUpdateRequestBody> = modelApiCorrectionArchiveUpdateRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveUpdateResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionArchiveUpdateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveUpdateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveUpdateResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveUpdateResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionArchiveUpdateResponseToResponseContent(name: string, value: Api.CorrectionArchiveUpdateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveUpdateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveUpdateResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionArchiveUpdateResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionArchiveUpdateResponseFromRequest(name: string, value: any): Api.CorrectionArchiveUpdateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveUpdateResponse = modelApiCorrectionArchiveUpdateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveUpdateResponseToResponse(name: string, value: Api.CorrectionArchiveUpdateResponse): ToResponse<Api.CorrectionArchiveUpdateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveUpdateResponse> = modelApiCorrectionArchiveUpdateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionArchiveUpdateResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionArchiveUpdateResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionArchiveUpdateResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionArchiveUpdateResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionArchiveUpdateResponseBodyToResponseContent(name: string, value: Api.CorrectionArchiveUpdateResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionArchiveUpdateResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionArchiveUpdateResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionArchiveUpdateResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionArchiveMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionArchiveUpdateResponseBodyFromRequest(name: string, value: any): Api.CorrectionArchiveUpdateResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionArchiveUpdateResponseBody = modelApiCorrectionArchiveUpdateResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionArchiveUpdateResponseBodyToResponse(name: string, value: Api.CorrectionArchiveUpdateResponseBody): ToResponse<Api.CorrectionArchiveUpdateResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionArchiveUpdateResponseBody> = modelApiCorrectionArchiveUpdateResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionArchiveUpdateResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentArtificialRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentArtificialRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentArtificialRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentArtificialRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentArtificialRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentArtificialRequestToResponseContent(name: string, value: Api.CorrectionAssignmentArtificialRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentArtificialRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentArtificialRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentArtificialRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialRequestFromRequest(name: string, value: any): Api.CorrectionAssignmentArtificialRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentArtificialRequest = modelApiCorrectionAssignmentArtificialRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialRequestToResponse(name: string, value: Api.CorrectionAssignmentArtificialRequest): ToResponse<Api.CorrectionAssignmentArtificialRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentArtificialRequest> = modelApiCorrectionAssignmentArtificialRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentArtificialRequestBodyKeys: string[] = ['fileUrl']

function modelApiCorrectionAssignmentArtificialRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentArtificialRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentArtificialRequestBody = {
		'fileUrl': allowUndefined(stringFromRequest)(`${name}.fileUrl`, value['fileUrl']),
	}

	return result
}

function modelApiCorrectionAssignmentArtificialRequestBodyToResponseContent(name: string, value: Api.CorrectionAssignmentArtificialRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentArtificialRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentArtificialRequestBody> = {
		'fileUrl': allowUndefined(stringToResponse)(`${name}.fileUrl`, value['fileUrl']),
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialRequestBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentArtificialRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentArtificialRequestBody = modelApiCorrectionAssignmentArtificialRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialRequestBodyToResponse(name: string, value: Api.CorrectionAssignmentArtificialRequestBody): ToResponse<Api.CorrectionAssignmentArtificialRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentArtificialRequestBody> = modelApiCorrectionAssignmentArtificialRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentArtificialResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentArtificialResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentArtificialResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentArtificialResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentArtificialResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentArtificialResponseToResponseContent(name: string, value: Api.CorrectionAssignmentArtificialResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentArtificialResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentArtificialResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentArtificialResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialResponseFromRequest(name: string, value: any): Api.CorrectionAssignmentArtificialResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentArtificialResponse = modelApiCorrectionAssignmentArtificialResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialResponseToResponse(name: string, value: Api.CorrectionAssignmentArtificialResponse): ToResponse<Api.CorrectionAssignmentArtificialResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentArtificialResponse> = modelApiCorrectionAssignmentArtificialResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentArtificialResponseBodyKeys: string[] = ['status', 'result']

function modelApiCorrectionAssignmentArtificialResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentArtificialResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentArtificialResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'result': allowUndefined(stringFromRequest)(`${name}.result`, value['result']),
	}

	return result
}

function modelApiCorrectionAssignmentArtificialResponseBodyToResponseContent(name: string, value: Api.CorrectionAssignmentArtificialResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentArtificialResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentArtificialResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentArtificialResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'result': allowUndefined(stringToResponse)(`${name}.result`, value['result']),
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialResponseBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentArtificialResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentArtificialResponseBody = modelApiCorrectionAssignmentArtificialResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentArtificialResponseBodyToResponse(name: string, value: Api.CorrectionAssignmentArtificialResponseBody): ToResponse<Api.CorrectionAssignmentArtificialResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentArtificialResponseBody> = modelApiCorrectionAssignmentArtificialResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentArtificialResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentBigModelRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentBigModelRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentBigModelRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentBigModelRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentBigModelRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentBigModelRequestToResponseContent(name: string, value: Api.CorrectionAssignmentBigModelRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentBigModelRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentBigModelRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentBigModelRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelRequestFromRequest(name: string, value: any): Api.CorrectionAssignmentBigModelRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentBigModelRequest = modelApiCorrectionAssignmentBigModelRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelRequestToResponse(name: string, value: Api.CorrectionAssignmentBigModelRequest): ToResponse<Api.CorrectionAssignmentBigModelRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentBigModelRequest> = modelApiCorrectionAssignmentBigModelRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentBigModelRequestBodyKeys: string[] = ['question']

function modelApiCorrectionAssignmentBigModelRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentBigModelRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentBigModelRequestBody = {
		'question': allowUndefined(stringFromRequest)(`${name}.question`, value['question']),
	}

	return result
}

function modelApiCorrectionAssignmentBigModelRequestBodyToResponseContent(name: string, value: Api.CorrectionAssignmentBigModelRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentBigModelRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentBigModelRequestBody> = {
		'question': allowUndefined(stringToResponse)(`${name}.question`, value['question']),
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelRequestBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentBigModelRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentBigModelRequestBody = modelApiCorrectionAssignmentBigModelRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelRequestBodyToResponse(name: string, value: Api.CorrectionAssignmentBigModelRequestBody): ToResponse<Api.CorrectionAssignmentBigModelRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentBigModelRequestBody> = modelApiCorrectionAssignmentBigModelRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentBigModelResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentBigModelResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentBigModelResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentBigModelResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentBigModelResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentBigModelResponseToResponseContent(name: string, value: Api.CorrectionAssignmentBigModelResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentBigModelResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentBigModelResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentBigModelResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelResponseFromRequest(name: string, value: any): Api.CorrectionAssignmentBigModelResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentBigModelResponse = modelApiCorrectionAssignmentBigModelResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelResponseToResponse(name: string, value: Api.CorrectionAssignmentBigModelResponse): ToResponse<Api.CorrectionAssignmentBigModelResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentBigModelResponse> = modelApiCorrectionAssignmentBigModelResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentBigModelResponseBodyKeys: string[] = ['status', 'result']

function modelApiCorrectionAssignmentBigModelResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentBigModelResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentBigModelResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'result': allowUndefined(stringFromRequest)(`${name}.result`, value['result']),
	}

	return result
}

function modelApiCorrectionAssignmentBigModelResponseBodyToResponseContent(name: string, value: Api.CorrectionAssignmentBigModelResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentBigModelResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentBigModelResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentBigModelResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'result': allowUndefined(stringToResponse)(`${name}.result`, value['result']),
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelResponseBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentBigModelResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentBigModelResponseBody = modelApiCorrectionAssignmentBigModelResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentBigModelResponseBodyToResponse(name: string, value: Api.CorrectionAssignmentBigModelResponseBody): ToResponse<Api.CorrectionAssignmentBigModelResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentBigModelResponseBody> = modelApiCorrectionAssignmentBigModelResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentBigModelResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentCorrectionRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentCorrectionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentCorrectionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentCorrectionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentCorrectionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentCorrectionRequestToResponseContent(name: string, value: Api.CorrectionAssignmentCorrectionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentCorrectionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentCorrectionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentCorrectionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionRequestFromRequest(name: string, value: any): Api.CorrectionAssignmentCorrectionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentCorrectionRequest = modelApiCorrectionAssignmentCorrectionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionRequestToResponse(name: string, value: Api.CorrectionAssignmentCorrectionRequest): ToResponse<Api.CorrectionAssignmentCorrectionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentCorrectionRequest> = modelApiCorrectionAssignmentCorrectionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentCorrectionRequestBodyKeys: string[] = ['qa']

function modelApiCorrectionAssignmentCorrectionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentCorrectionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentCorrectionRequestBody = {
		'qa': allowUndefined(stringFromRequest)(`${name}.qa`, value['qa']),
	}

	return result
}

function modelApiCorrectionAssignmentCorrectionRequestBodyToResponseContent(name: string, value: Api.CorrectionAssignmentCorrectionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentCorrectionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentCorrectionRequestBody> = {
		'qa': allowUndefined(stringToResponse)(`${name}.qa`, value['qa']),
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionRequestBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentCorrectionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentCorrectionRequestBody = modelApiCorrectionAssignmentCorrectionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionRequestBodyToResponse(name: string, value: Api.CorrectionAssignmentCorrectionRequestBody): ToResponse<Api.CorrectionAssignmentCorrectionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentCorrectionRequestBody> = modelApiCorrectionAssignmentCorrectionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentCorrectionResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentCorrectionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentCorrectionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentCorrectionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentCorrectionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentCorrectionResponseToResponseContent(name: string, value: Api.CorrectionAssignmentCorrectionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentCorrectionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentCorrectionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentCorrectionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionResponseFromRequest(name: string, value: any): Api.CorrectionAssignmentCorrectionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentCorrectionResponse = modelApiCorrectionAssignmentCorrectionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionResponseToResponse(name: string, value: Api.CorrectionAssignmentCorrectionResponse): ToResponse<Api.CorrectionAssignmentCorrectionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentCorrectionResponse> = modelApiCorrectionAssignmentCorrectionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentCorrectionResponseBodyKeys: string[] = ['status', 'result']

function modelApiCorrectionAssignmentCorrectionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentCorrectionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentCorrectionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'result': allowUndefined(stringFromRequest)(`${name}.result`, value['result']),
	}

	return result
}

function modelApiCorrectionAssignmentCorrectionResponseBodyToResponseContent(name: string, value: Api.CorrectionAssignmentCorrectionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentCorrectionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentCorrectionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentCorrectionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'result': allowUndefined(stringToResponse)(`${name}.result`, value['result']),
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionResponseBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentCorrectionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentCorrectionResponseBody = modelApiCorrectionAssignmentCorrectionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentCorrectionResponseBodyToResponse(name: string, value: Api.CorrectionAssignmentCorrectionResponseBody): ToResponse<Api.CorrectionAssignmentCorrectionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentCorrectionResponseBody> = modelApiCorrectionAssignmentCorrectionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentCorrectionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentUploadRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentUploadRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentUploadRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentUploadRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentUploadRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentUploadRequestToResponseContent(name: string, value: Api.CorrectionAssignmentUploadRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentUploadRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentUploadRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentUploadRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentUploadRequestFromRequest(name: string, value: any): Api.CorrectionAssignmentUploadRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentUploadRequest = modelApiCorrectionAssignmentUploadRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentUploadRequestToResponse(name: string, value: Api.CorrectionAssignmentUploadRequest): ToResponse<Api.CorrectionAssignmentUploadRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentUploadRequest> = modelApiCorrectionAssignmentUploadRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentUploadRequestBodyKeys: string[] = ['urlMetaData', 'taskUid', 'type', 'subject', 'testPaperName']

function modelApiCorrectionAssignmentUploadRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentUploadRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentUploadRequestBody = {
		'urlMetaData': allowUndefined(arrayFromRequest(modelApiCorrectionUrlMetaDataFromRequest))(`${name}.urlMetaData`, value['urlMetaData']),
		'taskUid': allowUndefined(stringFromRequest)(`${name}.taskUid`, value['taskUid']),
		'type': allowUndefined(enumApiCorrectionImageContentTypeEnumFromRequest)(`${name}.type`, value['type']),
		'subject': allowUndefined(stringFromRequest)(`${name}.subject`, value['subject']),
		'testPaperName': allowUndefined(stringFromRequest)(`${name}.testPaperName`, value['testPaperName']),
	}

	return result
}

function modelApiCorrectionAssignmentUploadRequestBodyToResponseContent(name: string, value: Api.CorrectionAssignmentUploadRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentUploadRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentUploadRequestBody> = {
		'urlMetaData': allowUndefined(arrayToResponse(modelApiCorrectionUrlMetaDataToResponse))(`${name}.urlMetaData`, value['urlMetaData']),
		'taskUid': allowUndefined(stringToResponse)(`${name}.taskUid`, value['taskUid']),
		'type': allowUndefined(enumApiCorrectionImageContentTypeEnumToResponse)(`${name}.type`, value['type']),
		'subject': allowUndefined(stringToResponse)(`${name}.subject`, value['subject']),
		'testPaperName': allowUndefined(stringToResponse)(`${name}.testPaperName`, value['testPaperName']),
	}

	return result
}

export function modelApiCorrectionAssignmentUploadRequestBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentUploadRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentUploadRequestBody = modelApiCorrectionAssignmentUploadRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentUploadRequestBodyToResponse(name: string, value: Api.CorrectionAssignmentUploadRequestBody): ToResponse<Api.CorrectionAssignmentUploadRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentUploadRequestBody> = modelApiCorrectionAssignmentUploadRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentUploadResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionAssignmentUploadResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentUploadResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentUploadResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentUploadResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionAssignmentUploadResponseToResponseContent(name: string, value: Api.CorrectionAssignmentUploadResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentUploadResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentUploadResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionAssignmentUploadResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionAssignmentUploadResponseFromRequest(name: string, value: any): Api.CorrectionAssignmentUploadResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentUploadResponse = modelApiCorrectionAssignmentUploadResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentUploadResponseToResponse(name: string, value: Api.CorrectionAssignmentUploadResponse): ToResponse<Api.CorrectionAssignmentUploadResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentUploadResponse> = modelApiCorrectionAssignmentUploadResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionAssignmentUploadResponseBodyKeys: string[] = ['status', 'result']

function modelApiCorrectionAssignmentUploadResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionAssignmentUploadResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionAssignmentUploadResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'result': allowUndefined(stringFromRequest)(`${name}.result`, value['result']),
	}

	return result
}

function modelApiCorrectionAssignmentUploadResponseBodyToResponseContent(name: string, value: Api.CorrectionAssignmentUploadResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionAssignmentUploadResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionAssignmentUploadResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionAssignmentUploadResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'result': allowUndefined(stringToResponse)(`${name}.result`, value['result']),
	}

	return result
}

export function modelApiCorrectionAssignmentUploadResponseBodyFromRequest(name: string, value: any): Api.CorrectionAssignmentUploadResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionAssignmentUploadResponseBody = modelApiCorrectionAssignmentUploadResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionAssignmentUploadResponseBodyToResponse(name: string, value: Api.CorrectionAssignmentUploadResponseBody): ToResponse<Api.CorrectionAssignmentUploadResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionAssignmentUploadResponseBody> = modelApiCorrectionAssignmentUploadResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionAssignmentUploadResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionCountMetadataKeys: string[] = ['type', 'count']

function modelApiCorrectionCountMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionCountMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionCountMetadata = {
		'type': allowUndefined(integerFromRequest)(`${name}.type`, value['type']),
		'count': allowUndefined(integerFromRequest)(`${name}.count`, value['count']),
	}

	return result
}

function modelApiCorrectionCountMetadataToResponseContent(name: string, value: Api.CorrectionCountMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionCountMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionCountMetadata> = {
		'type': allowUndefined(integerToResponse)(`${name}.type`, value['type']),
		'count': allowUndefined(integerToResponse)(`${name}.count`, value['count']),
	}

	return result
}

export function modelApiCorrectionCountMetadataFromRequest(name: string, value: any): Api.CorrectionCountMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionCountMetadata = modelApiCorrectionCountMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionCountMetadataToResponse(name: string, value: Api.CorrectionCountMetadata): ToResponse<Api.CorrectionCountMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionCountMetadata> = modelApiCorrectionCountMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionCountRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionCountRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionCountRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionCountRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionCountRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionCountRequestToResponseContent(name: string, value: Api.CorrectionCountRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionCountRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionCountRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionCountRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionCountRequestFromRequest(name: string, value: any): Api.CorrectionCountRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionCountRequest = modelApiCorrectionCountRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionCountRequestToResponse(name: string, value: Api.CorrectionCountRequest): ToResponse<Api.CorrectionCountRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionCountRequest> = modelApiCorrectionCountRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionCountRequestBodyKeys: string[] = []

function modelApiCorrectionCountRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionCountRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionCountRequestBody = {
	}

	return result
}

function modelApiCorrectionCountRequestBodyToResponseContent(name: string, value: Api.CorrectionCountRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionCountRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionCountRequestBody> = {
	}

	return result
}

export function modelApiCorrectionCountRequestBodyFromRequest(name: string, value: any): Api.CorrectionCountRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionCountRequestBody = modelApiCorrectionCountRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionCountRequestBodyToResponse(name: string, value: Api.CorrectionCountRequestBody): ToResponse<Api.CorrectionCountRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionCountRequestBody> = modelApiCorrectionCountRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionCountResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionCountResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionCountResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionCountResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionCountResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionCountResponseToResponseContent(name: string, value: Api.CorrectionCountResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionCountResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionCountResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionCountResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionCountResponseFromRequest(name: string, value: any): Api.CorrectionCountResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionCountResponse = modelApiCorrectionCountResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionCountResponseToResponse(name: string, value: Api.CorrectionCountResponse): ToResponse<Api.CorrectionCountResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionCountResponse> = modelApiCorrectionCountResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionCountResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionCountResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionCountResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionCountResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayFromRequest(modelApiCorrectionCountMetadataFromRequest))(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionCountResponseBodyToResponseContent(name: string, value: Api.CorrectionCountResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionCountResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionCountResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionCountResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayToResponse(modelApiCorrectionCountMetadataToResponse))(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionCountResponseBodyFromRequest(name: string, value: any): Api.CorrectionCountResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionCountResponseBody = modelApiCorrectionCountResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionCountResponseBodyToResponse(name: string, value: Api.CorrectionCountResponseBody): ToResponse<Api.CorrectionCountResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionCountResponseBody> = modelApiCorrectionCountResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionCountResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteGroupRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteGroupRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteGroupRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteGroupRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteGroupRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteGroupRequestToResponseContent(name: string, value: Api.CorrectionDeleteGroupRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteGroupRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteGroupRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteGroupRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteGroupRequestFromRequest(name: string, value: any): Api.CorrectionDeleteGroupRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteGroupRequest = modelApiCorrectionDeleteGroupRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteGroupRequestToResponse(name: string, value: Api.CorrectionDeleteGroupRequest): ToResponse<Api.CorrectionDeleteGroupRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteGroupRequest> = modelApiCorrectionDeleteGroupRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteGroupRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDeleteGroupRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteGroupRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteGroupRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDeleteGroupRequestBodyToResponseContent(name: string, value: Api.CorrectionDeleteGroupRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteGroupRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteGroupRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDeleteGroupRequestBodyFromRequest(name: string, value: any): Api.CorrectionDeleteGroupRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteGroupRequestBody = modelApiCorrectionDeleteGroupRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteGroupRequestBodyToResponse(name: string, value: Api.CorrectionDeleteGroupRequestBody): ToResponse<Api.CorrectionDeleteGroupRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteGroupRequestBody> = modelApiCorrectionDeleteGroupRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteGroupResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteGroupResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteGroupResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteGroupResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteGroupResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteGroupResponseToResponseContent(name: string, value: Api.CorrectionDeleteGroupResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteGroupResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteGroupResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteGroupResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteGroupResponseFromRequest(name: string, value: any): Api.CorrectionDeleteGroupResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteGroupResponse = modelApiCorrectionDeleteGroupResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteGroupResponseToResponse(name: string, value: Api.CorrectionDeleteGroupResponse): ToResponse<Api.CorrectionDeleteGroupResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteGroupResponse> = modelApiCorrectionDeleteGroupResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteGroupResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionDeleteGroupResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteGroupResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteGroupResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionDeleteGroupResponseBodyToResponseContent(name: string, value: Api.CorrectionDeleteGroupResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteGroupResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteGroupResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionDeleteGroupResponseBodyFromRequest(name: string, value: any): Api.CorrectionDeleteGroupResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteGroupResponseBody = modelApiCorrectionDeleteGroupResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteGroupResponseBodyToResponse(name: string, value: Api.CorrectionDeleteGroupResponseBody): ToResponse<Api.CorrectionDeleteGroupResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteGroupResponseBody> = modelApiCorrectionDeleteGroupResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteTaskRequestToResponseContent(name: string, value: Api.CorrectionDeleteTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskRequestFromRequest(name: string, value: any): Api.CorrectionDeleteTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskRequest = modelApiCorrectionDeleteTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskRequestToResponse(name: string, value: Api.CorrectionDeleteTaskRequest): ToResponse<Api.CorrectionDeleteTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskRequest> = modelApiCorrectionDeleteTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDeleteTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDeleteTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionDeleteTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionDeleteTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskRequestBody = modelApiCorrectionDeleteTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskRequestBodyToResponse(name: string, value: Api.CorrectionDeleteTaskRequestBody): ToResponse<Api.CorrectionDeleteTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskRequestBody> = modelApiCorrectionDeleteTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteTaskResponseToResponseContent(name: string, value: Api.CorrectionDeleteTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskResponseFromRequest(name: string, value: any): Api.CorrectionDeleteTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskResponse = modelApiCorrectionDeleteTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskResponseToResponse(name: string, value: Api.CorrectionDeleteTaskResponse): ToResponse<Api.CorrectionDeleteTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskResponse> = modelApiCorrectionDeleteTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionDeleteTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionDeleteTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionDeleteTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionDeleteTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskResponseBody = modelApiCorrectionDeleteTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskResponseBodyToResponse(name: string, value: Api.CorrectionDeleteTaskResponseBody): ToResponse<Api.CorrectionDeleteTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskResponseBody> = modelApiCorrectionDeleteTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskTagRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteTaskTagRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskTagRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskTagRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskTagRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteTaskTagRequestToResponseContent(name: string, value: Api.CorrectionDeleteTaskTagRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskTagRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskTagRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskTagRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagRequestFromRequest(name: string, value: any): Api.CorrectionDeleteTaskTagRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskTagRequest = modelApiCorrectionDeleteTaskTagRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagRequestToResponse(name: string, value: Api.CorrectionDeleteTaskTagRequest): ToResponse<Api.CorrectionDeleteTaskTagRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskTagRequest> = modelApiCorrectionDeleteTaskTagRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskTagRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDeleteTaskTagRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskTagRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskTagRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDeleteTaskTagRequestBodyToResponseContent(name: string, value: Api.CorrectionDeleteTaskTagRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskTagRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskTagRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagRequestBodyFromRequest(name: string, value: any): Api.CorrectionDeleteTaskTagRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskTagRequestBody = modelApiCorrectionDeleteTaskTagRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagRequestBodyToResponse(name: string, value: Api.CorrectionDeleteTaskTagRequestBody): ToResponse<Api.CorrectionDeleteTaskTagRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskTagRequestBody> = modelApiCorrectionDeleteTaskTagRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskTagResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDeleteTaskTagResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskTagResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskTagResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskTagResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDeleteTaskTagResponseToResponseContent(name: string, value: Api.CorrectionDeleteTaskTagResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskTagResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskTagResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDeleteTaskTagResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagResponseFromRequest(name: string, value: any): Api.CorrectionDeleteTaskTagResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskTagResponse = modelApiCorrectionDeleteTaskTagResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagResponseToResponse(name: string, value: Api.CorrectionDeleteTaskTagResponse): ToResponse<Api.CorrectionDeleteTaskTagResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskTagResponse> = modelApiCorrectionDeleteTaskTagResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDeleteTaskTagResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionDeleteTaskTagResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDeleteTaskTagResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDeleteTaskTagResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionDeleteTaskTagResponseBodyToResponseContent(name: string, value: Api.CorrectionDeleteTaskTagResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDeleteTaskTagResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDeleteTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDeleteTaskTagResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagResponseBodyFromRequest(name: string, value: any): Api.CorrectionDeleteTaskTagResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDeleteTaskTagResponseBody = modelApiCorrectionDeleteTaskTagResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDeleteTaskTagResponseBodyToResponse(name: string, value: Api.CorrectionDeleteTaskTagResponseBody): ToResponse<Api.CorrectionDeleteTaskTagResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDeleteTaskTagResponseBody> = modelApiCorrectionDeleteTaskTagResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDeleteTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailGroupRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailGroupRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailGroupRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailGroupRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailGroupRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailGroupRequestToResponseContent(name: string, value: Api.CorrectionDetailGroupRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailGroupRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailGroupRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailGroupRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailGroupRequestFromRequest(name: string, value: any): Api.CorrectionDetailGroupRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailGroupRequest = modelApiCorrectionDetailGroupRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailGroupRequestToResponse(name: string, value: Api.CorrectionDetailGroupRequest): ToResponse<Api.CorrectionDetailGroupRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailGroupRequest> = modelApiCorrectionDetailGroupRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailGroupRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDetailGroupRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailGroupRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailGroupRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDetailGroupRequestBodyToResponseContent(name: string, value: Api.CorrectionDetailGroupRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailGroupRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailGroupRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDetailGroupRequestBodyFromRequest(name: string, value: any): Api.CorrectionDetailGroupRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailGroupRequestBody = modelApiCorrectionDetailGroupRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailGroupRequestBodyToResponse(name: string, value: Api.CorrectionDetailGroupRequestBody): ToResponse<Api.CorrectionDetailGroupRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailGroupRequestBody> = modelApiCorrectionDetailGroupRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailGroupResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailGroupResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailGroupResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailGroupResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailGroupResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailGroupResponseToResponseContent(name: string, value: Api.CorrectionDetailGroupResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailGroupResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailGroupResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailGroupResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailGroupResponseFromRequest(name: string, value: any): Api.CorrectionDetailGroupResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailGroupResponse = modelApiCorrectionDetailGroupResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailGroupResponseToResponse(name: string, value: Api.CorrectionDetailGroupResponse): ToResponse<Api.CorrectionDetailGroupResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailGroupResponse> = modelApiCorrectionDetailGroupResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailGroupResponseBodyKeys: string[] = ['status', 'meta', 'studentList']

function modelApiCorrectionDetailGroupResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailGroupResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailGroupResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
		'studentList': allowUndefined(arrayFromRequest(modelApiCorrectionGroupMetaDataFromRequest))(`${name}.studentList`, value['studentList']),
	}

	return result
}

function modelApiCorrectionDetailGroupResponseBodyToResponseContent(name: string, value: Api.CorrectionDetailGroupResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailGroupResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailGroupResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
		'studentList': allowUndefined(arrayToResponse(modelApiCorrectionGroupMetaDataToResponse))(`${name}.studentList`, value['studentList']),
	}

	return result
}

export function modelApiCorrectionDetailGroupResponseBodyFromRequest(name: string, value: any): Api.CorrectionDetailGroupResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailGroupResponseBody = modelApiCorrectionDetailGroupResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailGroupResponseBodyToResponse(name: string, value: Api.CorrectionDetailGroupResponseBody): ToResponse<Api.CorrectionDetailGroupResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailGroupResponseBody> = modelApiCorrectionDetailGroupResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailTaskRequestToResponseContent(name: string, value: Api.CorrectionDetailTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailTaskRequestFromRequest(name: string, value: any): Api.CorrectionDetailTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskRequest = modelApiCorrectionDetailTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskRequestToResponse(name: string, value: Api.CorrectionDetailTaskRequest): ToResponse<Api.CorrectionDetailTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskRequest> = modelApiCorrectionDetailTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDetailTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDetailTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionDetailTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDetailTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionDetailTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskRequestBody = modelApiCorrectionDetailTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskRequestBodyToResponse(name: string, value: Api.CorrectionDetailTaskRequestBody): ToResponse<Api.CorrectionDetailTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskRequestBody> = modelApiCorrectionDetailTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailTaskResponseToResponseContent(name: string, value: Api.CorrectionDetailTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailTaskResponseFromRequest(name: string, value: any): Api.CorrectionDetailTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskResponse = modelApiCorrectionDetailTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskResponseToResponse(name: string, value: Api.CorrectionDetailTaskResponse): ToResponse<Api.CorrectionDetailTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskResponse> = modelApiCorrectionDetailTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskResponseBodyKeys: string[] = ['status', 'meta', 'studentList']

function modelApiCorrectionDetailTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
		'studentList': allowUndefined(arrayFromRequest(modelApiCorrectionGroupMetaDataFromRequest))(`${name}.studentList`, value['studentList']),
	}

	return result
}

function modelApiCorrectionDetailTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionDetailTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
		'studentList': allowUndefined(arrayToResponse(modelApiCorrectionGroupMetaDataToResponse))(`${name}.studentList`, value['studentList']),
	}

	return result
}

export function modelApiCorrectionDetailTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionDetailTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskResponseBody = modelApiCorrectionDetailTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskResponseBodyToResponse(name: string, value: Api.CorrectionDetailTaskResponseBody): ToResponse<Api.CorrectionDetailTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskResponseBody> = modelApiCorrectionDetailTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskTagRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailTaskTagRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskTagRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskTagRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskTagRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailTaskTagRequestToResponseContent(name: string, value: Api.CorrectionDetailTaskTagRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskTagRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskTagRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskTagRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailTaskTagRequestFromRequest(name: string, value: any): Api.CorrectionDetailTaskTagRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskTagRequest = modelApiCorrectionDetailTaskTagRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskTagRequestToResponse(name: string, value: Api.CorrectionDetailTaskTagRequest): ToResponse<Api.CorrectionDetailTaskTagRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskTagRequest> = modelApiCorrectionDetailTaskTagRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskTagRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDetailTaskTagRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskTagRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskTagRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDetailTaskTagRequestBodyToResponseContent(name: string, value: Api.CorrectionDetailTaskTagRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskTagRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskTagRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDetailTaskTagRequestBodyFromRequest(name: string, value: any): Api.CorrectionDetailTaskTagRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskTagRequestBody = modelApiCorrectionDetailTaskTagRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskTagRequestBodyToResponse(name: string, value: Api.CorrectionDetailTaskTagRequestBody): ToResponse<Api.CorrectionDetailTaskTagRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskTagRequestBody> = modelApiCorrectionDetailTaskTagRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskTagResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailTaskTagResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskTagResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskTagResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskTagResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailTaskTagResponseToResponseContent(name: string, value: Api.CorrectionDetailTaskTagResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskTagResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskTagResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailTaskTagResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailTaskTagResponseFromRequest(name: string, value: any): Api.CorrectionDetailTaskTagResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskTagResponse = modelApiCorrectionDetailTaskTagResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskTagResponseToResponse(name: string, value: Api.CorrectionDetailTaskTagResponse): ToResponse<Api.CorrectionDetailTaskTagResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskTagResponse> = modelApiCorrectionDetailTaskTagResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailTaskTagResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionDetailTaskTagResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailTaskTagResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailTaskTagResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionDetailTaskTagResponseBodyToResponseContent(name: string, value: Api.CorrectionDetailTaskTagResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailTaskTagResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailTaskTagResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionDetailTaskTagResponseBodyFromRequest(name: string, value: any): Api.CorrectionDetailTaskTagResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailTaskTagResponseBody = modelApiCorrectionDetailTaskTagResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailTaskTagResponseBodyToResponse(name: string, value: Api.CorrectionDetailTaskTagResponseBody): ToResponse<Api.CorrectionDetailTaskTagResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailTaskTagResponseBody> = modelApiCorrectionDetailTaskTagResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailWarehouseRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailWarehouseRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailWarehouseRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailWarehouseRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailWarehouseRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailWarehouseRequestToResponseContent(name: string, value: Api.CorrectionDetailWarehouseRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailWarehouseRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailWarehouseRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailWarehouseRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailWarehouseRequestFromRequest(name: string, value: any): Api.CorrectionDetailWarehouseRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailWarehouseRequest = modelApiCorrectionDetailWarehouseRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailWarehouseRequestToResponse(name: string, value: Api.CorrectionDetailWarehouseRequest): ToResponse<Api.CorrectionDetailWarehouseRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailWarehouseRequest> = modelApiCorrectionDetailWarehouseRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailWarehouseRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionDetailWarehouseRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailWarehouseRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailWarehouseRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionDetailWarehouseRequestBodyToResponseContent(name: string, value: Api.CorrectionDetailWarehouseRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailWarehouseRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailWarehouseRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionDetailWarehouseRequestBodyFromRequest(name: string, value: any): Api.CorrectionDetailWarehouseRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailWarehouseRequestBody = modelApiCorrectionDetailWarehouseRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailWarehouseRequestBodyToResponse(name: string, value: Api.CorrectionDetailWarehouseRequestBody): ToResponse<Api.CorrectionDetailWarehouseRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailWarehouseRequestBody> = modelApiCorrectionDetailWarehouseRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailWarehouseResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionDetailWarehouseResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailWarehouseResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailWarehouseResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailWarehouseResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionDetailWarehouseResponseToResponseContent(name: string, value: Api.CorrectionDetailWarehouseResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailWarehouseResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailWarehouseResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionDetailWarehouseResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionDetailWarehouseResponseFromRequest(name: string, value: any): Api.CorrectionDetailWarehouseResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailWarehouseResponse = modelApiCorrectionDetailWarehouseResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailWarehouseResponseToResponse(name: string, value: Api.CorrectionDetailWarehouseResponse): ToResponse<Api.CorrectionDetailWarehouseResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailWarehouseResponse> = modelApiCorrectionDetailWarehouseResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionDetailWarehouseResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionDetailWarehouseResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionDetailWarehouseResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionDetailWarehouseResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionDetailWarehouseResponseBodyToResponseContent(name: string, value: Api.CorrectionDetailWarehouseResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionDetailWarehouseResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionDetailWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionDetailWarehouseResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionWarehouseMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionDetailWarehouseResponseBodyFromRequest(name: string, value: any): Api.CorrectionDetailWarehouseResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionDetailWarehouseResponseBody = modelApiCorrectionDetailWarehouseResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionDetailWarehouseResponseBodyToResponse(name: string, value: Api.CorrectionDetailWarehouseResponseBody): ToResponse<Api.CorrectionDetailWarehouseResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionDetailWarehouseResponseBody> = modelApiCorrectionDetailWarehouseResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionDetailWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionGroupMetaDataKeys: string[] = ['uid', 'did', 'groupName', 'createdAt', 'updatedAt', 'isDeleted', 'teacherDid', 'studentName']

function modelApiCorrectionGroupMetaDataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionGroupMetaData {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionGroupMetaDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionGroupMetaData = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'groupName': allowUndefined(stringFromRequest)(`${name}.groupName`, value['groupName']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
		'teacherDid': allowUndefined(stringFromRequest)(`${name}.teacherDid`, value['teacherDid']),
		'studentName': allowUndefined(stringFromRequest)(`${name}.studentName`, value['studentName']),
	}

	return result
}

function modelApiCorrectionGroupMetaDataToResponseContent(name: string, value: Api.CorrectionGroupMetaData, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionGroupMetaData> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionGroupMetaDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionGroupMetaData> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'groupName': allowUndefined(stringToResponse)(`${name}.groupName`, value['groupName']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
		'teacherDid': allowUndefined(stringToResponse)(`${name}.teacherDid`, value['teacherDid']),
		'studentName': allowUndefined(stringToResponse)(`${name}.studentName`, value['studentName']),
	}

	return result
}

export function modelApiCorrectionGroupMetaDataFromRequest(name: string, value: any): Api.CorrectionGroupMetaData {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionGroupMetaData = modelApiCorrectionGroupMetaDataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionGroupMetaData: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionGroupMetaDataToResponse(name: string, value: Api.CorrectionGroupMetaData): ToResponse<Api.CorrectionGroupMetaData> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionGroupMetaData> = modelApiCorrectionGroupMetaDataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionGroupMetaData: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkDetailRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionHomeworkDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionHomeworkDetailRequestToResponseContent(name: string, value: Api.CorrectionHomeworkDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionHomeworkDetailRequestFromRequest(name: string, value: any): Api.CorrectionHomeworkDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkDetailRequest = modelApiCorrectionHomeworkDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkDetailRequestToResponse(name: string, value: Api.CorrectionHomeworkDetailRequest): ToResponse<Api.CorrectionHomeworkDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkDetailRequest> = modelApiCorrectionHomeworkDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkDetailRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionHomeworkDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionHomeworkDetailRequestBodyToResponseContent(name: string, value: Api.CorrectionHomeworkDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionHomeworkDetailRequestBodyFromRequest(name: string, value: any): Api.CorrectionHomeworkDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkDetailRequestBody = modelApiCorrectionHomeworkDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkDetailRequestBodyToResponse(name: string, value: Api.CorrectionHomeworkDetailRequestBody): ToResponse<Api.CorrectionHomeworkDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkDetailRequestBody> = modelApiCorrectionHomeworkDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkDetailResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionHomeworkDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionHomeworkDetailResponseToResponseContent(name: string, value: Api.CorrectionHomeworkDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionHomeworkDetailResponseFromRequest(name: string, value: any): Api.CorrectionHomeworkDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkDetailResponse = modelApiCorrectionHomeworkDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkDetailResponseToResponse(name: string, value: Api.CorrectionHomeworkDetailResponse): ToResponse<Api.CorrectionHomeworkDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkDetailResponse> = modelApiCorrectionHomeworkDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkDetailResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionHomeworkDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionHomeworkMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionHomeworkDetailResponseBodyToResponseContent(name: string, value: Api.CorrectionHomeworkDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionHomeworkMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionHomeworkDetailResponseBodyFromRequest(name: string, value: any): Api.CorrectionHomeworkDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkDetailResponseBody = modelApiCorrectionHomeworkDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkDetailResponseBodyToResponse(name: string, value: Api.CorrectionHomeworkDetailResponseBody): ToResponse<Api.CorrectionHomeworkDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkDetailResponseBody> = modelApiCorrectionHomeworkDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkListRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionHomeworkListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionHomeworkListRequestToResponseContent(name: string, value: Api.CorrectionHomeworkListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionHomeworkListRequestFromRequest(name: string, value: any): Api.CorrectionHomeworkListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkListRequest = modelApiCorrectionHomeworkListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkListRequestToResponse(name: string, value: Api.CorrectionHomeworkListRequest): ToResponse<Api.CorrectionHomeworkListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkListRequest> = modelApiCorrectionHomeworkListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkListRequestBodyKeys: string[] = ['did']

function modelApiCorrectionHomeworkListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkListRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiCorrectionHomeworkListRequestBodyToResponseContent(name: string, value: Api.CorrectionHomeworkListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkListRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiCorrectionHomeworkListRequestBodyFromRequest(name: string, value: any): Api.CorrectionHomeworkListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkListRequestBody = modelApiCorrectionHomeworkListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkListRequestBodyToResponse(name: string, value: Api.CorrectionHomeworkListRequestBody): ToResponse<Api.CorrectionHomeworkListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkListRequestBody> = modelApiCorrectionHomeworkListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkListResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionHomeworkListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionHomeworkListResponseToResponseContent(name: string, value: Api.CorrectionHomeworkListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionHomeworkListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionHomeworkListResponseFromRequest(name: string, value: any): Api.CorrectionHomeworkListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkListResponse = modelApiCorrectionHomeworkListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkListResponseToResponse(name: string, value: Api.CorrectionHomeworkListResponse): ToResponse<Api.CorrectionHomeworkListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkListResponse> = modelApiCorrectionHomeworkListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkListResponseBodyKeys: string[] = ['status', 'list']

function modelApiCorrectionHomeworkListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionHomeworkMetadataFromRequest))(`${name}.list`, value['list']),
	}

	return result
}

function modelApiCorrectionHomeworkListResponseBodyToResponseContent(name: string, value: Api.CorrectionHomeworkListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionHomeworkMetadataToResponse))(`${name}.list`, value['list']),
	}

	return result
}

export function modelApiCorrectionHomeworkListResponseBodyFromRequest(name: string, value: any): Api.CorrectionHomeworkListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkListResponseBody = modelApiCorrectionHomeworkListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkListResponseBodyToResponse(name: string, value: Api.CorrectionHomeworkListResponseBody): ToResponse<Api.CorrectionHomeworkListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkListResponseBody> = modelApiCorrectionHomeworkListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionHomeworkMetadataKeys: string[] = ['uid', 'did', 'subject', 'testPaperUid', 'createdAt', 'updatedAt', 'isDeleted']

function modelApiCorrectionHomeworkMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionHomeworkMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionHomeworkMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'subject': allowUndefined(stringFromRequest)(`${name}.subject`, value['subject']),
		'testPaperUid': allowUndefined(stringFromRequest)(`${name}.testPaperUid`, value['testPaperUid']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

function modelApiCorrectionHomeworkMetadataToResponseContent(name: string, value: Api.CorrectionHomeworkMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionHomeworkMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionHomeworkMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionHomeworkMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'subject': allowUndefined(stringToResponse)(`${name}.subject`, value['subject']),
		'testPaperUid': allowUndefined(stringToResponse)(`${name}.testPaperUid`, value['testPaperUid']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

export function modelApiCorrectionHomeworkMetadataFromRequest(name: string, value: any): Api.CorrectionHomeworkMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionHomeworkMetadata = modelApiCorrectionHomeworkMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionHomeworkMetadataToResponse(name: string, value: Api.CorrectionHomeworkMetadata): ToResponse<Api.CorrectionHomeworkMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionHomeworkMetadata> = modelApiCorrectionHomeworkMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionHomeworkMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiCorrectionImageContentTypeEnumFromRequest(name: string, value: any): Api.CorrectionImageContentTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'QUESTION') {
		return Api.CorrectionImageContentTypeEnum.QUESTION
	}
	if (value === 'ANSWER') {
		return Api.CorrectionImageContentTypeEnum.ANSWER
	}
	if (value === 'QA') {
		return Api.CorrectionImageContentTypeEnum.QA
	}

	throw `Unexpected enum value for Api.CorrectionImageContentTypeEnum: ${value}`
}

export function enumApiCorrectionImageContentTypeEnumToResponse(name: string, value: Api.CorrectionImageContentTypeEnum): Api.CorrectionImageContentTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'QUESTION') {
		return Api.CorrectionImageContentTypeEnum.QUESTION
	}
	if (value === 'ANSWER') {
		return Api.CorrectionImageContentTypeEnum.ANSWER
	}
	if (value === 'QA') {
		return Api.CorrectionImageContentTypeEnum.QA
	}

	throw `Unexpected enum value for Api.CorrectionImageContentTypeEnum: ${value}`
}

const ApiCorrectionListByRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionListByRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListByRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListByRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListByRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListByRequestToResponseContent(name: string, value: Api.CorrectionListByRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListByRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListByRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListByRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListByRequestFromRequest(name: string, value: any): Api.CorrectionListByRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListByRequest = modelApiCorrectionListByRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListByRequestToResponse(name: string, value: Api.CorrectionListByRequest): ToResponse<Api.CorrectionListByRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListByRequest> = modelApiCorrectionListByRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListByRequestBodyKeys: string[] = ['status', 'type']

function modelApiCorrectionListByRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListByRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListByRequestBody = {
		'status': allowUndefined(integerFromRequest)(`${name}.status`, value['status']),
		'type': allowUndefined(integerFromRequest)(`${name}.type`, value['type']),
	}

	return result
}

function modelApiCorrectionListByRequestBodyToResponseContent(name: string, value: Api.CorrectionListByRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListByRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListByRequestBody> = {
		'status': allowUndefined(integerToResponse)(`${name}.status`, value['status']),
		'type': allowUndefined(integerToResponse)(`${name}.type`, value['type']),
	}

	return result
}

export function modelApiCorrectionListByRequestBodyFromRequest(name: string, value: any): Api.CorrectionListByRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListByRequestBody = modelApiCorrectionListByRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListByRequestBodyToResponse(name: string, value: Api.CorrectionListByRequestBody): ToResponse<Api.CorrectionListByRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListByRequestBody> = modelApiCorrectionListByRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListByResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionListByResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListByResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListByResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListByResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListByResponseToResponseContent(name: string, value: Api.CorrectionListByResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListByResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListByResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListByResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListByResponseFromRequest(name: string, value: any): Api.CorrectionListByResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListByResponse = modelApiCorrectionListByResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListByResponseToResponse(name: string, value: Api.CorrectionListByResponse): ToResponse<Api.CorrectionListByResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListByResponse> = modelApiCorrectionListByResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListByResponseBodyKeys: string[] = ['status', 'meta', 'count']

function modelApiCorrectionListByResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListByResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListByResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayFromRequest(modelApiCorrectionMessageMetadataFromRequest))(`${name}.meta`, value['meta']),
		'count': allowUndefined(integerFromRequest)(`${name}.count`, value['count']),
	}

	return result
}

function modelApiCorrectionListByResponseBodyToResponseContent(name: string, value: Api.CorrectionListByResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListByResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListByResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListByResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayToResponse(modelApiCorrectionMessageMetadataToResponse))(`${name}.meta`, value['meta']),
		'count': allowUndefined(integerToResponse)(`${name}.count`, value['count']),
	}

	return result
}

export function modelApiCorrectionListByResponseBodyFromRequest(name: string, value: any): Api.CorrectionListByResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListByResponseBody = modelApiCorrectionListByResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListByResponseBodyToResponse(name: string, value: Api.CorrectionListByResponseBody): ToResponse<Api.CorrectionListByResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListByResponseBody> = modelApiCorrectionListByResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListByResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListGroupRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionListGroupRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListGroupRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListGroupRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListGroupRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListGroupRequestToResponseContent(name: string, value: Api.CorrectionListGroupRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListGroupRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListGroupRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListGroupRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListGroupRequestFromRequest(name: string, value: any): Api.CorrectionListGroupRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListGroupRequest = modelApiCorrectionListGroupRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListGroupRequestToResponse(name: string, value: Api.CorrectionListGroupRequest): ToResponse<Api.CorrectionListGroupRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListGroupRequest> = modelApiCorrectionListGroupRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListGroupRequestBodyKeys: string[] = ['teacherDid', 'page']

function modelApiCorrectionListGroupRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListGroupRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListGroupRequestBody = {
		'teacherDid': allowUndefined(stringFromRequest)(`${name}.teacherDid`, value['teacherDid']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionListGroupRequestBodyToResponseContent(name: string, value: Api.CorrectionListGroupRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListGroupRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListGroupRequestBody> = {
		'teacherDid': allowUndefined(stringToResponse)(`${name}.teacherDid`, value['teacherDid']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionListGroupRequestBodyFromRequest(name: string, value: any): Api.CorrectionListGroupRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListGroupRequestBody = modelApiCorrectionListGroupRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListGroupRequestBodyToResponse(name: string, value: Api.CorrectionListGroupRequestBody): ToResponse<Api.CorrectionListGroupRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListGroupRequestBody> = modelApiCorrectionListGroupRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListGroupResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionListGroupResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListGroupResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListGroupResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListGroupResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListGroupResponseToResponseContent(name: string, value: Api.CorrectionListGroupResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListGroupResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListGroupResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListGroupResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListGroupResponseFromRequest(name: string, value: any): Api.CorrectionListGroupResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListGroupResponse = modelApiCorrectionListGroupResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListGroupResponseToResponse(name: string, value: Api.CorrectionListGroupResponse): ToResponse<Api.CorrectionListGroupResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListGroupResponse> = modelApiCorrectionListGroupResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListGroupResponseBodyKeys: string[] = ['status', 'list', 'page']

function modelApiCorrectionListGroupResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListGroupResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListGroupResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionGroupMetaDataFromRequest))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionListGroupResponseBodyToResponseContent(name: string, value: Api.CorrectionListGroupResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListGroupResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListGroupResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionGroupMetaDataToResponse))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionListGroupResponseBodyFromRequest(name: string, value: any): Api.CorrectionListGroupResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListGroupResponseBody = modelApiCorrectionListGroupResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListGroupResponseBodyToResponse(name: string, value: Api.CorrectionListGroupResponseBody): ToResponse<Api.CorrectionListGroupResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListGroupResponseBody> = modelApiCorrectionListGroupResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionListTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListTaskRequestToResponseContent(name: string, value: Api.CorrectionListTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListTaskRequestFromRequest(name: string, value: any): Api.CorrectionListTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskRequest = modelApiCorrectionListTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskRequestToResponse(name: string, value: Api.CorrectionListTaskRequest): ToResponse<Api.CorrectionListTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskRequest> = modelApiCorrectionListTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskRequestBodyKeys: string[] = ['condition', 'page']

function modelApiCorrectionListTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskRequestBody = {
		'condition': allowUndefined(modelApiCorrectionTaskListConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionListTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionListTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskRequestBody> = {
		'condition': allowUndefined(modelApiCorrectionTaskListConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionListTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionListTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskRequestBody = modelApiCorrectionListTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskRequestBodyToResponse(name: string, value: Api.CorrectionListTaskRequestBody): ToResponse<Api.CorrectionListTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskRequestBody> = modelApiCorrectionListTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionListTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListTaskResponseToResponseContent(name: string, value: Api.CorrectionListTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListTaskResponseFromRequest(name: string, value: any): Api.CorrectionListTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskResponse = modelApiCorrectionListTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskResponseToResponse(name: string, value: Api.CorrectionListTaskResponse): ToResponse<Api.CorrectionListTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskResponse> = modelApiCorrectionListTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskResponseBodyKeys: string[] = ['status', 'list', 'page']

function modelApiCorrectionListTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiApicorrectionTaskMetadataFromRequest))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionListTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionListTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiApicorrectionTaskMetadataToResponse))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionListTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionListTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskResponseBody = modelApiCorrectionListTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskResponseBodyToResponse(name: string, value: Api.CorrectionListTaskResponseBody): ToResponse<Api.CorrectionListTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskResponseBody> = modelApiCorrectionListTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskTagRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionListTaskTagRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskTagRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskTagRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskTagRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListTaskTagRequestToResponseContent(name: string, value: Api.CorrectionListTaskTagRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskTagRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskTagRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskTagRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListTaskTagRequestFromRequest(name: string, value: any): Api.CorrectionListTaskTagRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskTagRequest = modelApiCorrectionListTaskTagRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskTagRequestToResponse(name: string, value: Api.CorrectionListTaskTagRequest): ToResponse<Api.CorrectionListTaskTagRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskTagRequest> = modelApiCorrectionListTaskTagRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskTagRequestBodyKeys: string[] = ['did']

function modelApiCorrectionListTaskTagRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskTagRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskTagRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiCorrectionListTaskTagRequestBodyToResponseContent(name: string, value: Api.CorrectionListTaskTagRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskTagRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskTagRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiCorrectionListTaskTagRequestBodyFromRequest(name: string, value: any): Api.CorrectionListTaskTagRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskTagRequestBody = modelApiCorrectionListTaskTagRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskTagRequestBodyToResponse(name: string, value: Api.CorrectionListTaskTagRequestBody): ToResponse<Api.CorrectionListTaskTagRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskTagRequestBody> = modelApiCorrectionListTaskTagRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskTagResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionListTaskTagResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskTagResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskTagResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskTagResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListTaskTagResponseToResponseContent(name: string, value: Api.CorrectionListTaskTagResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskTagResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskTagResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListTaskTagResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListTaskTagResponseFromRequest(name: string, value: any): Api.CorrectionListTaskTagResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskTagResponse = modelApiCorrectionListTaskTagResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskTagResponseToResponse(name: string, value: Api.CorrectionListTaskTagResponse): ToResponse<Api.CorrectionListTaskTagResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskTagResponse> = modelApiCorrectionListTaskTagResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListTaskTagResponseBodyKeys: string[] = ['status', 'list']

function modelApiCorrectionListTaskTagResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListTaskTagResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListTaskTagResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionTaskTagMetadataFromRequest))(`${name}.list`, value['list']),
	}

	return result
}

function modelApiCorrectionListTaskTagResponseBodyToResponseContent(name: string, value: Api.CorrectionListTaskTagResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListTaskTagResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListTaskTagResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionTaskTagMetadataToResponse))(`${name}.list`, value['list']),
	}

	return result
}

export function modelApiCorrectionListTaskTagResponseBodyFromRequest(name: string, value: any): Api.CorrectionListTaskTagResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListTaskTagResponseBody = modelApiCorrectionListTaskTagResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListTaskTagResponseBodyToResponse(name: string, value: Api.CorrectionListTaskTagResponseBody): ToResponse<Api.CorrectionListTaskTagResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListTaskTagResponseBody> = modelApiCorrectionListTaskTagResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListWarehouseRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionListWarehouseRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListWarehouseRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListWarehouseRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListWarehouseRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListWarehouseRequestToResponseContent(name: string, value: Api.CorrectionListWarehouseRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListWarehouseRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListWarehouseRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListWarehouseRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListWarehouseRequestFromRequest(name: string, value: any): Api.CorrectionListWarehouseRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListWarehouseRequest = modelApiCorrectionListWarehouseRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListWarehouseRequestToResponse(name: string, value: Api.CorrectionListWarehouseRequest): ToResponse<Api.CorrectionListWarehouseRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListWarehouseRequest> = modelApiCorrectionListWarehouseRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListWarehouseRequestBodyKeys: string[] = ['did', 'taskUid', 'pageIndex', 'pageSize']

function modelApiCorrectionListWarehouseRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListWarehouseRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListWarehouseRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'taskUid': allowUndefined(stringFromRequest)(`${name}.taskUid`, value['taskUid']),
		'pageIndex': allowUndefined(integerFromRequest)(`${name}.pageIndex`, value['pageIndex']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiCorrectionListWarehouseRequestBodyToResponseContent(name: string, value: Api.CorrectionListWarehouseRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListWarehouseRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListWarehouseRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'taskUid': allowUndefined(stringToResponse)(`${name}.taskUid`, value['taskUid']),
		'pageIndex': allowUndefined(integerToResponse)(`${name}.pageIndex`, value['pageIndex']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiCorrectionListWarehouseRequestBodyFromRequest(name: string, value: any): Api.CorrectionListWarehouseRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListWarehouseRequestBody = modelApiCorrectionListWarehouseRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListWarehouseRequestBodyToResponse(name: string, value: Api.CorrectionListWarehouseRequestBody): ToResponse<Api.CorrectionListWarehouseRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListWarehouseRequestBody> = modelApiCorrectionListWarehouseRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListWarehouseResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionListWarehouseResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListWarehouseResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListWarehouseResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListWarehouseResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionListWarehouseResponseToResponseContent(name: string, value: Api.CorrectionListWarehouseResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListWarehouseResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListWarehouseResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionListWarehouseResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionListWarehouseResponseFromRequest(name: string, value: any): Api.CorrectionListWarehouseResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListWarehouseResponse = modelApiCorrectionListWarehouseResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListWarehouseResponseToResponse(name: string, value: Api.CorrectionListWarehouseResponse): ToResponse<Api.CorrectionListWarehouseResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListWarehouseResponse> = modelApiCorrectionListWarehouseResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionListWarehouseResponseBodyKeys: string[] = ['status', 'list', 'total']

function modelApiCorrectionListWarehouseResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionListWarehouseResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionListWarehouseResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionWarehouseMetadataFromRequest))(`${name}.list`, value['list']),
		'total': allowUndefined(stringFromRequest)(`${name}.total`, value['total']),
	}

	return result
}

function modelApiCorrectionListWarehouseResponseBodyToResponseContent(name: string, value: Api.CorrectionListWarehouseResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionListWarehouseResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionListWarehouseResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionListWarehouseResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionWarehouseMetadataToResponse))(`${name}.list`, value['list']),
		'total': allowUndefined(stringToResponse)(`${name}.total`, value['total']),
	}

	return result
}

export function modelApiCorrectionListWarehouseResponseBodyFromRequest(name: string, value: any): Api.CorrectionListWarehouseResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionListWarehouseResponseBody = modelApiCorrectionListWarehouseResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionListWarehouseResponseBodyToResponse(name: string, value: Api.CorrectionListWarehouseResponseBody): ToResponse<Api.CorrectionListWarehouseResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionListWarehouseResponseBody> = modelApiCorrectionListWarehouseResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionListWarehouseResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMakeCorrectionRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMakeCorrectionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMakeCorrectionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMakeCorrectionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMakeCorrectionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMakeCorrectionRequestToResponseContent(name: string, value: Api.CorrectionMakeCorrectionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMakeCorrectionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMakeCorrectionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMakeCorrectionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMakeCorrectionRequestFromRequest(name: string, value: any): Api.CorrectionMakeCorrectionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMakeCorrectionRequest = modelApiCorrectionMakeCorrectionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMakeCorrectionRequestToResponse(name: string, value: Api.CorrectionMakeCorrectionRequest): ToResponse<Api.CorrectionMakeCorrectionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMakeCorrectionRequest> = modelApiCorrectionMakeCorrectionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMakeCorrectionRequestBodyKeys: string[] = ['qa']

function modelApiCorrectionMakeCorrectionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMakeCorrectionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMakeCorrectionRequestBody = {
		'qa': allowUndefined(stringFromRequest)(`${name}.qa`, value['qa']),
	}

	return result
}

function modelApiCorrectionMakeCorrectionRequestBodyToResponseContent(name: string, value: Api.CorrectionMakeCorrectionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMakeCorrectionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMakeCorrectionRequestBody> = {
		'qa': allowUndefined(stringToResponse)(`${name}.qa`, value['qa']),
	}

	return result
}

export function modelApiCorrectionMakeCorrectionRequestBodyFromRequest(name: string, value: any): Api.CorrectionMakeCorrectionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMakeCorrectionRequestBody = modelApiCorrectionMakeCorrectionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMakeCorrectionRequestBodyToResponse(name: string, value: Api.CorrectionMakeCorrectionRequestBody): ToResponse<Api.CorrectionMakeCorrectionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMakeCorrectionRequestBody> = modelApiCorrectionMakeCorrectionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMakeCorrectionResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMakeCorrectionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMakeCorrectionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMakeCorrectionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMakeCorrectionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMakeCorrectionResponseToResponseContent(name: string, value: Api.CorrectionMakeCorrectionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMakeCorrectionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMakeCorrectionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMakeCorrectionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMakeCorrectionResponseFromRequest(name: string, value: any): Api.CorrectionMakeCorrectionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMakeCorrectionResponse = modelApiCorrectionMakeCorrectionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMakeCorrectionResponseToResponse(name: string, value: Api.CorrectionMakeCorrectionResponse): ToResponse<Api.CorrectionMakeCorrectionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMakeCorrectionResponse> = modelApiCorrectionMakeCorrectionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMakeCorrectionResponseBodyKeys: string[] = ['status']

function modelApiCorrectionMakeCorrectionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMakeCorrectionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMakeCorrectionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionMakeCorrectionResponseBodyToResponseContent(name: string, value: Api.CorrectionMakeCorrectionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMakeCorrectionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMakeCorrectionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMakeCorrectionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionMakeCorrectionResponseBodyFromRequest(name: string, value: any): Api.CorrectionMakeCorrectionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMakeCorrectionResponseBody = modelApiCorrectionMakeCorrectionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMakeCorrectionResponseBodyToResponse(name: string, value: Api.CorrectionMakeCorrectionResponseBody): ToResponse<Api.CorrectionMakeCorrectionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMakeCorrectionResponseBody> = modelApiCorrectionMakeCorrectionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMakeCorrectionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMarkAsReadRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMarkAsReadRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMarkAsReadRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMarkAsReadRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMarkAsReadRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMarkAsReadRequestToResponseContent(name: string, value: Api.CorrectionMarkAsReadRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMarkAsReadRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMarkAsReadRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMarkAsReadRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMarkAsReadRequestFromRequest(name: string, value: any): Api.CorrectionMarkAsReadRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMarkAsReadRequest = modelApiCorrectionMarkAsReadRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMarkAsReadRequestToResponse(name: string, value: Api.CorrectionMarkAsReadRequest): ToResponse<Api.CorrectionMarkAsReadRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMarkAsReadRequest> = modelApiCorrectionMarkAsReadRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMarkAsReadRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionMarkAsReadRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMarkAsReadRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMarkAsReadRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionMarkAsReadRequestBodyToResponseContent(name: string, value: Api.CorrectionMarkAsReadRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMarkAsReadRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMarkAsReadRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionMarkAsReadRequestBodyFromRequest(name: string, value: any): Api.CorrectionMarkAsReadRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMarkAsReadRequestBody = modelApiCorrectionMarkAsReadRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMarkAsReadRequestBodyToResponse(name: string, value: Api.CorrectionMarkAsReadRequestBody): ToResponse<Api.CorrectionMarkAsReadRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMarkAsReadRequestBody> = modelApiCorrectionMarkAsReadRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMarkAsReadResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMarkAsReadResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMarkAsReadResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMarkAsReadResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMarkAsReadResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMarkAsReadResponseToResponseContent(name: string, value: Api.CorrectionMarkAsReadResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMarkAsReadResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMarkAsReadResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMarkAsReadResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMarkAsReadResponseFromRequest(name: string, value: any): Api.CorrectionMarkAsReadResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMarkAsReadResponse = modelApiCorrectionMarkAsReadResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMarkAsReadResponseToResponse(name: string, value: Api.CorrectionMarkAsReadResponse): ToResponse<Api.CorrectionMarkAsReadResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMarkAsReadResponse> = modelApiCorrectionMarkAsReadResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMarkAsReadResponseBodyKeys: string[] = ['status']

function modelApiCorrectionMarkAsReadResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMarkAsReadResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMarkAsReadResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionMarkAsReadResponseBodyToResponseContent(name: string, value: Api.CorrectionMarkAsReadResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMarkAsReadResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMarkAsReadResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMarkAsReadResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionMarkAsReadResponseBodyFromRequest(name: string, value: any): Api.CorrectionMarkAsReadResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMarkAsReadResponseBody = modelApiCorrectionMarkAsReadResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMarkAsReadResponseBodyToResponse(name: string, value: Api.CorrectionMarkAsReadResponseBody): ToResponse<Api.CorrectionMarkAsReadResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMarkAsReadResponseBody> = modelApiCorrectionMarkAsReadResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMarkAsReadResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMessageListRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMessageListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMessageListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMessageListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMessageListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMessageListRequestToResponseContent(name: string, value: Api.CorrectionMessageListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMessageListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMessageListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMessageListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMessageListRequestFromRequest(name: string, value: any): Api.CorrectionMessageListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMessageListRequest = modelApiCorrectionMessageListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMessageListRequestToResponse(name: string, value: Api.CorrectionMessageListRequest): ToResponse<Api.CorrectionMessageListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMessageListRequest> = modelApiCorrectionMessageListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMessageListRequestBodyKeys: string[] = ['page']

function modelApiCorrectionMessageListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMessageListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMessageListRequestBody = {
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionMessageListRequestBodyToResponseContent(name: string, value: Api.CorrectionMessageListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMessageListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMessageListRequestBody> = {
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionMessageListRequestBodyFromRequest(name: string, value: any): Api.CorrectionMessageListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMessageListRequestBody = modelApiCorrectionMessageListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMessageListRequestBodyToResponse(name: string, value: Api.CorrectionMessageListRequestBody): ToResponse<Api.CorrectionMessageListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMessageListRequestBody> = modelApiCorrectionMessageListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMessageListResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMessageListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMessageListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMessageListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMessageListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMessageListResponseToResponseContent(name: string, value: Api.CorrectionMessageListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMessageListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMessageListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMessageListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMessageListResponseFromRequest(name: string, value: any): Api.CorrectionMessageListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMessageListResponse = modelApiCorrectionMessageListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMessageListResponseToResponse(name: string, value: Api.CorrectionMessageListResponse): ToResponse<Api.CorrectionMessageListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMessageListResponse> = modelApiCorrectionMessageListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMessageListResponseBodyKeys: string[] = ['status', 'list', 'page']

function modelApiCorrectionMessageListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMessageListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMessageListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionMessageMetadataFromRequest))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiCorrectionMessageListResponseBodyToResponseContent(name: string, value: Api.CorrectionMessageListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMessageListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMessageListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionMessageMetadataToResponse))(`${name}.list`, value['list']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiCorrectionMessageListResponseBodyFromRequest(name: string, value: any): Api.CorrectionMessageListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMessageListResponseBody = modelApiCorrectionMessageListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMessageListResponseBodyToResponse(name: string, value: Api.CorrectionMessageListResponseBody): ToResponse<Api.CorrectionMessageListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMessageListResponseBody> = modelApiCorrectionMessageListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMessageMetadataKeys: string[] = ['uid', 'title', 'type', 'content', 'createdAt', 'updatedAt', 'isDeleted']

function modelApiCorrectionMessageMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMessageMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMessageMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'title': allowUndefined(stringFromRequest)(`${name}.title`, value['title']),
		'type': allowUndefined(integerFromRequest)(`${name}.type`, value['type']),
		'content': allowUndefined(stringFromRequest)(`${name}.content`, value['content']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

function modelApiCorrectionMessageMetadataToResponseContent(name: string, value: Api.CorrectionMessageMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMessageMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMessageMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMessageMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'title': allowUndefined(stringToResponse)(`${name}.title`, value['title']),
		'type': allowUndefined(integerToResponse)(`${name}.type`, value['type']),
		'content': allowUndefined(stringToResponse)(`${name}.content`, value['content']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

export function modelApiCorrectionMessageMetadataFromRequest(name: string, value: any): Api.CorrectionMessageMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMessageMetadata = modelApiCorrectionMessageMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMessageMetadataToResponse(name: string, value: Api.CorrectionMessageMetadata): ToResponse<Api.CorrectionMessageMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMessageMetadata> = modelApiCorrectionMessageMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMessageMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAddRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesAddRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAddRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAddRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAddRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesAddRequestToResponseContent(name: string, value: Api.CorrectionMistakesAddRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAddRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAddRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAddRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesAddRequestFromRequest(name: string, value: any): Api.CorrectionMistakesAddRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAddRequest = modelApiCorrectionMistakesAddRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAddRequestToResponse(name: string, value: Api.CorrectionMistakesAddRequest): ToResponse<Api.CorrectionMistakesAddRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAddRequest> = modelApiCorrectionMistakesAddRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAddRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionMistakesAddRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAddRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAddRequestBody = {
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionMistakesAddRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesAddRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAddRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAddRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionMistakesAddRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesAddRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAddRequestBody = modelApiCorrectionMistakesAddRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAddRequestBodyToResponse(name: string, value: Api.CorrectionMistakesAddRequestBody): ToResponse<Api.CorrectionMistakesAddRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAddRequestBody> = modelApiCorrectionMistakesAddRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAddResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesAddResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAddResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAddResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAddResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesAddResponseToResponseContent(name: string, value: Api.CorrectionMistakesAddResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAddResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAddResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAddResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesAddResponseFromRequest(name: string, value: any): Api.CorrectionMistakesAddResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAddResponse = modelApiCorrectionMistakesAddResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAddResponseToResponse(name: string, value: Api.CorrectionMistakesAddResponse): ToResponse<Api.CorrectionMistakesAddResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAddResponse> = modelApiCorrectionMistakesAddResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAddResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionMistakesAddResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAddResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAddResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionMistakesAddResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesAddResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAddResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAddResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAddResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionMistakesAddResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesAddResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAddResponseBody = modelApiCorrectionMistakesAddResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAddResponseBodyToResponse(name: string, value: Api.CorrectionMistakesAddResponseBody): ToResponse<Api.CorrectionMistakesAddResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAddResponseBody> = modelApiCorrectionMistakesAddResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAddResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAnalysisRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesAnalysisRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAnalysisRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAnalysisRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAnalysisRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesAnalysisRequestToResponseContent(name: string, value: Api.CorrectionMistakesAnalysisRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAnalysisRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAnalysisRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAnalysisRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisRequestFromRequest(name: string, value: any): Api.CorrectionMistakesAnalysisRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAnalysisRequest = modelApiCorrectionMistakesAnalysisRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisRequestToResponse(name: string, value: Api.CorrectionMistakesAnalysisRequest): ToResponse<Api.CorrectionMistakesAnalysisRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAnalysisRequest> = modelApiCorrectionMistakesAnalysisRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAnalysisRequestBodyKeys: string[] = ['qa']

function modelApiCorrectionMistakesAnalysisRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAnalysisRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAnalysisRequestBody = {
		'qa': allowUndefined(stringFromRequest)(`${name}.qa`, value['qa']),
	}

	return result
}

function modelApiCorrectionMistakesAnalysisRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesAnalysisRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAnalysisRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAnalysisRequestBody> = {
		'qa': allowUndefined(stringToResponse)(`${name}.qa`, value['qa']),
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesAnalysisRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAnalysisRequestBody = modelApiCorrectionMistakesAnalysisRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisRequestBodyToResponse(name: string, value: Api.CorrectionMistakesAnalysisRequestBody): ToResponse<Api.CorrectionMistakesAnalysisRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAnalysisRequestBody> = modelApiCorrectionMistakesAnalysisRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAnalysisResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesAnalysisResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAnalysisResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAnalysisResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAnalysisResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesAnalysisResponseToResponseContent(name: string, value: Api.CorrectionMistakesAnalysisResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAnalysisResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAnalysisResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesAnalysisResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisResponseFromRequest(name: string, value: any): Api.CorrectionMistakesAnalysisResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAnalysisResponse = modelApiCorrectionMistakesAnalysisResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisResponseToResponse(name: string, value: Api.CorrectionMistakesAnalysisResponse): ToResponse<Api.CorrectionMistakesAnalysisResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAnalysisResponse> = modelApiCorrectionMistakesAnalysisResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesAnalysisResponseBodyKeys: string[] = ['status']

function modelApiCorrectionMistakesAnalysisResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesAnalysisResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesAnalysisResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionMistakesAnalysisResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesAnalysisResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesAnalysisResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesAnalysisResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesAnalysisResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesAnalysisResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesAnalysisResponseBody = modelApiCorrectionMistakesAnalysisResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesAnalysisResponseBodyToResponse(name: string, value: Api.CorrectionMistakesAnalysisResponseBody): ToResponse<Api.CorrectionMistakesAnalysisResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesAnalysisResponseBody> = modelApiCorrectionMistakesAnalysisResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesAnalysisResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesDetailRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesDetailRequestToResponseContent(name: string, value: Api.CorrectionMistakesDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesDetailRequestFromRequest(name: string, value: any): Api.CorrectionMistakesDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesDetailRequest = modelApiCorrectionMistakesDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesDetailRequestToResponse(name: string, value: Api.CorrectionMistakesDetailRequest): ToResponse<Api.CorrectionMistakesDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesDetailRequest> = modelApiCorrectionMistakesDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesDetailRequestBodyKeys: string[] = ['uid']

function modelApiCorrectionMistakesDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiCorrectionMistakesDetailRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiCorrectionMistakesDetailRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesDetailRequestBody = modelApiCorrectionMistakesDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesDetailRequestBodyToResponse(name: string, value: Api.CorrectionMistakesDetailRequestBody): ToResponse<Api.CorrectionMistakesDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesDetailRequestBody> = modelApiCorrectionMistakesDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesDetailResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesDetailResponseToResponseContent(name: string, value: Api.CorrectionMistakesDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesDetailResponseFromRequest(name: string, value: any): Api.CorrectionMistakesDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesDetailResponse = modelApiCorrectionMistakesDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesDetailResponseToResponse(name: string, value: Api.CorrectionMistakesDetailResponse): ToResponse<Api.CorrectionMistakesDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesDetailResponse> = modelApiCorrectionMistakesDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesDetailResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionMistakesDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionMistakesDetailResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionMistakesMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionMistakesDetailResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesDetailResponseBody = modelApiCorrectionMistakesDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesDetailResponseBodyToResponse(name: string, value: Api.CorrectionMistakesDetailResponseBody): ToResponse<Api.CorrectionMistakesDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesDetailResponseBody> = modelApiCorrectionMistakesDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesListRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesListRequestToResponseContent(name: string, value: Api.CorrectionMistakesListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesListRequestFromRequest(name: string, value: any): Api.CorrectionMistakesListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesListRequest = modelApiCorrectionMistakesListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesListRequestToResponse(name: string, value: Api.CorrectionMistakesListRequest): ToResponse<Api.CorrectionMistakesListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesListRequest> = modelApiCorrectionMistakesListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesListRequestBodyKeys: string[] = ['testPaperUid']

function modelApiCorrectionMistakesListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesListRequestBody = {
		'testPaperUid': allowUndefined(stringFromRequest)(`${name}.testPaperUid`, value['testPaperUid']),
	}

	return result
}

function modelApiCorrectionMistakesListRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesListRequestBody> = {
		'testPaperUid': allowUndefined(stringToResponse)(`${name}.testPaperUid`, value['testPaperUid']),
	}

	return result
}

export function modelApiCorrectionMistakesListRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesListRequestBody = modelApiCorrectionMistakesListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesListRequestBodyToResponse(name: string, value: Api.CorrectionMistakesListRequestBody): ToResponse<Api.CorrectionMistakesListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesListRequestBody> = modelApiCorrectionMistakesListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesListResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesListResponseToResponseContent(name: string, value: Api.CorrectionMistakesListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesListResponseFromRequest(name: string, value: any): Api.CorrectionMistakesListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesListResponse = modelApiCorrectionMistakesListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesListResponseToResponse(name: string, value: Api.CorrectionMistakesListResponse): ToResponse<Api.CorrectionMistakesListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesListResponse> = modelApiCorrectionMistakesListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesListResponseBodyKeys: string[] = ['status', 'list']

function modelApiCorrectionMistakesListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiCorrectionMistakesMetadataFromRequest))(`${name}.list`, value['list']),
	}

	return result
}

function modelApiCorrectionMistakesListResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiCorrectionMistakesMetadataToResponse))(`${name}.list`, value['list']),
	}

	return result
}

export function modelApiCorrectionMistakesListResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesListResponseBody = modelApiCorrectionMistakesListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesListResponseBodyToResponse(name: string, value: Api.CorrectionMistakesListResponseBody): ToResponse<Api.CorrectionMistakesListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesListResponseBody> = modelApiCorrectionMistakesListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesMetadataKeys: string[] = ['uid', 'subject', 'testPaperUid', 'question', 'answer', 'createdAt', 'updatedAt', 'isDeleted']

function modelApiCorrectionMistakesMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'subject': allowUndefined(stringFromRequest)(`${name}.subject`, value['subject']),
		'testPaperUid': allowUndefined(stringFromRequest)(`${name}.testPaperUid`, value['testPaperUid']),
		'question': allowUndefined(stringFromRequest)(`${name}.question`, value['question']),
		'answer': allowUndefined(stringFromRequest)(`${name}.answer`, value['answer']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

function modelApiCorrectionMistakesMetadataToResponseContent(name: string, value: Api.CorrectionMistakesMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'subject': allowUndefined(stringToResponse)(`${name}.subject`, value['subject']),
		'testPaperUid': allowUndefined(stringToResponse)(`${name}.testPaperUid`, value['testPaperUid']),
		'question': allowUndefined(stringToResponse)(`${name}.question`, value['question']),
		'answer': allowUndefined(stringToResponse)(`${name}.answer`, value['answer']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

export function modelApiCorrectionMistakesMetadataFromRequest(name: string, value: any): Api.CorrectionMistakesMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesMetadata = modelApiCorrectionMistakesMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesMetadataToResponse(name: string, value: Api.CorrectionMistakesMetadata): ToResponse<Api.CorrectionMistakesMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesMetadata> = modelApiCorrectionMistakesMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesPrintRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesPrintRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesPrintRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesPrintRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesPrintRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesPrintRequestToResponseContent(name: string, value: Api.CorrectionMistakesPrintRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesPrintRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesPrintRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesPrintRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesPrintRequestFromRequest(name: string, value: any): Api.CorrectionMistakesPrintRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesPrintRequest = modelApiCorrectionMistakesPrintRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesPrintRequestToResponse(name: string, value: Api.CorrectionMistakesPrintRequest): ToResponse<Api.CorrectionMistakesPrintRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesPrintRequest> = modelApiCorrectionMistakesPrintRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesPrintRequestBodyKeys: string[] = ['qa']

function modelApiCorrectionMistakesPrintRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesPrintRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesPrintRequestBody = {
		'qa': allowUndefined(stringFromRequest)(`${name}.qa`, value['qa']),
	}

	return result
}

function modelApiCorrectionMistakesPrintRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesPrintRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesPrintRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesPrintRequestBody> = {
		'qa': allowUndefined(stringToResponse)(`${name}.qa`, value['qa']),
	}

	return result
}

export function modelApiCorrectionMistakesPrintRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesPrintRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesPrintRequestBody = modelApiCorrectionMistakesPrintRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesPrintRequestBodyToResponse(name: string, value: Api.CorrectionMistakesPrintRequestBody): ToResponse<Api.CorrectionMistakesPrintRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesPrintRequestBody> = modelApiCorrectionMistakesPrintRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesPrintResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesPrintResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesPrintResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesPrintResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesPrintResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesPrintResponseToResponseContent(name: string, value: Api.CorrectionMistakesPrintResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesPrintResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesPrintResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesPrintResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesPrintResponseFromRequest(name: string, value: any): Api.CorrectionMistakesPrintResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesPrintResponse = modelApiCorrectionMistakesPrintResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesPrintResponseToResponse(name: string, value: Api.CorrectionMistakesPrintResponse): ToResponse<Api.CorrectionMistakesPrintResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesPrintResponse> = modelApiCorrectionMistakesPrintResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesPrintResponseBodyKeys: string[] = ['status']

function modelApiCorrectionMistakesPrintResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesPrintResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesPrintResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionMistakesPrintResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesPrintResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesPrintResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesPrintResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesPrintResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionMistakesPrintResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesPrintResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesPrintResponseBody = modelApiCorrectionMistakesPrintResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesPrintResponseBodyToResponse(name: string, value: Api.CorrectionMistakesPrintResponseBody): ToResponse<Api.CorrectionMistakesPrintResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesPrintResponseBody> = modelApiCorrectionMistakesPrintResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesPrintResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesSubmitRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesSubmitRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesSubmitRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesSubmitRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesSubmitRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesSubmitRequestToResponseContent(name: string, value: Api.CorrectionMistakesSubmitRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesSubmitRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesSubmitRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesSubmitRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesSubmitRequestFromRequest(name: string, value: any): Api.CorrectionMistakesSubmitRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesSubmitRequest = modelApiCorrectionMistakesSubmitRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesSubmitRequestToResponse(name: string, value: Api.CorrectionMistakesSubmitRequest): ToResponse<Api.CorrectionMistakesSubmitRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesSubmitRequest> = modelApiCorrectionMistakesSubmitRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesSubmitRequestBodyKeys: string[] = ['qa']

function modelApiCorrectionMistakesSubmitRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesSubmitRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesSubmitRequestBody = {
		'qa': allowUndefined(stringFromRequest)(`${name}.qa`, value['qa']),
	}

	return result
}

function modelApiCorrectionMistakesSubmitRequestBodyToResponseContent(name: string, value: Api.CorrectionMistakesSubmitRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesSubmitRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesSubmitRequestBody> = {
		'qa': allowUndefined(stringToResponse)(`${name}.qa`, value['qa']),
	}

	return result
}

export function modelApiCorrectionMistakesSubmitRequestBodyFromRequest(name: string, value: any): Api.CorrectionMistakesSubmitRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesSubmitRequestBody = modelApiCorrectionMistakesSubmitRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesSubmitRequestBodyToResponse(name: string, value: Api.CorrectionMistakesSubmitRequestBody): ToResponse<Api.CorrectionMistakesSubmitRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesSubmitRequestBody> = modelApiCorrectionMistakesSubmitRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesSubmitResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionMistakesSubmitResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesSubmitResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesSubmitResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesSubmitResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionMistakesSubmitResponseToResponseContent(name: string, value: Api.CorrectionMistakesSubmitResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesSubmitResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesSubmitResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionMistakesSubmitResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionMistakesSubmitResponseFromRequest(name: string, value: any): Api.CorrectionMistakesSubmitResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesSubmitResponse = modelApiCorrectionMistakesSubmitResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesSubmitResponseToResponse(name: string, value: Api.CorrectionMistakesSubmitResponse): ToResponse<Api.CorrectionMistakesSubmitResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesSubmitResponse> = modelApiCorrectionMistakesSubmitResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionMistakesSubmitResponseBodyKeys: string[] = ['status']

function modelApiCorrectionMistakesSubmitResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionMistakesSubmitResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionMistakesSubmitResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionMistakesSubmitResponseBodyToResponseContent(name: string, value: Api.CorrectionMistakesSubmitResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionMistakesSubmitResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionMistakesSubmitResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionMistakesSubmitResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionMistakesSubmitResponseBodyFromRequest(name: string, value: any): Api.CorrectionMistakesSubmitResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionMistakesSubmitResponseBody = modelApiCorrectionMistakesSubmitResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionMistakesSubmitResponseBodyToResponse(name: string, value: Api.CorrectionMistakesSubmitResponseBody): ToResponse<Api.CorrectionMistakesSubmitResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionMistakesSubmitResponseBody> = modelApiCorrectionMistakesSubmitResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionMistakesSubmitResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionStudentActionRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionStudentActionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionStudentActionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionStudentActionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionStudentActionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionStudentActionRequestToResponseContent(name: string, value: Api.CorrectionStudentActionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionStudentActionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionStudentActionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionStudentActionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionStudentActionRequestFromRequest(name: string, value: any): Api.CorrectionStudentActionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionStudentActionRequest = modelApiCorrectionStudentActionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionStudentActionRequestToResponse(name: string, value: Api.CorrectionStudentActionRequest): ToResponse<Api.CorrectionStudentActionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionStudentActionRequest> = modelApiCorrectionStudentActionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionStudentActionRequestBodyKeys: string[] = ['taskUid', 'did', 'action']

function modelApiCorrectionStudentActionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionStudentActionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionStudentActionRequestBody = {
		'taskUid': allowUndefined(stringFromRequest)(`${name}.taskUid`, value['taskUid']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'action': allowUndefined(stringFromRequest)(`${name}.action`, value['action']),
	}

	return result
}

function modelApiCorrectionStudentActionRequestBodyToResponseContent(name: string, value: Api.CorrectionStudentActionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionStudentActionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionStudentActionRequestBody> = {
		'taskUid': allowUndefined(stringToResponse)(`${name}.taskUid`, value['taskUid']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'action': allowUndefined(stringToResponse)(`${name}.action`, value['action']),
	}

	return result
}

export function modelApiCorrectionStudentActionRequestBodyFromRequest(name: string, value: any): Api.CorrectionStudentActionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionStudentActionRequestBody = modelApiCorrectionStudentActionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionStudentActionRequestBodyToResponse(name: string, value: Api.CorrectionStudentActionRequestBody): ToResponse<Api.CorrectionStudentActionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionStudentActionRequestBody> = modelApiCorrectionStudentActionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionStudentActionResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionStudentActionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionStudentActionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionStudentActionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionStudentActionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionStudentActionResponseToResponseContent(name: string, value: Api.CorrectionStudentActionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionStudentActionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionStudentActionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionStudentActionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionStudentActionResponseFromRequest(name: string, value: any): Api.CorrectionStudentActionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionStudentActionResponse = modelApiCorrectionStudentActionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionStudentActionResponseToResponse(name: string, value: Api.CorrectionStudentActionResponse): ToResponse<Api.CorrectionStudentActionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionStudentActionResponse> = modelApiCorrectionStudentActionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionStudentActionResponseBodyKeys: string[] = ['status']

function modelApiCorrectionStudentActionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionStudentActionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionStudentActionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiCorrectionStudentActionResponseBodyToResponseContent(name: string, value: Api.CorrectionStudentActionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionStudentActionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionStudentActionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionStudentActionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiCorrectionStudentActionResponseBodyFromRequest(name: string, value: any): Api.CorrectionStudentActionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionStudentActionResponseBody = modelApiCorrectionStudentActionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionStudentActionResponseBodyToResponse(name: string, value: Api.CorrectionStudentActionResponseBody): ToResponse<Api.CorrectionStudentActionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionStudentActionResponseBody> = modelApiCorrectionStudentActionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionStudentActionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTagCountMetaKeys: string[] = ['tagUid', 'tagName', 'count']

function modelApiCorrectionTagCountMetaFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTagCountMeta {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountMetaKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTagCountMeta = {
		'tagUid': allowUndefined(stringFromRequest)(`${name}.tagUid`, value['tagUid']),
		'tagName': allowUndefined(stringFromRequest)(`${name}.tagName`, value['tagName']),
		'count': allowUndefined(stringFromRequest)(`${name}.count`, value['count']),
	}

	return result
}

function modelApiCorrectionTagCountMetaToResponseContent(name: string, value: Api.CorrectionTagCountMeta, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTagCountMeta> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountMetaKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTagCountMeta> = {
		'tagUid': allowUndefined(stringToResponse)(`${name}.tagUid`, value['tagUid']),
		'tagName': allowUndefined(stringToResponse)(`${name}.tagName`, value['tagName']),
		'count': allowUndefined(stringToResponse)(`${name}.count`, value['count']),
	}

	return result
}

export function modelApiCorrectionTagCountMetaFromRequest(name: string, value: any): Api.CorrectionTagCountMeta {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTagCountMeta = modelApiCorrectionTagCountMetaFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountMeta: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTagCountMetaToResponse(name: string, value: Api.CorrectionTagCountMeta): ToResponse<Api.CorrectionTagCountMeta> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTagCountMeta> = modelApiCorrectionTagCountMetaToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountMeta: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTagCountTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionTagCountTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTagCountTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTagCountTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionTagCountTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionTagCountTaskRequestToResponseContent(name: string, value: Api.CorrectionTagCountTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTagCountTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTagCountTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionTagCountTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionTagCountTaskRequestFromRequest(name: string, value: any): Api.CorrectionTagCountTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTagCountTaskRequest = modelApiCorrectionTagCountTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTagCountTaskRequestToResponse(name: string, value: Api.CorrectionTagCountTaskRequest): ToResponse<Api.CorrectionTagCountTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTagCountTaskRequest> = modelApiCorrectionTagCountTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTagCountTaskRequestBodyKeys: string[] = ['did']

function modelApiCorrectionTagCountTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTagCountTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTagCountTaskRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiCorrectionTagCountTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionTagCountTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTagCountTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTagCountTaskRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiCorrectionTagCountTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionTagCountTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTagCountTaskRequestBody = modelApiCorrectionTagCountTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTagCountTaskRequestBodyToResponse(name: string, value: Api.CorrectionTagCountTaskRequestBody): ToResponse<Api.CorrectionTagCountTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTagCountTaskRequestBody> = modelApiCorrectionTagCountTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTagCountTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionTagCountTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTagCountTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTagCountTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionTagCountTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionTagCountTaskResponseToResponseContent(name: string, value: Api.CorrectionTagCountTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTagCountTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTagCountTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionTagCountTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionTagCountTaskResponseFromRequest(name: string, value: any): Api.CorrectionTagCountTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTagCountTaskResponse = modelApiCorrectionTagCountTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTagCountTaskResponseToResponse(name: string, value: Api.CorrectionTagCountTaskResponse): ToResponse<Api.CorrectionTagCountTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTagCountTaskResponse> = modelApiCorrectionTagCountTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTagCountTaskResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionTagCountTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTagCountTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTagCountTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayFromRequest(modelApiCorrectionTagCountMetaFromRequest))(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionTagCountTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionTagCountTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTagCountTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTagCountTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTagCountTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(arrayToResponse(modelApiCorrectionTagCountMetaToResponse))(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionTagCountTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionTagCountTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTagCountTaskResponseBody = modelApiCorrectionTagCountTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTagCountTaskResponseBodyToResponse(name: string, value: Api.CorrectionTagCountTaskResponseBody): ToResponse<Api.CorrectionTagCountTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTagCountTaskResponseBody> = modelApiCorrectionTagCountTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTagCountTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionTaskListConditionKeys: string[] = ['did', 'taskName', 'tagUid', 'status', 'startTime', 'endTime', 'description']

function modelApiCorrectionTaskListConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTaskListCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTaskListConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTaskListCondition = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'taskName': allowUndefined(stringFromRequest)(`${name}.taskName`, value['taskName']),
		'tagUid': allowUndefined(stringFromRequest)(`${name}.tagUid`, value['tagUid']),
		'status': allowUndefined(integerFromRequest)(`${name}.status`, value['status']),
		'startTime': allowUndefined(stringFromRequest)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringFromRequest)(`${name}.endTime`, value['endTime']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
	}

	return result
}

function modelApiCorrectionTaskListConditionToResponseContent(name: string, value: Api.CorrectionTaskListCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTaskListCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTaskListConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTaskListCondition> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'taskName': allowUndefined(stringToResponse)(`${name}.taskName`, value['taskName']),
		'tagUid': allowUndefined(stringToResponse)(`${name}.tagUid`, value['tagUid']),
		'status': allowUndefined(integerToResponse)(`${name}.status`, value['status']),
		'startTime': allowUndefined(stringToResponse)(`${name}.startTime`, value['startTime']),
		'endTime': allowUndefined(stringToResponse)(`${name}.endTime`, value['endTime']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
	}

	return result
}

export function modelApiCorrectionTaskListConditionFromRequest(name: string, value: any): Api.CorrectionTaskListCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTaskListCondition = modelApiCorrectionTaskListConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTaskListCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTaskListConditionToResponse(name: string, value: Api.CorrectionTaskListCondition): ToResponse<Api.CorrectionTaskListCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTaskListCondition> = modelApiCorrectionTaskListConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTaskListCondition: ${key}`
			}
		}
	}

	return result
}

export function enumApiCorrectionTaskStatusEnumFromRequest(name: string, value: any): Api.CorrectionTaskStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CREATED') {
		return Api.CorrectionTaskStatusEnum.CREATED
	}
	if (value === 'WAIT_MARKING') {
		return Api.CorrectionTaskStatusEnum.WAITMARKING
	}
	if (value === 'MARKING') {
		return Api.CorrectionTaskStatusEnum.MARKING
	}
	if (value === 'FINISH_MARKING') {
		return Api.CorrectionTaskStatusEnum.FINISHMARKING
	}
	if (value === 'WAIT_REVISE') {
		return Api.CorrectionTaskStatusEnum.WAITREVISE
	}
	if (value === 'REVISE') {
		return Api.CorrectionTaskStatusEnum.REVISE
	}
	if (value === 'FINISH_REVISE') {
		return Api.CorrectionTaskStatusEnum.FINISHREVISE
	}

	throw `Unexpected enum value for Api.CorrectionTaskStatusEnum: ${value}`
}

export function enumApiCorrectionTaskStatusEnumToResponse(name: string, value: Api.CorrectionTaskStatusEnum): Api.CorrectionTaskStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CREATED') {
		return Api.CorrectionTaskStatusEnum.CREATED
	}
	if (value === 'WAIT_MARKING') {
		return Api.CorrectionTaskStatusEnum.WAITMARKING
	}
	if (value === 'MARKING') {
		return Api.CorrectionTaskStatusEnum.MARKING
	}
	if (value === 'FINISH_MARKING') {
		return Api.CorrectionTaskStatusEnum.FINISHMARKING
	}
	if (value === 'WAIT_REVISE') {
		return Api.CorrectionTaskStatusEnum.WAITREVISE
	}
	if (value === 'REVISE') {
		return Api.CorrectionTaskStatusEnum.REVISE
	}
	if (value === 'FINISH_REVISE') {
		return Api.CorrectionTaskStatusEnum.FINISHREVISE
	}

	throw `Unexpected enum value for Api.CorrectionTaskStatusEnum: ${value}`
}

const ApiCorrectionTaskTagMetadataKeys: string[] = ['uid', 'name', 'did', 'createdAt', 'updatedAt', 'isDeleted']

function modelApiCorrectionTaskTagMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionTaskTagMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTaskTagMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionTaskTagMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

function modelApiCorrectionTaskTagMetadataToResponseContent(name: string, value: Api.CorrectionTaskTagMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionTaskTagMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionTaskTagMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionTaskTagMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
	}

	return result
}

export function modelApiCorrectionTaskTagMetadataFromRequest(name: string, value: any): Api.CorrectionTaskTagMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionTaskTagMetadata = modelApiCorrectionTaskTagMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTaskTagMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionTaskTagMetadataToResponse(name: string, value: Api.CorrectionTaskTagMetadata): ToResponse<Api.CorrectionTaskTagMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionTaskTagMetadata> = modelApiCorrectionTaskTagMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionTaskTagMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateGroupRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateGroupRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateGroupRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateGroupRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateGroupRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateGroupRequestToResponseContent(name: string, value: Api.CorrectionUpdateGroupRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateGroupRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateGroupRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateGroupRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateGroupRequestFromRequest(name: string, value: any): Api.CorrectionUpdateGroupRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateGroupRequest = modelApiCorrectionUpdateGroupRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateGroupRequestToResponse(name: string, value: Api.CorrectionUpdateGroupRequest): ToResponse<Api.CorrectionUpdateGroupRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateGroupRequest> = modelApiCorrectionUpdateGroupRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateGroupRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionUpdateGroupRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateGroupRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateGroupRequestBody = {
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateGroupRequestBodyToResponseContent(name: string, value: Api.CorrectionUpdateGroupRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateGroupRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateGroupRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateGroupRequestBodyFromRequest(name: string, value: any): Api.CorrectionUpdateGroupRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateGroupRequestBody = modelApiCorrectionUpdateGroupRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateGroupRequestBodyToResponse(name: string, value: Api.CorrectionUpdateGroupRequestBody): ToResponse<Api.CorrectionUpdateGroupRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateGroupRequestBody> = modelApiCorrectionUpdateGroupRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateGroupResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateGroupResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateGroupResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateGroupResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateGroupResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateGroupResponseToResponseContent(name: string, value: Api.CorrectionUpdateGroupResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateGroupResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateGroupResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateGroupResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateGroupResponseFromRequest(name: string, value: any): Api.CorrectionUpdateGroupResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateGroupResponse = modelApiCorrectionUpdateGroupResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateGroupResponseToResponse(name: string, value: Api.CorrectionUpdateGroupResponse): ToResponse<Api.CorrectionUpdateGroupResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateGroupResponse> = modelApiCorrectionUpdateGroupResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateGroupResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionUpdateGroupResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateGroupResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateGroupResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateGroupResponseBodyToResponseContent(name: string, value: Api.CorrectionUpdateGroupResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateGroupResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateGroupResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateGroupResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionGroupMetaDataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateGroupResponseBodyFromRequest(name: string, value: any): Api.CorrectionUpdateGroupResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateGroupResponseBody = modelApiCorrectionUpdateGroupResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateGroupResponseBodyToResponse(name: string, value: Api.CorrectionUpdateGroupResponseBody): ToResponse<Api.CorrectionUpdateGroupResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateGroupResponseBody> = modelApiCorrectionUpdateGroupResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateGroupResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateTaskRequestToResponseContent(name: string, value: Api.CorrectionUpdateTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskRequestFromRequest(name: string, value: any): Api.CorrectionUpdateTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskRequest = modelApiCorrectionUpdateTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskRequestToResponse(name: string, value: Api.CorrectionUpdateTaskRequest): ToResponse<Api.CorrectionUpdateTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskRequest> = modelApiCorrectionUpdateTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionUpdateTaskRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskRequestBody = {
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateTaskRequestBodyToResponseContent(name: string, value: Api.CorrectionUpdateTaskRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskRequestBody> = {
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskRequestBodyFromRequest(name: string, value: any): Api.CorrectionUpdateTaskRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskRequestBody = modelApiCorrectionUpdateTaskRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskRequestBodyToResponse(name: string, value: Api.CorrectionUpdateTaskRequestBody): ToResponse<Api.CorrectionUpdateTaskRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskRequestBody> = modelApiCorrectionUpdateTaskRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateTaskResponseToResponseContent(name: string, value: Api.CorrectionUpdateTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskResponseFromRequest(name: string, value: any): Api.CorrectionUpdateTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskResponse = modelApiCorrectionUpdateTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskResponseToResponse(name: string, value: Api.CorrectionUpdateTaskResponse): ToResponse<Api.CorrectionUpdateTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskResponse> = modelApiCorrectionUpdateTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionUpdateTaskResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateTaskResponseBodyToResponseContent(name: string, value: Api.CorrectionUpdateTaskResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiApicorrectionTaskMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskResponseBodyFromRequest(name: string, value: any): Api.CorrectionUpdateTaskResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskResponseBody = modelApiCorrectionUpdateTaskResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskResponseBodyToResponse(name: string, value: Api.CorrectionUpdateTaskResponseBody): ToResponse<Api.CorrectionUpdateTaskResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskResponseBody> = modelApiCorrectionUpdateTaskResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskTagRequestKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateTaskTagRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskTagRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskTagRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskTagRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateTaskTagRequestToResponseContent(name: string, value: Api.CorrectionUpdateTaskTagRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskTagRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskTagRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskTagRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagRequestFromRequest(name: string, value: any): Api.CorrectionUpdateTaskTagRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskTagRequest = modelApiCorrectionUpdateTaskTagRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagRequestToResponse(name: string, value: Api.CorrectionUpdateTaskTagRequest): ToResponse<Api.CorrectionUpdateTaskTagRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskTagRequest> = modelApiCorrectionUpdateTaskTagRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagRequest: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskTagRequestBodyKeys: string[] = ['meta']

function modelApiCorrectionUpdateTaskTagRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskTagRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskTagRequestBody = {
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateTaskTagRequestBodyToResponseContent(name: string, value: Api.CorrectionUpdateTaskTagRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskTagRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskTagRequestBody> = {
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagRequestBodyFromRequest(name: string, value: any): Api.CorrectionUpdateTaskTagRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskTagRequestBody = modelApiCorrectionUpdateTaskTagRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagRequestBodyToResponse(name: string, value: Api.CorrectionUpdateTaskTagRequestBody): ToResponse<Api.CorrectionUpdateTaskTagRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskTagRequestBody> = modelApiCorrectionUpdateTaskTagRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskTagResponseKeys: string[] = ['header', 'body']

function modelApiCorrectionUpdateTaskTagResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskTagResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskTagResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskTagResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiCorrectionUpdateTaskTagResponseToResponseContent(name: string, value: Api.CorrectionUpdateTaskTagResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskTagResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskTagResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiCorrectionUpdateTaskTagResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagResponseFromRequest(name: string, value: any): Api.CorrectionUpdateTaskTagResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskTagResponse = modelApiCorrectionUpdateTaskTagResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagResponseToResponse(name: string, value: Api.CorrectionUpdateTaskTagResponse): ToResponse<Api.CorrectionUpdateTaskTagResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskTagResponse> = modelApiCorrectionUpdateTaskTagResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagResponse: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUpdateTaskTagResponseBodyKeys: string[] = ['status', 'meta']

function modelApiCorrectionUpdateTaskTagResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUpdateTaskTagResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUpdateTaskTagResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataFromRequest)(`${name}.meta`, value['meta']),
	}

	return result
}

function modelApiCorrectionUpdateTaskTagResponseBodyToResponseContent(name: string, value: Api.CorrectionUpdateTaskTagResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUpdateTaskTagResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUpdateTaskTagResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUpdateTaskTagResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'meta': allowUndefined(modelApiCorrectionTaskTagMetadataToResponse)(`${name}.meta`, value['meta']),
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagResponseBodyFromRequest(name: string, value: any): Api.CorrectionUpdateTaskTagResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUpdateTaskTagResponseBody = modelApiCorrectionUpdateTaskTagResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUpdateTaskTagResponseBodyToResponse(name: string, value: Api.CorrectionUpdateTaskTagResponseBody): ToResponse<Api.CorrectionUpdateTaskTagResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUpdateTaskTagResponseBody> = modelApiCorrectionUpdateTaskTagResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUpdateTaskTagResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionUrlMetaDataKeys: string[] = ['index', 'url']

function modelApiCorrectionUrlMetaDataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionUrlMetaData {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUrlMetaDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionUrlMetaData = {
		'index': allowUndefined(integerFromRequest)(`${name}.index`, value['index']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
	}

	return result
}

function modelApiCorrectionUrlMetaDataToResponseContent(name: string, value: Api.CorrectionUrlMetaData, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionUrlMetaData> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionUrlMetaDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionUrlMetaData> = {
		'index': allowUndefined(integerToResponse)(`${name}.index`, value['index']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
	}

	return result
}

export function modelApiCorrectionUrlMetaDataFromRequest(name: string, value: any): Api.CorrectionUrlMetaData {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionUrlMetaData = modelApiCorrectionUrlMetaDataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUrlMetaData: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionUrlMetaDataToResponse(name: string, value: Api.CorrectionUrlMetaData): ToResponse<Api.CorrectionUrlMetaData> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionUrlMetaData> = modelApiCorrectionUrlMetaDataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionUrlMetaData: ${key}`
			}
		}
	}

	return result
}

const ApiCorrectionWarehouseMetadataKeys: string[] = ['uid', 'did', 'url', 'urlMetaData', 'taskUid', 'type', 'createdAt', 'updatedAt', 'isDeleted', 'urlIndex']

function modelApiCorrectionWarehouseMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CorrectionWarehouseMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionWarehouseMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CorrectionWarehouseMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
		'urlMetaData': allowUndefined(arrayFromRequest(modelApiCorrectionUrlMetaDataFromRequest))(`${name}.urlMetaData`, value['urlMetaData']),
		'taskUid': allowUndefined(stringFromRequest)(`${name}.taskUid`, value['taskUid']),
		'type': allowUndefined(enumApiCorrectionImageContentTypeEnumFromRequest)(`${name}.type`, value['type']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanFromRequest)(`${name}.isDeleted`, value['isDeleted']),
		'urlIndex': allowUndefined(integerFromRequest)(`${name}.urlIndex`, value['urlIndex']),
	}

	return result
}

function modelApiCorrectionWarehouseMetadataToResponseContent(name: string, value: Api.CorrectionWarehouseMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.CorrectionWarehouseMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCorrectionWarehouseMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.CorrectionWarehouseMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
		'urlMetaData': allowUndefined(arrayToResponse(modelApiCorrectionUrlMetaDataToResponse))(`${name}.urlMetaData`, value['urlMetaData']),
		'taskUid': allowUndefined(stringToResponse)(`${name}.taskUid`, value['taskUid']),
		'type': allowUndefined(enumApiCorrectionImageContentTypeEnumToResponse)(`${name}.type`, value['type']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'isDeleted': allowUndefined(booleanToResponse)(`${name}.isDeleted`, value['isDeleted']),
		'urlIndex': allowUndefined(integerToResponse)(`${name}.urlIndex`, value['urlIndex']),
	}

	return result
}

export function modelApiCorrectionWarehouseMetadataFromRequest(name: string, value: any): Api.CorrectionWarehouseMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CorrectionWarehouseMetadata = modelApiCorrectionWarehouseMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionWarehouseMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiCorrectionWarehouseMetadataToResponse(name: string, value: Api.CorrectionWarehouseMetadata): ToResponse<Api.CorrectionWarehouseMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.CorrectionWarehouseMetadata> = modelApiCorrectionWarehouseMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.CorrectionWarehouseMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiEventApplyActionEnumFromRequest(name: string, value: any): Api.EventApplyActionEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLY_ACTION_UNKNOWN') {
		return Api.EventApplyActionEnum.APPLYACTIONUNKNOWN
	}
	if (value === 'APPLY_ACTION_PASSED') {
		return Api.EventApplyActionEnum.APPLYACTIONPASSED
	}
	if (value === 'APPLY_ACTION_REFUSED') {
		return Api.EventApplyActionEnum.APPLYACTIONREFUSED
	}

	throw `Unexpected enum value for Api.EventApplyActionEnum: ${value}`
}

export function enumApiEventApplyActionEnumToResponse(name: string, value: Api.EventApplyActionEnum): Api.EventApplyActionEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'APPLY_ACTION_UNKNOWN') {
		return Api.EventApplyActionEnum.APPLYACTIONUNKNOWN
	}
	if (value === 'APPLY_ACTION_PASSED') {
		return Api.EventApplyActionEnum.APPLYACTIONPASSED
	}
	if (value === 'APPLY_ACTION_REFUSED') {
		return Api.EventApplyActionEnum.APPLYACTIONREFUSED
	}

	throw `Unexpected enum value for Api.EventApplyActionEnum: ${value}`
}

const ApiEventApplyContentKeys: string[] = ['applier']

function modelApiEventApplyContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventApplyContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventApplyContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventApplyContent = {
		'applier': allowUndefined(stringFromRequest)(`${name}.applier`, value['applier']),
	}

	return result
}

function modelApiEventApplyContentToResponseContent(name: string, value: Api.EventApplyContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventApplyContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventApplyContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventApplyContent> = {
		'applier': allowUndefined(stringToResponse)(`${name}.applier`, value['applier']),
	}

	return result
}

export function modelApiEventApplyContentFromRequest(name: string, value: any): Api.EventApplyContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventApplyContent = modelApiEventApplyContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventApplyContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventApplyContentToResponse(name: string, value: Api.EventApplyContent): ToResponse<Api.EventApplyContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventApplyContent> = modelApiEventApplyContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventApplyContent: ${key}`
			}
		}
	}

	return result
}

const ApiEventApplyOpinionKeys: string[] = ['action', 'cause', 'processed']

function modelApiEventApplyOpinionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventApplyOpinion {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventApplyOpinionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventApplyOpinion = {
		'action': allowUndefined(enumApiEventApplyActionEnumFromRequest)(`${name}.action`, value['action']),
		'cause': allowUndefined(stringFromRequest)(`${name}.cause`, value['cause']),
		'processed': allowUndefined(stringFromRequest)(`${name}.processed`, value['processed']),
	}

	return result
}

function modelApiEventApplyOpinionToResponseContent(name: string, value: Api.EventApplyOpinion, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventApplyOpinion> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventApplyOpinionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventApplyOpinion> = {
		'action': allowUndefined(enumApiEventApplyActionEnumToResponse)(`${name}.action`, value['action']),
		'cause': allowUndefined(stringToResponse)(`${name}.cause`, value['cause']),
		'processed': allowUndefined(stringToResponse)(`${name}.processed`, value['processed']),
	}

	return result
}

export function modelApiEventApplyOpinionFromRequest(name: string, value: any): Api.EventApplyOpinion {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventApplyOpinion = modelApiEventApplyOpinionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventApplyOpinion: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventApplyOpinionToResponse(name: string, value: Api.EventApplyOpinion): ToResponse<Api.EventApplyOpinion> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventApplyOpinion> = modelApiEventApplyOpinionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventApplyOpinion: ${key}`
			}
		}
	}

	return result
}

const ApiEventConsumeRequestKeys: string[] = ['header', 'body']

function modelApiEventConsumeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventConsumeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventConsumeRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventConsumeRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiEventConsumeRequestToResponseContent(name: string, value: Api.EventConsumeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventConsumeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventConsumeRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventConsumeRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiEventConsumeRequestFromRequest(name: string, value: any): Api.EventConsumeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventConsumeRequest = modelApiEventConsumeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventConsumeRequestToResponse(name: string, value: Api.EventConsumeRequest): ToResponse<Api.EventConsumeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventConsumeRequest> = modelApiEventConsumeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiEventConsumeRequestBodyKeys: string[] = ['metadata']

function modelApiEventConsumeRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventConsumeRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventConsumeRequestBody = {
		'metadata': allowUndefined(modelApiEventEventMetadataFromRequest)(`${name}.metadata`, value['metadata']),
	}

	return result
}

function modelApiEventConsumeRequestBodyToResponseContent(name: string, value: Api.EventConsumeRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventConsumeRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventConsumeRequestBody> = {
		'metadata': allowUndefined(modelApiEventEventMetadataToResponse)(`${name}.metadata`, value['metadata']),
	}

	return result
}

export function modelApiEventConsumeRequestBodyFromRequest(name: string, value: any): Api.EventConsumeRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventConsumeRequestBody = modelApiEventConsumeRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventConsumeRequestBodyToResponse(name: string, value: Api.EventConsumeRequestBody): ToResponse<Api.EventConsumeRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventConsumeRequestBody> = modelApiEventConsumeRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiEventConsumeResponseKeys: string[] = ['header', 'body']

function modelApiEventConsumeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventConsumeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventConsumeResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventConsumeResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiEventConsumeResponseToResponseContent(name: string, value: Api.EventConsumeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventConsumeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventConsumeResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventConsumeResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiEventConsumeResponseFromRequest(name: string, value: any): Api.EventConsumeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventConsumeResponse = modelApiEventConsumeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventConsumeResponseToResponse(name: string, value: Api.EventConsumeResponse): ToResponse<Api.EventConsumeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventConsumeResponse> = modelApiEventConsumeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiEventConsumeResponseBodyKeys: string[] = ['status']

function modelApiEventConsumeResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventConsumeResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventConsumeResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiEventConsumeResponseBodyToResponseContent(name: string, value: Api.EventConsumeResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventConsumeResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventConsumeResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventConsumeResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiEventConsumeResponseBodyFromRequest(name: string, value: any): Api.EventConsumeResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventConsumeResponseBody = modelApiEventConsumeResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventConsumeResponseBodyToResponse(name: string, value: Api.EventConsumeResponseBody): ToResponse<Api.EventConsumeResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventConsumeResponseBody> = modelApiEventConsumeResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventConsumeResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiEventCustomContentKeys: string[] = ['name', 'object']

function modelApiEventCustomContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventCustomContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventCustomContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventCustomContent = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'object': allowUndefined(stringFromRequest)(`${name}.object`, value['object']),
	}

	return result
}

function modelApiEventCustomContentToResponseContent(name: string, value: Api.EventCustomContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventCustomContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventCustomContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventCustomContent> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'object': allowUndefined(stringToResponse)(`${name}.object`, value['object']),
	}

	return result
}

export function modelApiEventCustomContentFromRequest(name: string, value: any): Api.EventCustomContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventCustomContent = modelApiEventCustomContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventCustomContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventCustomContentToResponse(name: string, value: Api.EventCustomContent): ToResponse<Api.EventCustomContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventCustomContent> = modelApiEventCustomContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventCustomContent: ${key}`
			}
		}
	}

	return result
}

const ApiEventCustomOpinionKeys: string[] = ['name', 'object']

function modelApiEventCustomOpinionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventCustomOpinion {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventCustomOpinionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventCustomOpinion = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'object': allowUndefined(stringFromRequest)(`${name}.object`, value['object']),
	}

	return result
}

function modelApiEventCustomOpinionToResponseContent(name: string, value: Api.EventCustomOpinion, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventCustomOpinion> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventCustomOpinionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventCustomOpinion> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'object': allowUndefined(stringToResponse)(`${name}.object`, value['object']),
	}

	return result
}

export function modelApiEventCustomOpinionFromRequest(name: string, value: any): Api.EventCustomOpinion {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventCustomOpinion = modelApiEventCustomOpinionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventCustomOpinion: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventCustomOpinionToResponse(name: string, value: Api.EventCustomOpinion): ToResponse<Api.EventCustomOpinion> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventCustomOpinion> = modelApiEventCustomOpinionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventCustomOpinion: ${key}`
			}
		}
	}

	return result
}

const ApiEventEventMetadataKeys: string[] = ['uid', 'type', 'producers', 'consumers', 'signature', 'extend', 'createdAt', 'processedAt', 'notifyContent', 'applyContent', 'customContent', 'notifyOpinion', 'applyOpinion', 'customOpinion']

function modelApiEventEventMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventEventMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventEventMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventEventMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'type': allowUndefined(enumApiEventEventTypeEnumFromRequest)(`${name}.type`, value['type']),
		'producers': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.producers`, value['producers']),
		'consumers': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.consumers`, value['consumers']),
		'signature': allowUndefined(modelApiEventEventSignatureFromRequest)(`${name}.signature`, value['signature']),
		'extend': allowUndefined(stringFromRequest)(`${name}.extend`, value['extend']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'processedAt': allowUndefined(stringFromRequest)(`${name}.processedAt`, value['processedAt']),
		'notifyContent': allowUndefined(modelApiEventNotifyContentFromRequest)(`${name}.notifyContent`, value['notifyContent']),
		'applyContent': allowUndefined(modelApiEventApplyContentFromRequest)(`${name}.applyContent`, value['applyContent']),
		'customContent': allowUndefined(modelApiEventCustomContentFromRequest)(`${name}.customContent`, value['customContent']),
		'notifyOpinion': allowUndefined(modelApiEventNotifyOpinionFromRequest)(`${name}.notifyOpinion`, value['notifyOpinion']),
		'applyOpinion': allowUndefined(modelApiEventApplyOpinionFromRequest)(`${name}.applyOpinion`, value['applyOpinion']),
		'customOpinion': allowUndefined(modelApiEventCustomOpinionFromRequest)(`${name}.customOpinion`, value['customOpinion']),
	}

	return result
}

function modelApiEventEventMetadataToResponseContent(name: string, value: Api.EventEventMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventEventMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventEventMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventEventMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'type': allowUndefined(enumApiEventEventTypeEnumToResponse)(`${name}.type`, value['type']),
		'producers': allowUndefined(arrayToResponse(stringToResponse))(`${name}.producers`, value['producers']),
		'consumers': allowUndefined(arrayToResponse(stringToResponse))(`${name}.consumers`, value['consumers']),
		'signature': allowUndefined(modelApiEventEventSignatureToResponse)(`${name}.signature`, value['signature']),
		'extend': allowUndefined(stringToResponse)(`${name}.extend`, value['extend']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'processedAt': allowUndefined(stringToResponse)(`${name}.processedAt`, value['processedAt']),
		'notifyContent': allowUndefined(modelApiEventNotifyContentToResponse)(`${name}.notifyContent`, value['notifyContent']),
		'applyContent': allowUndefined(modelApiEventApplyContentToResponse)(`${name}.applyContent`, value['applyContent']),
		'customContent': allowUndefined(modelApiEventCustomContentToResponse)(`${name}.customContent`, value['customContent']),
		'notifyOpinion': allowUndefined(modelApiEventNotifyOpinionToResponse)(`${name}.notifyOpinion`, value['notifyOpinion']),
		'applyOpinion': allowUndefined(modelApiEventApplyOpinionToResponse)(`${name}.applyOpinion`, value['applyOpinion']),
		'customOpinion': allowUndefined(modelApiEventCustomOpinionToResponse)(`${name}.customOpinion`, value['customOpinion']),
	}

	return result
}

export function modelApiEventEventMetadataFromRequest(name: string, value: any): Api.EventEventMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventEventMetadata = modelApiEventEventMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventEventMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventEventMetadataToResponse(name: string, value: Api.EventEventMetadata): ToResponse<Api.EventEventMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventEventMetadata> = modelApiEventEventMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventEventMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiEventEventSignatureKeys: string[] = ['producers', 'consumers']

function modelApiEventEventSignatureFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventEventSignature {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventEventSignatureKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventEventSignature = {
		'producers': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.producers`, value['producers']),
		'consumers': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.consumers`, value['consumers']),
	}

	return result
}

function modelApiEventEventSignatureToResponseContent(name: string, value: Api.EventEventSignature, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventEventSignature> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventEventSignatureKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventEventSignature> = {
		'producers': allowUndefined(arrayToResponse(stringToResponse))(`${name}.producers`, value['producers']),
		'consumers': allowUndefined(arrayToResponse(stringToResponse))(`${name}.consumers`, value['consumers']),
	}

	return result
}

export function modelApiEventEventSignatureFromRequest(name: string, value: any): Api.EventEventSignature {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventEventSignature = modelApiEventEventSignatureFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventEventSignature: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventEventSignatureToResponse(name: string, value: Api.EventEventSignature): ToResponse<Api.EventEventSignature> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventEventSignature> = modelApiEventEventSignatureToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventEventSignature: ${key}`
			}
		}
	}

	return result
}

export function enumApiEventEventTypeEnumFromRequest(name: string, value: any): Api.EventEventTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'EVENT_TYPE_UNKNOWN') {
		return Api.EventEventTypeEnum.EVENTTYPEUNKNOWN
	}
	if (value === 'EVENT_TYPE_REMIND') {
		return Api.EventEventTypeEnum.EVENTTYPEREMIND
	}
	if (value === 'EVENT_TYPE_NOTIFY') {
		return Api.EventEventTypeEnum.EVENTTYPENOTIFY
	}
	if (value === 'EVENT_TYPE_APPLY') {
		return Api.EventEventTypeEnum.EVENTTYPEAPPLY
	}
	if (value === 'EVENT_TYPE_CUSTOM') {
		return Api.EventEventTypeEnum.EVENTTYPECUSTOM
	}

	throw `Unexpected enum value for Api.EventEventTypeEnum: ${value}`
}

export function enumApiEventEventTypeEnumToResponse(name: string, value: Api.EventEventTypeEnum): Api.EventEventTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'EVENT_TYPE_UNKNOWN') {
		return Api.EventEventTypeEnum.EVENTTYPEUNKNOWN
	}
	if (value === 'EVENT_TYPE_REMIND') {
		return Api.EventEventTypeEnum.EVENTTYPEREMIND
	}
	if (value === 'EVENT_TYPE_NOTIFY') {
		return Api.EventEventTypeEnum.EVENTTYPENOTIFY
	}
	if (value === 'EVENT_TYPE_APPLY') {
		return Api.EventEventTypeEnum.EVENTTYPEAPPLY
	}
	if (value === 'EVENT_TYPE_CUSTOM') {
		return Api.EventEventTypeEnum.EVENTTYPECUSTOM
	}

	throw `Unexpected enum value for Api.EventEventTypeEnum: ${value}`
}

export function enumApiEventNotifyActionEnumFromRequest(name: string, value: any): Api.EventNotifyActionEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'NOTIFY_ACTION_UNKNOWN') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONUNKNOWN
	}
	if (value === 'NOTIFY_ACTION_ADD') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONADD
	}
	if (value === 'NOTIFY_ACTION_DEL') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONDEL
	}
	if (value === 'NOTIFY_ACTION_MOD') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONMOD
	}

	throw `Unexpected enum value for Api.EventNotifyActionEnum: ${value}`
}

export function enumApiEventNotifyActionEnumToResponse(name: string, value: Api.EventNotifyActionEnum): Api.EventNotifyActionEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'NOTIFY_ACTION_UNKNOWN') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONUNKNOWN
	}
	if (value === 'NOTIFY_ACTION_ADD') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONADD
	}
	if (value === 'NOTIFY_ACTION_DEL') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONDEL
	}
	if (value === 'NOTIFY_ACTION_MOD') {
		return Api.EventNotifyActionEnum.NOTIFYACTIONMOD
	}

	throw `Unexpected enum value for Api.EventNotifyActionEnum: ${value}`
}

const ApiEventNotifyContentKeys: string[] = ['name', 'items']

function modelApiEventNotifyContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventNotifyContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventNotifyContent = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'items': allowUndefined(arrayFromRequest(modelApiEventNotifyItemFromRequest))(`${name}.items`, value['items']),
	}

	return result
}

function modelApiEventNotifyContentToResponseContent(name: string, value: Api.EventNotifyContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventNotifyContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventNotifyContent> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'items': allowUndefined(arrayToResponse(modelApiEventNotifyItemToResponse))(`${name}.items`, value['items']),
	}

	return result
}

export function modelApiEventNotifyContentFromRequest(name: string, value: any): Api.EventNotifyContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventNotifyContent = modelApiEventNotifyContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventNotifyContentToResponse(name: string, value: Api.EventNotifyContent): ToResponse<Api.EventNotifyContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventNotifyContent> = modelApiEventNotifyContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyContent: ${key}`
			}
		}
	}

	return result
}

const ApiEventNotifyItemKeys: string[] = ['uid', 'action']

function modelApiEventNotifyItemFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventNotifyItem {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyItemKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventNotifyItem = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'action': allowUndefined(enumApiEventNotifyActionEnumFromRequest)(`${name}.action`, value['action']),
	}

	return result
}

function modelApiEventNotifyItemToResponseContent(name: string, value: Api.EventNotifyItem, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventNotifyItem> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyItemKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventNotifyItem> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'action': allowUndefined(enumApiEventNotifyActionEnumToResponse)(`${name}.action`, value['action']),
	}

	return result
}

export function modelApiEventNotifyItemFromRequest(name: string, value: any): Api.EventNotifyItem {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventNotifyItem = modelApiEventNotifyItemFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyItem: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventNotifyItemToResponse(name: string, value: Api.EventNotifyItem): ToResponse<Api.EventNotifyItem> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventNotifyItem> = modelApiEventNotifyItemToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyItem: ${key}`
			}
		}
	}

	return result
}

const ApiEventNotifyOpinionKeys: string[] = ['processed']

function modelApiEventNotifyOpinionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventNotifyOpinion {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyOpinionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventNotifyOpinion = {
		'processed': allowUndefined(stringFromRequest)(`${name}.processed`, value['processed']),
	}

	return result
}

function modelApiEventNotifyOpinionToResponseContent(name: string, value: Api.EventNotifyOpinion, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventNotifyOpinion> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventNotifyOpinionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventNotifyOpinion> = {
		'processed': allowUndefined(stringToResponse)(`${name}.processed`, value['processed']),
	}

	return result
}

export function modelApiEventNotifyOpinionFromRequest(name: string, value: any): Api.EventNotifyOpinion {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventNotifyOpinion = modelApiEventNotifyOpinionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyOpinion: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventNotifyOpinionToResponse(name: string, value: Api.EventNotifyOpinion): ToResponse<Api.EventNotifyOpinion> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventNotifyOpinion> = modelApiEventNotifyOpinionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventNotifyOpinion: ${key}`
			}
		}
	}

	return result
}

const ApiEventProduceRequestKeys: string[] = ['header', 'body']

function modelApiEventProduceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventProduceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventProduceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventProduceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiEventProduceRequestToResponseContent(name: string, value: Api.EventProduceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventProduceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventProduceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventProduceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiEventProduceRequestFromRequest(name: string, value: any): Api.EventProduceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventProduceRequest = modelApiEventProduceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventProduceRequestToResponse(name: string, value: Api.EventProduceRequest): ToResponse<Api.EventProduceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventProduceRequest> = modelApiEventProduceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiEventProduceRequestBodyKeys: string[] = ['event']

function modelApiEventProduceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventProduceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventProduceRequestBody = {
		'event': allowUndefined(modelApiEventEventMetadataFromRequest)(`${name}.event`, value['event']),
	}

	return result
}

function modelApiEventProduceRequestBodyToResponseContent(name: string, value: Api.EventProduceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventProduceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventProduceRequestBody> = {
		'event': allowUndefined(modelApiEventEventMetadataToResponse)(`${name}.event`, value['event']),
	}

	return result
}

export function modelApiEventProduceRequestBodyFromRequest(name: string, value: any): Api.EventProduceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventProduceRequestBody = modelApiEventProduceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventProduceRequestBodyToResponse(name: string, value: Api.EventProduceRequestBody): ToResponse<Api.EventProduceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventProduceRequestBody> = modelApiEventProduceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiEventProduceResponseKeys: string[] = ['header', 'body']

function modelApiEventProduceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventProduceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventProduceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventProduceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiEventProduceResponseToResponseContent(name: string, value: Api.EventProduceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventProduceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventProduceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiEventProduceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiEventProduceResponseFromRequest(name: string, value: any): Api.EventProduceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventProduceResponse = modelApiEventProduceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventProduceResponseToResponse(name: string, value: Api.EventProduceResponse): ToResponse<Api.EventProduceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventProduceResponse> = modelApiEventProduceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiEventProduceResponseBodyKeys: string[] = ['status']

function modelApiEventProduceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.EventProduceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.EventProduceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiEventProduceResponseBodyToResponseContent(name: string, value: Api.EventProduceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.EventProduceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiEventProduceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.EventProduceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiEventProduceResponseBodyFromRequest(name: string, value: any): Api.EventProduceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.EventProduceResponseBody = modelApiEventProduceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiEventProduceResponseBodyToResponse(name: string, value: Api.EventProduceResponseBody): ToResponse<Api.EventProduceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.EventProduceResponseBody> = modelApiEventProduceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.EventProduceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityCancelRequestKeys: string[] = ['header', 'body']

function modelApiIdentityCancelRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityCancelRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityCancelRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityCancelRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityCancelRequestToResponseContent(name: string, value: Api.IdentityCancelRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityCancelRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityCancelRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityCancelRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityCancelRequestFromRequest(name: string, value: any): Api.IdentityCancelRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityCancelRequest = modelApiIdentityCancelRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityCancelRequestToResponse(name: string, value: Api.IdentityCancelRequest): ToResponse<Api.IdentityCancelRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityCancelRequest> = modelApiIdentityCancelRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelRequest: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityCancelRequestBodyKeys: string[] = ['did']

function modelApiIdentityCancelRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityCancelRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityCancelRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiIdentityCancelRequestBodyToResponseContent(name: string, value: Api.IdentityCancelRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityCancelRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityCancelRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiIdentityCancelRequestBodyFromRequest(name: string, value: any): Api.IdentityCancelRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityCancelRequestBody = modelApiIdentityCancelRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityCancelRequestBodyToResponse(name: string, value: Api.IdentityCancelRequestBody): ToResponse<Api.IdentityCancelRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityCancelRequestBody> = modelApiIdentityCancelRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityCancelResponseKeys: string[] = ['header', 'body']

function modelApiIdentityCancelResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityCancelResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityCancelResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityCancelResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityCancelResponseToResponseContent(name: string, value: Api.IdentityCancelResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityCancelResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityCancelResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityCancelResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityCancelResponseFromRequest(name: string, value: any): Api.IdentityCancelResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityCancelResponse = modelApiIdentityCancelResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityCancelResponseToResponse(name: string, value: Api.IdentityCancelResponse): ToResponse<Api.IdentityCancelResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityCancelResponse> = modelApiIdentityCancelResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelResponse: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityCancelResponseBodyKeys: string[] = ['status']

function modelApiIdentityCancelResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityCancelResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityCancelResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiIdentityCancelResponseBodyToResponseContent(name: string, value: Api.IdentityCancelResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityCancelResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityCancelResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityCancelResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiIdentityCancelResponseBodyFromRequest(name: string, value: any): Api.IdentityCancelResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityCancelResponseBody = modelApiIdentityCancelResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityCancelResponseBodyToResponse(name: string, value: Api.IdentityCancelResponseBody): ToResponse<Api.IdentityCancelResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityCancelResponseBody> = modelApiIdentityCancelResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityCancelResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityDepositRequestKeys: string[] = ['header', 'body']

function modelApiIdentityDepositRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityDepositRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityDepositRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityDepositRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityDepositRequestToResponseContent(name: string, value: Api.IdentityDepositRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityDepositRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityDepositRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityDepositRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityDepositRequestFromRequest(name: string, value: any): Api.IdentityDepositRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityDepositRequest = modelApiIdentityDepositRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityDepositRequestToResponse(name: string, value: Api.IdentityDepositRequest): ToResponse<Api.IdentityDepositRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityDepositRequest> = modelApiIdentityDepositRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositRequest: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityDepositRequestBodyKeys: string[] = ['cipher', 'protocol']

function modelApiIdentityDepositRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityDepositRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityDepositRequestBody = {
		'cipher': allowUndefined(stringFromRequest)(`${name}.cipher`, value['cipher']),
		'protocol': allowUndefined(stringFromRequest)(`${name}.protocol`, value['protocol']),
	}

	return result
}

function modelApiIdentityDepositRequestBodyToResponseContent(name: string, value: Api.IdentityDepositRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityDepositRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityDepositRequestBody> = {
		'cipher': allowUndefined(stringToResponse)(`${name}.cipher`, value['cipher']),
		'protocol': allowUndefined(stringToResponse)(`${name}.protocol`, value['protocol']),
	}

	return result
}

export function modelApiIdentityDepositRequestBodyFromRequest(name: string, value: any): Api.IdentityDepositRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityDepositRequestBody = modelApiIdentityDepositRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityDepositRequestBodyToResponse(name: string, value: Api.IdentityDepositRequestBody): ToResponse<Api.IdentityDepositRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityDepositRequestBody> = modelApiIdentityDepositRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityDepositResponseKeys: string[] = ['header', 'body']

function modelApiIdentityDepositResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityDepositResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityDepositResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityDepositResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityDepositResponseToResponseContent(name: string, value: Api.IdentityDepositResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityDepositResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityDepositResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityDepositResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityDepositResponseFromRequest(name: string, value: any): Api.IdentityDepositResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityDepositResponse = modelApiIdentityDepositResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityDepositResponseToResponse(name: string, value: Api.IdentityDepositResponse): ToResponse<Api.IdentityDepositResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityDepositResponse> = modelApiIdentityDepositResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositResponse: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityDepositResponseBodyKeys: string[] = ['status']

function modelApiIdentityDepositResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityDepositResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityDepositResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiIdentityDepositResponseBodyToResponseContent(name: string, value: Api.IdentityDepositResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityDepositResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityDepositResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityDepositResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiIdentityDepositResponseBodyFromRequest(name: string, value: any): Api.IdentityDepositResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityDepositResponseBody = modelApiIdentityDepositResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityDepositResponseBodyToResponse(name: string, value: Api.IdentityDepositResponseBody): ToResponse<Api.IdentityDepositResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityDepositResponseBody> = modelApiIdentityDepositResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityDepositResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityQueryRequestKeys: string[] = ['header', 'body']

function modelApiIdentityQueryRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityQueryRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityQueryRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityQueryRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityQueryRequestToResponseContent(name: string, value: Api.IdentityQueryRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityQueryRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityQueryRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityQueryRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityQueryRequestFromRequest(name: string, value: any): Api.IdentityQueryRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityQueryRequest = modelApiIdentityQueryRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityQueryRequestToResponse(name: string, value: Api.IdentityQueryRequest): ToResponse<Api.IdentityQueryRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityQueryRequest> = modelApiIdentityQueryRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryRequest: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityQueryRequestBodyKeys: string[] = ['serviceCode']

function modelApiIdentityQueryRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityQueryRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityQueryRequestBody = {
		'serviceCode': allowUndefined(enumApiCommonServiceCodeEnumFromRequest)(`${name}.serviceCode`, value['serviceCode']),
	}

	return result
}

function modelApiIdentityQueryRequestBodyToResponseContent(name: string, value: Api.IdentityQueryRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityQueryRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityQueryRequestBody> = {
		'serviceCode': allowUndefined(enumApiCommonServiceCodeEnumToResponse)(`${name}.serviceCode`, value['serviceCode']),
	}

	return result
}

export function modelApiIdentityQueryRequestBodyFromRequest(name: string, value: any): Api.IdentityQueryRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityQueryRequestBody = modelApiIdentityQueryRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityQueryRequestBodyToResponse(name: string, value: Api.IdentityQueryRequestBody): ToResponse<Api.IdentityQueryRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityQueryRequestBody> = modelApiIdentityQueryRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityQueryResponseKeys: string[] = ['header', 'body']

function modelApiIdentityQueryResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityQueryResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityQueryResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityQueryResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiIdentityQueryResponseToResponseContent(name: string, value: Api.IdentityQueryResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityQueryResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityQueryResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiIdentityQueryResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiIdentityQueryResponseFromRequest(name: string, value: any): Api.IdentityQueryResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityQueryResponse = modelApiIdentityQueryResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityQueryResponseToResponse(name: string, value: Api.IdentityQueryResponse): ToResponse<Api.IdentityQueryResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityQueryResponse> = modelApiIdentityQueryResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryResponse: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityQueryResponseBodyKeys: string[] = ['status', 'cipher', 'protocol']

function modelApiIdentityQueryResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityQueryResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityQueryResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'cipher': allowUndefined(stringFromRequest)(`${name}.cipher`, value['cipher']),
		'protocol': allowUndefined(stringFromRequest)(`${name}.protocol`, value['protocol']),
	}

	return result
}

function modelApiIdentityQueryResponseBodyToResponseContent(name: string, value: Api.IdentityQueryResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityQueryResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityQueryResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityQueryResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'cipher': allowUndefined(stringToResponse)(`${name}.cipher`, value['cipher']),
		'protocol': allowUndefined(stringToResponse)(`${name}.protocol`, value['protocol']),
	}

	return result
}

export function modelApiIdentityQueryResponseBodyFromRequest(name: string, value: any): Api.IdentityQueryResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityQueryResponseBody = modelApiIdentityQueryResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityQueryResponseBodyToResponse(name: string, value: Api.IdentityQueryResponseBody): ToResponse<Api.IdentityQueryResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityQueryResponseBody> = modelApiIdentityQueryResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityQueryResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityRetrieveRequestKeys: string[] = ['header']

function modelApiIdentityRetrieveRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityRetrieveRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityRetrieveRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityRetrieveRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiIdentityRetrieveRequestToResponseContent(name: string, value: Api.IdentityRetrieveRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityRetrieveRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityRetrieveRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityRetrieveRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiIdentityRetrieveRequestFromRequest(name: string, value: any): Api.IdentityRetrieveRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityRetrieveRequest = modelApiIdentityRetrieveRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityRetrieveRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityRetrieveRequestToResponse(name: string, value: Api.IdentityRetrieveRequest): ToResponse<Api.IdentityRetrieveRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityRetrieveRequest> = modelApiIdentityRetrieveRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityRetrieveRequest: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityRetrieveResponseKeys: string[] = ['header']

function modelApiIdentityRetrieveResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityRetrieveResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityRetrieveResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityRetrieveResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiIdentityRetrieveResponseToResponseContent(name: string, value: Api.IdentityRetrieveResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityRetrieveResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityRetrieveResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityRetrieveResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiIdentityRetrieveResponseFromRequest(name: string, value: any): Api.IdentityRetrieveResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityRetrieveResponse = modelApiIdentityRetrieveResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityRetrieveResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityRetrieveResponseToResponse(name: string, value: Api.IdentityRetrieveResponse): ToResponse<Api.IdentityRetrieveResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityRetrieveResponse> = modelApiIdentityRetrieveResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityRetrieveResponse: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityShareRequestKeys: string[] = ['header']

function modelApiIdentityShareRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityShareRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityShareRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityShareRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiIdentityShareRequestToResponseContent(name: string, value: Api.IdentityShareRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityShareRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityShareRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityShareRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiIdentityShareRequestFromRequest(name: string, value: any): Api.IdentityShareRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityShareRequest = modelApiIdentityShareRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityShareRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityShareRequestToResponse(name: string, value: Api.IdentityShareRequest): ToResponse<Api.IdentityShareRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityShareRequest> = modelApiIdentityShareRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityShareRequest: ${key}`
			}
		}
	}

	return result
}

const ApiIdentityShareResponseKeys: string[] = ['header']

function modelApiIdentityShareResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.IdentityShareResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityShareResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.IdentityShareResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiIdentityShareResponseToResponseContent(name: string, value: Api.IdentityShareResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.IdentityShareResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiIdentityShareResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.IdentityShareResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiIdentityShareResponseFromRequest(name: string, value: any): Api.IdentityShareResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.IdentityShareResponse = modelApiIdentityShareResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityShareResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiIdentityShareResponseToResponse(name: string, value: Api.IdentityShareResponse): ToResponse<Api.IdentityShareResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.IdentityShareResponse> = modelApiIdentityShareResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.IdentityShareResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerCreateRoomRequestKeys: string[] = ['header', 'body']

function modelApiInterviewerCreateRoomRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerCreateRoomRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerCreateRoomRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerCreateRoomRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerCreateRoomRequestToResponseContent(name: string, value: Api.InterviewerCreateRoomRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerCreateRoomRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerCreateRoomRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerCreateRoomRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerCreateRoomRequestFromRequest(name: string, value: any): Api.InterviewerCreateRoomRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerCreateRoomRequest = modelApiInterviewerCreateRoomRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerCreateRoomRequestToResponse(name: string, value: Api.InterviewerCreateRoomRequest): ToResponse<Api.InterviewerCreateRoomRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerCreateRoomRequest> = modelApiInterviewerCreateRoomRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerCreateRoomRequestBodyKeys: string[] = ['room']

function modelApiInterviewerCreateRoomRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerCreateRoomRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerCreateRoomRequestBody = {
		'room': allowUndefined(modelApiInterviewerRoomMetadataFromRequest)(`${name}.room`, value['room']),
	}

	return result
}

function modelApiInterviewerCreateRoomRequestBodyToResponseContent(name: string, value: Api.InterviewerCreateRoomRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerCreateRoomRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerCreateRoomRequestBody> = {
		'room': allowUndefined(modelApiInterviewerRoomMetadataToResponse)(`${name}.room`, value['room']),
	}

	return result
}

export function modelApiInterviewerCreateRoomRequestBodyFromRequest(name: string, value: any): Api.InterviewerCreateRoomRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerCreateRoomRequestBody = modelApiInterviewerCreateRoomRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerCreateRoomRequestBodyToResponse(name: string, value: Api.InterviewerCreateRoomRequestBody): ToResponse<Api.InterviewerCreateRoomRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerCreateRoomRequestBody> = modelApiInterviewerCreateRoomRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerCreateRoomResponseKeys: string[] = ['header', 'body']

function modelApiInterviewerCreateRoomResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerCreateRoomResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerCreateRoomResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerCreateRoomResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerCreateRoomResponseToResponseContent(name: string, value: Api.InterviewerCreateRoomResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerCreateRoomResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerCreateRoomResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerCreateRoomResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerCreateRoomResponseFromRequest(name: string, value: any): Api.InterviewerCreateRoomResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerCreateRoomResponse = modelApiInterviewerCreateRoomResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerCreateRoomResponseToResponse(name: string, value: Api.InterviewerCreateRoomResponse): ToResponse<Api.InterviewerCreateRoomResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerCreateRoomResponse> = modelApiInterviewerCreateRoomResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerCreateRoomResponseBodyKeys: string[] = ['status', 'room']

function modelApiInterviewerCreateRoomResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerCreateRoomResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerCreateRoomResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataFromRequest)(`${name}.room`, value['room']),
	}

	return result
}

function modelApiInterviewerCreateRoomResponseBodyToResponseContent(name: string, value: Api.InterviewerCreateRoomResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerCreateRoomResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerCreateRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerCreateRoomResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataToResponse)(`${name}.room`, value['room']),
	}

	return result
}

export function modelApiInterviewerCreateRoomResponseBodyFromRequest(name: string, value: any): Api.InterviewerCreateRoomResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerCreateRoomResponseBody = modelApiInterviewerCreateRoomResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerCreateRoomResponseBodyToResponse(name: string, value: Api.InterviewerCreateRoomResponseBody): ToResponse<Api.InterviewerCreateRoomResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerCreateRoomResponseBody> = modelApiInterviewerCreateRoomResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerCreateRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerDeleteRoomRequestKeys: string[] = ['header', 'body']

function modelApiInterviewerDeleteRoomRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerDeleteRoomRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerDeleteRoomRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerDeleteRoomRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerDeleteRoomRequestToResponseContent(name: string, value: Api.InterviewerDeleteRoomRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerDeleteRoomRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerDeleteRoomRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerDeleteRoomRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerDeleteRoomRequestFromRequest(name: string, value: any): Api.InterviewerDeleteRoomRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerDeleteRoomRequest = modelApiInterviewerDeleteRoomRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerDeleteRoomRequestToResponse(name: string, value: Api.InterviewerDeleteRoomRequest): ToResponse<Api.InterviewerDeleteRoomRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerDeleteRoomRequest> = modelApiInterviewerDeleteRoomRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerDeleteRoomRequestBodyKeys: string[] = ['roomId', 'did']

function modelApiInterviewerDeleteRoomRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerDeleteRoomRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerDeleteRoomRequestBody = {
		'roomId': allowUndefined(stringFromRequest)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiInterviewerDeleteRoomRequestBodyToResponseContent(name: string, value: Api.InterviewerDeleteRoomRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerDeleteRoomRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerDeleteRoomRequestBody> = {
		'roomId': allowUndefined(stringToResponse)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiInterviewerDeleteRoomRequestBodyFromRequest(name: string, value: any): Api.InterviewerDeleteRoomRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerDeleteRoomRequestBody = modelApiInterviewerDeleteRoomRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerDeleteRoomRequestBodyToResponse(name: string, value: Api.InterviewerDeleteRoomRequestBody): ToResponse<Api.InterviewerDeleteRoomRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerDeleteRoomRequestBody> = modelApiInterviewerDeleteRoomRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerDeleteRoomResponseKeys: string[] = ['header', 'body']

function modelApiInterviewerDeleteRoomResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerDeleteRoomResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerDeleteRoomResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerDeleteRoomResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerDeleteRoomResponseToResponseContent(name: string, value: Api.InterviewerDeleteRoomResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerDeleteRoomResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerDeleteRoomResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerDeleteRoomResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerDeleteRoomResponseFromRequest(name: string, value: any): Api.InterviewerDeleteRoomResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerDeleteRoomResponse = modelApiInterviewerDeleteRoomResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerDeleteRoomResponseToResponse(name: string, value: Api.InterviewerDeleteRoomResponse): ToResponse<Api.InterviewerDeleteRoomResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerDeleteRoomResponse> = modelApiInterviewerDeleteRoomResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerDeleteRoomResponseBodyKeys: string[] = ['status']

function modelApiInterviewerDeleteRoomResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerDeleteRoomResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerDeleteRoomResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiInterviewerDeleteRoomResponseBodyToResponseContent(name: string, value: Api.InterviewerDeleteRoomResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerDeleteRoomResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerDeleteRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerDeleteRoomResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiInterviewerDeleteRoomResponseBodyFromRequest(name: string, value: any): Api.InterviewerDeleteRoomResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerDeleteRoomResponseBody = modelApiInterviewerDeleteRoomResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerDeleteRoomResponseBodyToResponse(name: string, value: Api.InterviewerDeleteRoomResponseBody): ToResponse<Api.InterviewerDeleteRoomResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerDeleteRoomResponseBody> = modelApiInterviewerDeleteRoomResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerDeleteRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerGetRoomRequestKeys: string[] = ['header', 'body']

function modelApiInterviewerGetRoomRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerGetRoomRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerGetRoomRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerGetRoomRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerGetRoomRequestToResponseContent(name: string, value: Api.InterviewerGetRoomRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerGetRoomRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerGetRoomRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerGetRoomRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerGetRoomRequestFromRequest(name: string, value: any): Api.InterviewerGetRoomRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerGetRoomRequest = modelApiInterviewerGetRoomRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerGetRoomRequestToResponse(name: string, value: Api.InterviewerGetRoomRequest): ToResponse<Api.InterviewerGetRoomRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerGetRoomRequest> = modelApiInterviewerGetRoomRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerGetRoomRequestBodyKeys: string[] = ['roomId', 'did']

function modelApiInterviewerGetRoomRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerGetRoomRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerGetRoomRequestBody = {
		'roomId': allowUndefined(stringFromRequest)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiInterviewerGetRoomRequestBodyToResponseContent(name: string, value: Api.InterviewerGetRoomRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerGetRoomRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerGetRoomRequestBody> = {
		'roomId': allowUndefined(stringToResponse)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiInterviewerGetRoomRequestBodyFromRequest(name: string, value: any): Api.InterviewerGetRoomRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerGetRoomRequestBody = modelApiInterviewerGetRoomRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerGetRoomRequestBodyToResponse(name: string, value: Api.InterviewerGetRoomRequestBody): ToResponse<Api.InterviewerGetRoomRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerGetRoomRequestBody> = modelApiInterviewerGetRoomRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerGetRoomResponseKeys: string[] = ['header', 'body']

function modelApiInterviewerGetRoomResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerGetRoomResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerGetRoomResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerGetRoomResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerGetRoomResponseToResponseContent(name: string, value: Api.InterviewerGetRoomResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerGetRoomResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerGetRoomResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerGetRoomResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerGetRoomResponseFromRequest(name: string, value: any): Api.InterviewerGetRoomResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerGetRoomResponse = modelApiInterviewerGetRoomResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerGetRoomResponseToResponse(name: string, value: Api.InterviewerGetRoomResponse): ToResponse<Api.InterviewerGetRoomResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerGetRoomResponse> = modelApiInterviewerGetRoomResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerGetRoomResponseBodyKeys: string[] = ['status', 'room']

function modelApiInterviewerGetRoomResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerGetRoomResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerGetRoomResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataFromRequest)(`${name}.room`, value['room']),
	}

	return result
}

function modelApiInterviewerGetRoomResponseBodyToResponseContent(name: string, value: Api.InterviewerGetRoomResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerGetRoomResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerGetRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerGetRoomResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataToResponse)(`${name}.room`, value['room']),
	}

	return result
}

export function modelApiInterviewerGetRoomResponseBodyFromRequest(name: string, value: any): Api.InterviewerGetRoomResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerGetRoomResponseBody = modelApiInterviewerGetRoomResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerGetRoomResponseBodyToResponse(name: string, value: Api.InterviewerGetRoomResponseBody): ToResponse<Api.InterviewerGetRoomResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerGetRoomResponseBody> = modelApiInterviewerGetRoomResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerGetRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerListRoomsRequestKeys: string[] = ['header', 'body']

function modelApiInterviewerListRoomsRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerListRoomsRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerListRoomsRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerListRoomsRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerListRoomsRequestToResponseContent(name: string, value: Api.InterviewerListRoomsRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerListRoomsRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerListRoomsRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerListRoomsRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerListRoomsRequestFromRequest(name: string, value: any): Api.InterviewerListRoomsRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerListRoomsRequest = modelApiInterviewerListRoomsRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerListRoomsRequestToResponse(name: string, value: Api.InterviewerListRoomsRequest): ToResponse<Api.InterviewerListRoomsRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerListRoomsRequest> = modelApiInterviewerListRoomsRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerListRoomsRequestBodyKeys: string[] = ['did', 'page', 'pageSize']

function modelApiInterviewerListRoomsRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerListRoomsRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerListRoomsRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'page': allowUndefined(integerFromRequest)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiInterviewerListRoomsRequestBodyToResponseContent(name: string, value: Api.InterviewerListRoomsRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerListRoomsRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerListRoomsRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'page': allowUndefined(integerToResponse)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiInterviewerListRoomsRequestBodyFromRequest(name: string, value: any): Api.InterviewerListRoomsRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerListRoomsRequestBody = modelApiInterviewerListRoomsRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerListRoomsRequestBodyToResponse(name: string, value: Api.InterviewerListRoomsRequestBody): ToResponse<Api.InterviewerListRoomsRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerListRoomsRequestBody> = modelApiInterviewerListRoomsRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerListRoomsResponseKeys: string[] = ['header', 'body']

function modelApiInterviewerListRoomsResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerListRoomsResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerListRoomsResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerListRoomsResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerListRoomsResponseToResponseContent(name: string, value: Api.InterviewerListRoomsResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerListRoomsResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerListRoomsResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerListRoomsResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerListRoomsResponseFromRequest(name: string, value: any): Api.InterviewerListRoomsResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerListRoomsResponse = modelApiInterviewerListRoomsResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerListRoomsResponseToResponse(name: string, value: Api.InterviewerListRoomsResponse): ToResponse<Api.InterviewerListRoomsResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerListRoomsResponse> = modelApiInterviewerListRoomsResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerListRoomsResponseBodyKeys: string[] = ['status', 'rooms', 'total', 'page', 'pageSize']

function modelApiInterviewerListRoomsResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerListRoomsResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerListRoomsResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'rooms': allowUndefined(arrayFromRequest(modelApiInterviewerRoomMetadataFromRequest))(`${name}.rooms`, value['rooms']),
		'total': allowUndefined(integerFromRequest)(`${name}.total`, value['total']),
		'page': allowUndefined(integerFromRequest)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiInterviewerListRoomsResponseBodyToResponseContent(name: string, value: Api.InterviewerListRoomsResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerListRoomsResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerListRoomsResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerListRoomsResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'rooms': allowUndefined(arrayToResponse(modelApiInterviewerRoomMetadataToResponse))(`${name}.rooms`, value['rooms']),
		'total': allowUndefined(integerToResponse)(`${name}.total`, value['total']),
		'page': allowUndefined(integerToResponse)(`${name}.page`, value['page']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiInterviewerListRoomsResponseBodyFromRequest(name: string, value: any): Api.InterviewerListRoomsResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerListRoomsResponseBody = modelApiInterviewerListRoomsResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerListRoomsResponseBodyToResponse(name: string, value: Api.InterviewerListRoomsResponseBody): ToResponse<Api.InterviewerListRoomsResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerListRoomsResponseBody> = modelApiInterviewerListRoomsResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerListRoomsResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerRoomMetadataKeys: string[] = ['roomId', 'did', 'roomName', 'resumeId', 'jobInfoId', 'contextId', 'experienceId', 'knowledgeId', 'createdAt', 'updatedAt', 'signature']

function modelApiInterviewerRoomMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerRoomMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerRoomMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerRoomMetadata = {
		'roomId': allowUndefined(stringFromRequest)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'roomName': allowUndefined(stringFromRequest)(`${name}.roomName`, value['roomName']),
		'resumeId': allowUndefined(stringFromRequest)(`${name}.resumeId`, value['resumeId']),
		'jobInfoId': allowUndefined(stringFromRequest)(`${name}.jobInfoId`, value['jobInfoId']),
		'contextId': allowUndefined(stringFromRequest)(`${name}.contextId`, value['contextId']),
		'experienceId': allowUndefined(stringFromRequest)(`${name}.experienceId`, value['experienceId']),
		'knowledgeId': allowUndefined(stringFromRequest)(`${name}.knowledgeId`, value['knowledgeId']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiInterviewerRoomMetadataToResponseContent(name: string, value: Api.InterviewerRoomMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerRoomMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerRoomMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerRoomMetadata> = {
		'roomId': allowUndefined(stringToResponse)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'roomName': allowUndefined(stringToResponse)(`${name}.roomName`, value['roomName']),
		'resumeId': allowUndefined(stringToResponse)(`${name}.resumeId`, value['resumeId']),
		'jobInfoId': allowUndefined(stringToResponse)(`${name}.jobInfoId`, value['jobInfoId']),
		'contextId': allowUndefined(stringToResponse)(`${name}.contextId`, value['contextId']),
		'experienceId': allowUndefined(stringToResponse)(`${name}.experienceId`, value['experienceId']),
		'knowledgeId': allowUndefined(stringToResponse)(`${name}.knowledgeId`, value['knowledgeId']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiInterviewerRoomMetadataFromRequest(name: string, value: any): Api.InterviewerRoomMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerRoomMetadata = modelApiInterviewerRoomMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerRoomMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerRoomMetadataToResponse(name: string, value: Api.InterviewerRoomMetadata): ToResponse<Api.InterviewerRoomMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerRoomMetadata> = modelApiInterviewerRoomMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerRoomMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerUpdateRoomRequestKeys: string[] = ['header', 'body']

function modelApiInterviewerUpdateRoomRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerUpdateRoomRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerUpdateRoomRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerUpdateRoomRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerUpdateRoomRequestToResponseContent(name: string, value: Api.InterviewerUpdateRoomRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerUpdateRoomRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerUpdateRoomRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerUpdateRoomRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerUpdateRoomRequestFromRequest(name: string, value: any): Api.InterviewerUpdateRoomRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerUpdateRoomRequest = modelApiInterviewerUpdateRoomRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerUpdateRoomRequestToResponse(name: string, value: Api.InterviewerUpdateRoomRequest): ToResponse<Api.InterviewerUpdateRoomRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerUpdateRoomRequest> = modelApiInterviewerUpdateRoomRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerUpdateRoomRequestBodyKeys: string[] = ['roomId', 'did', 'roomName', 'jobInfoId', 'contextId', 'experienceId', 'knowledgeId']

function modelApiInterviewerUpdateRoomRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerUpdateRoomRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerUpdateRoomRequestBody = {
		'roomId': allowUndefined(stringFromRequest)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'roomName': allowUndefined(stringFromRequest)(`${name}.roomName`, value['roomName']),
		'jobInfoId': allowUndefined(stringFromRequest)(`${name}.jobInfoId`, value['jobInfoId']),
		'contextId': allowUndefined(stringFromRequest)(`${name}.contextId`, value['contextId']),
		'experienceId': allowUndefined(stringFromRequest)(`${name}.experienceId`, value['experienceId']),
		'knowledgeId': allowUndefined(stringFromRequest)(`${name}.knowledgeId`, value['knowledgeId']),
	}

	return result
}

function modelApiInterviewerUpdateRoomRequestBodyToResponseContent(name: string, value: Api.InterviewerUpdateRoomRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerUpdateRoomRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerUpdateRoomRequestBody> = {
		'roomId': allowUndefined(stringToResponse)(`${name}.roomId`, value['roomId']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'roomName': allowUndefined(stringToResponse)(`${name}.roomName`, value['roomName']),
		'jobInfoId': allowUndefined(stringToResponse)(`${name}.jobInfoId`, value['jobInfoId']),
		'contextId': allowUndefined(stringToResponse)(`${name}.contextId`, value['contextId']),
		'experienceId': allowUndefined(stringToResponse)(`${name}.experienceId`, value['experienceId']),
		'knowledgeId': allowUndefined(stringToResponse)(`${name}.knowledgeId`, value['knowledgeId']),
	}

	return result
}

export function modelApiInterviewerUpdateRoomRequestBodyFromRequest(name: string, value: any): Api.InterviewerUpdateRoomRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerUpdateRoomRequestBody = modelApiInterviewerUpdateRoomRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerUpdateRoomRequestBodyToResponse(name: string, value: Api.InterviewerUpdateRoomRequestBody): ToResponse<Api.InterviewerUpdateRoomRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerUpdateRoomRequestBody> = modelApiInterviewerUpdateRoomRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerUpdateRoomResponseKeys: string[] = ['header', 'body']

function modelApiInterviewerUpdateRoomResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerUpdateRoomResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerUpdateRoomResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerUpdateRoomResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInterviewerUpdateRoomResponseToResponseContent(name: string, value: Api.InterviewerUpdateRoomResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerUpdateRoomResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerUpdateRoomResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInterviewerUpdateRoomResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInterviewerUpdateRoomResponseFromRequest(name: string, value: any): Api.InterviewerUpdateRoomResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerUpdateRoomResponse = modelApiInterviewerUpdateRoomResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerUpdateRoomResponseToResponse(name: string, value: Api.InterviewerUpdateRoomResponse): ToResponse<Api.InterviewerUpdateRoomResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerUpdateRoomResponse> = modelApiInterviewerUpdateRoomResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInterviewerUpdateRoomResponseBodyKeys: string[] = ['status', 'room']

function modelApiInterviewerUpdateRoomResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InterviewerUpdateRoomResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InterviewerUpdateRoomResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataFromRequest)(`${name}.room`, value['room']),
	}

	return result
}

function modelApiInterviewerUpdateRoomResponseBodyToResponseContent(name: string, value: Api.InterviewerUpdateRoomResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InterviewerUpdateRoomResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInterviewerUpdateRoomResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InterviewerUpdateRoomResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'room': allowUndefined(modelApiInterviewerRoomMetadataToResponse)(`${name}.room`, value['room']),
	}

	return result
}

export function modelApiInterviewerUpdateRoomResponseBodyFromRequest(name: string, value: any): Api.InterviewerUpdateRoomResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InterviewerUpdateRoomResponseBody = modelApiInterviewerUpdateRoomResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInterviewerUpdateRoomResponseBodyToResponse(name: string, value: Api.InterviewerUpdateRoomResponseBody): ToResponse<Api.InterviewerUpdateRoomResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InterviewerUpdateRoomResponseBody> = modelApiInterviewerUpdateRoomResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InterviewerUpdateRoomResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationCreateInvitationRequestKeys: string[] = ['header', 'body']

function modelApiInvitationCreateInvitationRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationCreateInvitationRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationCreateInvitationRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationCreateInvitationRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationCreateInvitationRequestToResponseContent(name: string, value: Api.InvitationCreateInvitationRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationCreateInvitationRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationCreateInvitationRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationCreateInvitationRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationCreateInvitationRequestFromRequest(name: string, value: any): Api.InvitationCreateInvitationRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationCreateInvitationRequest = modelApiInvitationCreateInvitationRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationCreateInvitationRequestToResponse(name: string, value: Api.InvitationCreateInvitationRequest): ToResponse<Api.InvitationCreateInvitationRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationCreateInvitationRequest> = modelApiInvitationCreateInvitationRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationCreateInvitationRequestBodyKeys: string[] = ['invitation']

function modelApiInvitationCreateInvitationRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationCreateInvitationRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationCreateInvitationRequestBody = {
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataFromRequest)(`${name}.invitation`, value['invitation']),
	}

	return result
}

function modelApiInvitationCreateInvitationRequestBodyToResponseContent(name: string, value: Api.InvitationCreateInvitationRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationCreateInvitationRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationCreateInvitationRequestBody> = {
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataToResponse)(`${name}.invitation`, value['invitation']),
	}

	return result
}

export function modelApiInvitationCreateInvitationRequestBodyFromRequest(name: string, value: any): Api.InvitationCreateInvitationRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationCreateInvitationRequestBody = modelApiInvitationCreateInvitationRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationCreateInvitationRequestBodyToResponse(name: string, value: Api.InvitationCreateInvitationRequestBody): ToResponse<Api.InvitationCreateInvitationRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationCreateInvitationRequestBody> = modelApiInvitationCreateInvitationRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationCreateInvitationResponseKeys: string[] = ['header', 'body']

function modelApiInvitationCreateInvitationResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationCreateInvitationResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationCreateInvitationResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationCreateInvitationResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationCreateInvitationResponseToResponseContent(name: string, value: Api.InvitationCreateInvitationResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationCreateInvitationResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationCreateInvitationResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationCreateInvitationResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationCreateInvitationResponseFromRequest(name: string, value: any): Api.InvitationCreateInvitationResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationCreateInvitationResponse = modelApiInvitationCreateInvitationResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationCreateInvitationResponseToResponse(name: string, value: Api.InvitationCreateInvitationResponse): ToResponse<Api.InvitationCreateInvitationResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationCreateInvitationResponse> = modelApiInvitationCreateInvitationResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationCreateInvitationResponseBodyKeys: string[] = ['status', 'invitation']

function modelApiInvitationCreateInvitationResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationCreateInvitationResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationCreateInvitationResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataFromRequest)(`${name}.invitation`, value['invitation']),
	}

	return result
}

function modelApiInvitationCreateInvitationResponseBodyToResponseContent(name: string, value: Api.InvitationCreateInvitationResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationCreateInvitationResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationCreateInvitationResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationCreateInvitationResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataToResponse)(`${name}.invitation`, value['invitation']),
	}

	return result
}

export function modelApiInvitationCreateInvitationResponseBodyFromRequest(name: string, value: any): Api.InvitationCreateInvitationResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationCreateInvitationResponseBody = modelApiInvitationCreateInvitationResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationCreateInvitationResponseBodyToResponse(name: string, value: Api.InvitationCreateInvitationResponseBody): ToResponse<Api.InvitationCreateInvitationResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationCreateInvitationResponseBody> = modelApiInvitationCreateInvitationResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationCreateInvitationResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationInvitationDetailRequestKeys: string[] = ['header', 'body']

function modelApiInvitationInvitationDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationInvitationDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationInvitationDetailRequestToResponseContent(name: string, value: Api.InvitationInvitationDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationInvitationDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationInvitationDetailRequestFromRequest(name: string, value: any): Api.InvitationInvitationDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationDetailRequest = modelApiInvitationInvitationDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationDetailRequestToResponse(name: string, value: Api.InvitationInvitationDetailRequest): ToResponse<Api.InvitationInvitationDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationDetailRequest> = modelApiInvitationInvitationDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationInvitationDetailRequestBodyKeys: string[] = ['code']

function modelApiInvitationInvitationDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationDetailRequestBody = {
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
	}

	return result
}

function modelApiInvitationInvitationDetailRequestBodyToResponseContent(name: string, value: Api.InvitationInvitationDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationDetailRequestBody> = {
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
	}

	return result
}

export function modelApiInvitationInvitationDetailRequestBodyFromRequest(name: string, value: any): Api.InvitationInvitationDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationDetailRequestBody = modelApiInvitationInvitationDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationDetailRequestBodyToResponse(name: string, value: Api.InvitationInvitationDetailRequestBody): ToResponse<Api.InvitationInvitationDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationDetailRequestBody> = modelApiInvitationInvitationDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationInvitationDetailResponseKeys: string[] = ['header', 'body']

function modelApiInvitationInvitationDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationInvitationDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationInvitationDetailResponseToResponseContent(name: string, value: Api.InvitationInvitationDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationInvitationDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationInvitationDetailResponseFromRequest(name: string, value: any): Api.InvitationInvitationDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationDetailResponse = modelApiInvitationInvitationDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationDetailResponseToResponse(name: string, value: Api.InvitationInvitationDetailResponse): ToResponse<Api.InvitationInvitationDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationDetailResponse> = modelApiInvitationInvitationDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationInvitationDetailResponseBodyKeys: string[] = ['status', 'invitation', 'state']

function modelApiInvitationInvitationDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataFromRequest)(`${name}.invitation`, value['invitation']),
		'state': allowUndefined(modelApiInvitationInvitationUseStateFromRequest)(`${name}.state`, value['state']),
	}

	return result
}

function modelApiInvitationInvitationDetailResponseBodyToResponseContent(name: string, value: Api.InvitationInvitationDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'invitation': allowUndefined(modelApiInvitationInvitationMetadataToResponse)(`${name}.invitation`, value['invitation']),
		'state': allowUndefined(modelApiInvitationInvitationUseStateToResponse)(`${name}.state`, value['state']),
	}

	return result
}

export function modelApiInvitationInvitationDetailResponseBodyFromRequest(name: string, value: any): Api.InvitationInvitationDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationDetailResponseBody = modelApiInvitationInvitationDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationDetailResponseBodyToResponse(name: string, value: Api.InvitationInvitationDetailResponseBody): ToResponse<Api.InvitationInvitationDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationDetailResponseBody> = modelApiInvitationInvitationDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationInvitationMetadataKeys: string[] = ['scene', 'code', 'createdAt', 'expiredAt', 'inviter', 'invitee', 'signature']

function modelApiInvitationInvitationMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationMetadata = {
		'scene': allowUndefined(enumApiInvitationInvitationSceneEnumFromRequest)(`${name}.scene`, value['scene']),
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'expiredAt': allowUndefined(stringFromRequest)(`${name}.expiredAt`, value['expiredAt']),
		'inviter': allowUndefined(stringFromRequest)(`${name}.inviter`, value['inviter']),
		'invitee': allowUndefined(stringFromRequest)(`${name}.invitee`, value['invitee']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiInvitationInvitationMetadataToResponseContent(name: string, value: Api.InvitationInvitationMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationMetadata> = {
		'scene': allowUndefined(enumApiInvitationInvitationSceneEnumToResponse)(`${name}.scene`, value['scene']),
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'expiredAt': allowUndefined(stringToResponse)(`${name}.expiredAt`, value['expiredAt']),
		'inviter': allowUndefined(stringToResponse)(`${name}.inviter`, value['inviter']),
		'invitee': allowUndefined(stringToResponse)(`${name}.invitee`, value['invitee']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiInvitationInvitationMetadataFromRequest(name: string, value: any): Api.InvitationInvitationMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationMetadata = modelApiInvitationInvitationMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationMetadataToResponse(name: string, value: Api.InvitationInvitationMetadata): ToResponse<Api.InvitationInvitationMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationMetadata> = modelApiInvitationInvitationMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiInvitationInvitationSceneEnumFromRequest(name: string, value: any): Api.InvitationInvitationSceneEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'INVITATION_SCENE_UNKNOWN') {
		return Api.InvitationInvitationSceneEnum.INVITATIONSCENEUNKNOWN
	}
	if (value === 'INVITATION_SCENE_USER') {
		return Api.InvitationInvitationSceneEnum.INVITATIONSCENEUSER
	}

	throw `Unexpected enum value for Api.InvitationInvitationSceneEnum: ${value}`
}

export function enumApiInvitationInvitationSceneEnumToResponse(name: string, value: Api.InvitationInvitationSceneEnum): Api.InvitationInvitationSceneEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'INVITATION_SCENE_UNKNOWN') {
		return Api.InvitationInvitationSceneEnum.INVITATIONSCENEUNKNOWN
	}
	if (value === 'INVITATION_SCENE_USER') {
		return Api.InvitationInvitationSceneEnum.INVITATIONSCENEUSER
	}

	throw `Unexpected enum value for Api.InvitationInvitationSceneEnum: ${value}`
}

const ApiInvitationInvitationUseStateKeys: string[] = ['code', 'usedAt', 'user', 'signature']

function modelApiInvitationInvitationUseStateFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationInvitationUseState {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationUseStateKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationInvitationUseState = {
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
		'usedAt': allowUndefined(stringFromRequest)(`${name}.usedAt`, value['usedAt']),
		'user': allowUndefined(stringFromRequest)(`${name}.user`, value['user']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiInvitationInvitationUseStateToResponseContent(name: string, value: Api.InvitationInvitationUseState, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationInvitationUseState> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationInvitationUseStateKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationInvitationUseState> = {
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
		'usedAt': allowUndefined(stringToResponse)(`${name}.usedAt`, value['usedAt']),
		'user': allowUndefined(stringToResponse)(`${name}.user`, value['user']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiInvitationInvitationUseStateFromRequest(name: string, value: any): Api.InvitationInvitationUseState {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationInvitationUseState = modelApiInvitationInvitationUseStateFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationUseState: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationInvitationUseStateToResponse(name: string, value: Api.InvitationInvitationUseState): ToResponse<Api.InvitationInvitationUseState> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationInvitationUseState> = modelApiInvitationInvitationUseStateToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationInvitationUseState: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationSearchInvitationRequestKeys: string[] = ['header', 'body']

function modelApiInvitationSearchInvitationRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationSearchInvitationRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationSearchInvitationRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationSearchInvitationRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationSearchInvitationRequestToResponseContent(name: string, value: Api.InvitationSearchInvitationRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationSearchInvitationRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationSearchInvitationRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationSearchInvitationRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationSearchInvitationRequestFromRequest(name: string, value: any): Api.InvitationSearchInvitationRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationSearchInvitationRequest = modelApiInvitationSearchInvitationRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationSearchInvitationRequestToResponse(name: string, value: Api.InvitationSearchInvitationRequest): ToResponse<Api.InvitationSearchInvitationRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationSearchInvitationRequest> = modelApiInvitationSearchInvitationRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationRequest: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationSearchInvitationRequestBodyKeys: string[] = ['page']

function modelApiInvitationSearchInvitationRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationSearchInvitationRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationSearchInvitationRequestBody = {
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiInvitationSearchInvitationRequestBodyToResponseContent(name: string, value: Api.InvitationSearchInvitationRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationSearchInvitationRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationSearchInvitationRequestBody> = {
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiInvitationSearchInvitationRequestBodyFromRequest(name: string, value: any): Api.InvitationSearchInvitationRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationSearchInvitationRequestBody = modelApiInvitationSearchInvitationRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationSearchInvitationRequestBodyToResponse(name: string, value: Api.InvitationSearchInvitationRequestBody): ToResponse<Api.InvitationSearchInvitationRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationSearchInvitationRequestBody> = modelApiInvitationSearchInvitationRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationSearchInvitationResponseKeys: string[] = ['header', 'body']

function modelApiInvitationSearchInvitationResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationSearchInvitationResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationSearchInvitationResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationSearchInvitationResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiInvitationSearchInvitationResponseToResponseContent(name: string, value: Api.InvitationSearchInvitationResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationSearchInvitationResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationSearchInvitationResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiInvitationSearchInvitationResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiInvitationSearchInvitationResponseFromRequest(name: string, value: any): Api.InvitationSearchInvitationResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationSearchInvitationResponse = modelApiInvitationSearchInvitationResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationSearchInvitationResponseToResponse(name: string, value: Api.InvitationSearchInvitationResponse): ToResponse<Api.InvitationSearchInvitationResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationSearchInvitationResponse> = modelApiInvitationSearchInvitationResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationResponse: ${key}`
			}
		}
	}

	return result
}

const ApiInvitationSearchInvitationResponseBodyKeys: string[] = ['status', 'invitations', 'page']

function modelApiInvitationSearchInvitationResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.InvitationSearchInvitationResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.InvitationSearchInvitationResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'invitations': allowUndefined(arrayFromRequest(modelApiInvitationInvitationMetadataFromRequest))(`${name}.invitations`, value['invitations']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiInvitationSearchInvitationResponseBodyToResponseContent(name: string, value: Api.InvitationSearchInvitationResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.InvitationSearchInvitationResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiInvitationSearchInvitationResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.InvitationSearchInvitationResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'invitations': allowUndefined(arrayToResponse(modelApiInvitationInvitationMetadataToResponse))(`${name}.invitations`, value['invitations']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiInvitationSearchInvitationResponseBodyFromRequest(name: string, value: any): Api.InvitationSearchInvitationResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.InvitationSearchInvitationResponseBody = modelApiInvitationSearchInvitationResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiInvitationSearchInvitationResponseBodyToResponse(name: string, value: Api.InvitationSearchInvitationResponseBody): ToResponse<Api.InvitationSearchInvitationResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.InvitationSearchInvitationResponseBody> = modelApiInvitationSearchInvitationResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.InvitationSearchInvitationResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmAddProviderRequestKeys: string[] = ['header', 'body']

function modelApiLlmAddProviderRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmAddProviderRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmAddProviderRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmAddProviderRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmAddProviderRequestToResponseContent(name: string, value: Api.LlmAddProviderRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmAddProviderRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmAddProviderRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmAddProviderRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmAddProviderRequestFromRequest(name: string, value: any): Api.LlmAddProviderRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmAddProviderRequest = modelApiLlmAddProviderRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmAddProviderRequestToResponse(name: string, value: Api.LlmAddProviderRequest): ToResponse<Api.LlmAddProviderRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmAddProviderRequest> = modelApiLlmAddProviderRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmAddProviderRequestBodyKeys: string[] = ['provider']

function modelApiLlmAddProviderRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmAddProviderRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmAddProviderRequestBody = {
		'provider': allowUndefined(modelApiLlmProviderMetadataFromRequest)(`${name}.provider`, value['provider']),
	}

	return result
}

function modelApiLlmAddProviderRequestBodyToResponseContent(name: string, value: Api.LlmAddProviderRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmAddProviderRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmAddProviderRequestBody> = {
		'provider': allowUndefined(modelApiLlmProviderMetadataToResponse)(`${name}.provider`, value['provider']),
	}

	return result
}

export function modelApiLlmAddProviderRequestBodyFromRequest(name: string, value: any): Api.LlmAddProviderRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmAddProviderRequestBody = modelApiLlmAddProviderRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmAddProviderRequestBodyToResponse(name: string, value: Api.LlmAddProviderRequestBody): ToResponse<Api.LlmAddProviderRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmAddProviderRequestBody> = modelApiLlmAddProviderRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmAddProviderResponseKeys: string[] = ['header', 'body']

function modelApiLlmAddProviderResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmAddProviderResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmAddProviderResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmAddProviderResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmAddProviderResponseToResponseContent(name: string, value: Api.LlmAddProviderResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmAddProviderResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmAddProviderResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmAddProviderResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmAddProviderResponseFromRequest(name: string, value: any): Api.LlmAddProviderResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmAddProviderResponse = modelApiLlmAddProviderResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmAddProviderResponseToResponse(name: string, value: Api.LlmAddProviderResponse): ToResponse<Api.LlmAddProviderResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmAddProviderResponse> = modelApiLlmAddProviderResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmAddProviderResponseBodyKeys: string[] = ['status', 'provider']

function modelApiLlmAddProviderResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmAddProviderResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmAddProviderResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'provider': allowUndefined(modelApiLlmProviderMetadataFromRequest)(`${name}.provider`, value['provider']),
	}

	return result
}

function modelApiLlmAddProviderResponseBodyToResponseContent(name: string, value: Api.LlmAddProviderResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmAddProviderResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmAddProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmAddProviderResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'provider': allowUndefined(modelApiLlmProviderMetadataToResponse)(`${name}.provider`, value['provider']),
	}

	return result
}

export function modelApiLlmAddProviderResponseBodyFromRequest(name: string, value: any): Api.LlmAddProviderResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmAddProviderResponseBody = modelApiLlmAddProviderResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmAddProviderResponseBodyToResponse(name: string, value: Api.LlmAddProviderResponseBody): ToResponse<Api.LlmAddProviderResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmAddProviderResponseBody> = modelApiLlmAddProviderResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmAddProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmComplete200ResponseKeys: string[] = ['result', 'error']

function modelApiLlmComplete200ResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmComplete200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmComplete200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmComplete200Response = {
		'result': allowUndefined(modelApiLlmCompleteResponseFromRequest)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusFromRequest)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiLlmComplete200ResponseToResponseContent(name: string, value: Api.LlmComplete200Response, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmComplete200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmComplete200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmComplete200Response> = {
		'result': allowUndefined(modelApiLlmCompleteResponseToResponse)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusToResponse)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiLlmComplete200ResponseFromRequest(name: string, value: any): Api.LlmComplete200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmComplete200Response = modelApiLlmComplete200ResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmComplete200Response: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmComplete200ResponseToResponse(name: string, value: Api.LlmComplete200Response): ToResponse<Api.LlmComplete200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmComplete200Response> = modelApiLlmComplete200ResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmComplete200Response: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteRequestKeys: string[] = ['header', 'body']

function modelApiLlmCompleteRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmCompleteRequestToResponseContent(name: string, value: Api.LlmCompleteRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmCompleteRequestFromRequest(name: string, value: any): Api.LlmCompleteRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteRequest = modelApiLlmCompleteRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteRequestToResponse(name: string, value: Api.LlmCompleteRequest): ToResponse<Api.LlmCompleteRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteRequest> = modelApiLlmCompleteRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteRequestBodyKeys: string[] = ['sessionId', 'promptId', 'providerId', 'model', 'stream', 'messages']

function modelApiLlmCompleteRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteRequestBody = {
		'sessionId': allowUndefined(stringFromRequest)(`${name}.sessionId`, value['sessionId']),
		'promptId': allowUndefined(stringFromRequest)(`${name}.promptId`, value['promptId']),
		'providerId': allowUndefined(stringFromRequest)(`${name}.providerId`, value['providerId']),
		'model': allowUndefined(stringFromRequest)(`${name}.model`, value['model']),
		'stream': allowUndefined(booleanFromRequest)(`${name}.stream`, value['stream']),
		'messages': allowUndefined(arrayFromRequest(modelApiLlmMessageFromRequest))(`${name}.messages`, value['messages']),
	}

	return result
}

function modelApiLlmCompleteRequestBodyToResponseContent(name: string, value: Api.LlmCompleteRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteRequestBody> = {
		'sessionId': allowUndefined(stringToResponse)(`${name}.sessionId`, value['sessionId']),
		'promptId': allowUndefined(stringToResponse)(`${name}.promptId`, value['promptId']),
		'providerId': allowUndefined(stringToResponse)(`${name}.providerId`, value['providerId']),
		'model': allowUndefined(stringToResponse)(`${name}.model`, value['model']),
		'stream': allowUndefined(booleanToResponse)(`${name}.stream`, value['stream']),
		'messages': allowUndefined(arrayToResponse(modelApiLlmMessageToResponse))(`${name}.messages`, value['messages']),
	}

	return result
}

export function modelApiLlmCompleteRequestBodyFromRequest(name: string, value: any): Api.LlmCompleteRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteRequestBody = modelApiLlmCompleteRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteRequestBodyToResponse(name: string, value: Api.LlmCompleteRequestBody): ToResponse<Api.LlmCompleteRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteRequestBody> = modelApiLlmCompleteRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseKeys: string[] = ['head', 'body', 'tail']

function modelApiLlmCompleteResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponse = {
		'head': allowUndefined(modelApiLlmCompleteResponseHeadFromRequest)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiLlmCompleteResponseBodyFromRequest)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiLlmCompleteResponseTailFromRequest)(`${name}.tail`, value['tail']),
	}

	return result
}

function modelApiLlmCompleteResponseToResponseContent(name: string, value: Api.LlmCompleteResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponse> = {
		'head': allowUndefined(modelApiLlmCompleteResponseHeadToResponse)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiLlmCompleteResponseBodyToResponse)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiLlmCompleteResponseTailToResponse)(`${name}.tail`, value['tail']),
	}

	return result
}

export function modelApiLlmCompleteResponseFromRequest(name: string, value: any): Api.LlmCompleteResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponse = modelApiLlmCompleteResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseToResponse(name: string, value: Api.LlmCompleteResponse): ToResponse<Api.LlmCompleteResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponse> = modelApiLlmCompleteResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseBodyKeys: string[] = ['data']

function modelApiLlmCompleteResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponseBody = {
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiLlmCompleteResponseBodyToResponseContent(name: string, value: Api.LlmCompleteResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponseBody> = {
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiLlmCompleteResponseBodyFromRequest(name: string, value: any): Api.LlmCompleteResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponseBody = modelApiLlmCompleteResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseBodyToResponse(name: string, value: Api.LlmCompleteResponseBody): ToResponse<Api.LlmCompleteResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponseBody> = modelApiLlmCompleteResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseHeadKeys: string[] = ['header', 'body']

function modelApiLlmCompleteResponseHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponseHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponseHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteResponseHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmCompleteResponseHeadToResponseContent(name: string, value: Api.LlmCompleteResponseHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponseHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponseHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteResponseHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmCompleteResponseHeadFromRequest(name: string, value: any): Api.LlmCompleteResponseHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponseHead = modelApiLlmCompleteResponseHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseHeadToResponse(name: string, value: Api.LlmCompleteResponseHead): ToResponse<Api.LlmCompleteResponseHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponseHead> = modelApiLlmCompleteResponseHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseHead: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseHeadBodyKeys: string[] = ['status']

function modelApiLlmCompleteResponseHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponseHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponseHeadBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmCompleteResponseHeadBodyToResponseContent(name: string, value: Api.LlmCompleteResponseHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponseHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponseHeadBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmCompleteResponseHeadBodyFromRequest(name: string, value: any): Api.LlmCompleteResponseHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponseHeadBody = modelApiLlmCompleteResponseHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseHeadBodyToResponse(name: string, value: Api.LlmCompleteResponseHeadBody): ToResponse<Api.LlmCompleteResponseHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponseHeadBody> = modelApiLlmCompleteResponseHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseTailKeys: string[] = ['header', 'body']

function modelApiLlmCompleteResponseTailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponseTail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseTailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponseTail = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteResponseTailBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmCompleteResponseTailToResponseContent(name: string, value: Api.LlmCompleteResponseTail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponseTail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseTailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponseTail> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmCompleteResponseTailBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmCompleteResponseTailFromRequest(name: string, value: any): Api.LlmCompleteResponseTail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponseTail = modelApiLlmCompleteResponseTailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseTail: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseTailToResponse(name: string, value: Api.LlmCompleteResponseTail): ToResponse<Api.LlmCompleteResponseTail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponseTail> = modelApiLlmCompleteResponseTailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseTail: ${key}`
			}
		}
	}

	return result
}

const ApiLlmCompleteResponseTailBodyKeys: string[] = ['status']

function modelApiLlmCompleteResponseTailBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmCompleteResponseTailBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseTailBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmCompleteResponseTailBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmCompleteResponseTailBodyToResponseContent(name: string, value: Api.LlmCompleteResponseTailBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmCompleteResponseTailBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmCompleteResponseTailBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmCompleteResponseTailBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmCompleteResponseTailBodyFromRequest(name: string, value: any): Api.LlmCompleteResponseTailBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmCompleteResponseTailBody = modelApiLlmCompleteResponseTailBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseTailBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmCompleteResponseTailBodyToResponse(name: string, value: Api.LlmCompleteResponseTailBody): ToResponse<Api.LlmCompleteResponseTailBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmCompleteResponseTailBody> = modelApiLlmCompleteResponseTailBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmCompleteResponseTailBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmContentKeys: string[] = ['type', 'data']

function modelApiLlmContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmContent = {
		'type': allowUndefined(enumApiLlmContentTypeEnumFromRequest)(`${name}.type`, value['type']),
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiLlmContentToResponseContent(name: string, value: Api.LlmContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmContent> = {
		'type': allowUndefined(enumApiLlmContentTypeEnumToResponse)(`${name}.type`, value['type']),
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiLlmContentFromRequest(name: string, value: any): Api.LlmContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmContent = modelApiLlmContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmContentToResponse(name: string, value: Api.LlmContent): ToResponse<Api.LlmContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmContent> = modelApiLlmContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmContent: ${key}`
			}
		}
	}

	return result
}

export function enumApiLlmContentTypeEnumFromRequest(name: string, value: any): Api.LlmContentTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTENT_TYPE_UNKNOWN') {
		return Api.LlmContentTypeEnum.CONTENTTYPEUNKNOWN
	}
	if (value === 'CONTENT_TYPE_TEXT') {
		return Api.LlmContentTypeEnum.CONTENTTYPETEXT
	}
	if (value === 'CONTENT_TYPE_IMAGE') {
		return Api.LlmContentTypeEnum.CONTENTTYPEIMAGE
	}
	if (value === 'CONTENT_TYPE_AUDIO') {
		return Api.LlmContentTypeEnum.CONTENTTYPEAUDIO
	}
	if (value === 'CONTENT_TYPE_VIDEO') {
		return Api.LlmContentTypeEnum.CONTENTTYPEVIDEO
	}
	if (value === 'CONTENT_TYPE_DOCUMENT') {
		return Api.LlmContentTypeEnum.CONTENTTYPEDOCUMENT
	}

	throw `Unexpected enum value for Api.LlmContentTypeEnum: ${value}`
}

export function enumApiLlmContentTypeEnumToResponse(name: string, value: Api.LlmContentTypeEnum): Api.LlmContentTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'CONTENT_TYPE_UNKNOWN') {
		return Api.LlmContentTypeEnum.CONTENTTYPEUNKNOWN
	}
	if (value === 'CONTENT_TYPE_TEXT') {
		return Api.LlmContentTypeEnum.CONTENTTYPETEXT
	}
	if (value === 'CONTENT_TYPE_IMAGE') {
		return Api.LlmContentTypeEnum.CONTENTTYPEIMAGE
	}
	if (value === 'CONTENT_TYPE_AUDIO') {
		return Api.LlmContentTypeEnum.CONTENTTYPEAUDIO
	}
	if (value === 'CONTENT_TYPE_VIDEO') {
		return Api.LlmContentTypeEnum.CONTENTTYPEVIDEO
	}
	if (value === 'CONTENT_TYPE_DOCUMENT') {
		return Api.LlmContentTypeEnum.CONTENTTYPEDOCUMENT
	}

	throw `Unexpected enum value for Api.LlmContentTypeEnum: ${value}`
}

const ApiLlmDeleteProviderRequestKeys: string[] = ['header', 'body']

function modelApiLlmDeleteProviderRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmDeleteProviderRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmDeleteProviderRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmDeleteProviderRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmDeleteProviderRequestToResponseContent(name: string, value: Api.LlmDeleteProviderRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmDeleteProviderRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmDeleteProviderRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmDeleteProviderRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmDeleteProviderRequestFromRequest(name: string, value: any): Api.LlmDeleteProviderRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmDeleteProviderRequest = modelApiLlmDeleteProviderRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmDeleteProviderRequestToResponse(name: string, value: Api.LlmDeleteProviderRequest): ToResponse<Api.LlmDeleteProviderRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmDeleteProviderRequest> = modelApiLlmDeleteProviderRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmDeleteProviderRequestBodyKeys: string[] = ['uid']

function modelApiLlmDeleteProviderRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmDeleteProviderRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmDeleteProviderRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiLlmDeleteProviderRequestBodyToResponseContent(name: string, value: Api.LlmDeleteProviderRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmDeleteProviderRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmDeleteProviderRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiLlmDeleteProviderRequestBodyFromRequest(name: string, value: any): Api.LlmDeleteProviderRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmDeleteProviderRequestBody = modelApiLlmDeleteProviderRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmDeleteProviderRequestBodyToResponse(name: string, value: Api.LlmDeleteProviderRequestBody): ToResponse<Api.LlmDeleteProviderRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmDeleteProviderRequestBody> = modelApiLlmDeleteProviderRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmDeleteProviderResponseKeys: string[] = ['header', 'body']

function modelApiLlmDeleteProviderResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmDeleteProviderResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmDeleteProviderResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmDeleteProviderResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmDeleteProviderResponseToResponseContent(name: string, value: Api.LlmDeleteProviderResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmDeleteProviderResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmDeleteProviderResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmDeleteProviderResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmDeleteProviderResponseFromRequest(name: string, value: any): Api.LlmDeleteProviderResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmDeleteProviderResponse = modelApiLlmDeleteProviderResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmDeleteProviderResponseToResponse(name: string, value: Api.LlmDeleteProviderResponse): ToResponse<Api.LlmDeleteProviderResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmDeleteProviderResponse> = modelApiLlmDeleteProviderResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmDeleteProviderResponseBodyKeys: string[] = ['status']

function modelApiLlmDeleteProviderResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmDeleteProviderResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmDeleteProviderResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmDeleteProviderResponseBodyToResponseContent(name: string, value: Api.LlmDeleteProviderResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmDeleteProviderResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmDeleteProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmDeleteProviderResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmDeleteProviderResponseBodyFromRequest(name: string, value: any): Api.LlmDeleteProviderResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmDeleteProviderResponseBody = modelApiLlmDeleteProviderResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmDeleteProviderResponseBodyToResponse(name: string, value: Api.LlmDeleteProviderResponseBody): ToResponse<Api.LlmDeleteProviderResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmDeleteProviderResponseBody> = modelApiLlmDeleteProviderResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmDeleteProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmEdit200ResponseKeys: string[] = ['result', 'error']

function modelApiLlmEdit200ResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmEdit200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEdit200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmEdit200Response = {
		'result': allowUndefined(modelApiLlmEditResponseFromRequest)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusFromRequest)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiLlmEdit200ResponseToResponseContent(name: string, value: Api.LlmEdit200Response, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmEdit200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEdit200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmEdit200Response> = {
		'result': allowUndefined(modelApiLlmEditResponseToResponse)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusToResponse)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiLlmEdit200ResponseFromRequest(name: string, value: any): Api.LlmEdit200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmEdit200Response = modelApiLlmEdit200ResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEdit200Response: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmEdit200ResponseToResponse(name: string, value: Api.LlmEdit200Response): ToResponse<Api.LlmEdit200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmEdit200Response> = modelApiLlmEdit200ResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEdit200Response: ${key}`
			}
		}
	}

	return result
}

const ApiLlmEditRequestKeys: string[] = ['did', 'llmId', 'model', 'srcType', 'desType', 'textPrompt', 'imagePrompt', 'imageResult']

function modelApiLlmEditRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmEditRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEditRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmEditRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'llmId': allowUndefined(stringFromRequest)(`${name}.llmId`, value['llmId']),
		'model': allowUndefined(stringFromRequest)(`${name}.model`, value['model']),
		'srcType': allowUndefined(enumApiCommonDigitalFormatEnumFromRequest)(`${name}.srcType`, value['srcType']),
		'desType': allowUndefined(enumApiCommonDigitalFormatEnumFromRequest)(`${name}.desType`, value['desType']),
		'textPrompt': allowUndefined(modelApiLlmTextPromptFromRequest)(`${name}.textPrompt`, value['textPrompt']),
		'imagePrompt': allowUndefined(modelApiLlmImagePromptFromRequest)(`${name}.imagePrompt`, value['imagePrompt']),
		'imageResult': allowUndefined(modelApiLlmImageResultFromRequest)(`${name}.imageResult`, value['imageResult']),
	}

	return result
}

function modelApiLlmEditRequestToResponseContent(name: string, value: Api.LlmEditRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmEditRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEditRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmEditRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'llmId': allowUndefined(stringToResponse)(`${name}.llmId`, value['llmId']),
		'model': allowUndefined(stringToResponse)(`${name}.model`, value['model']),
		'srcType': allowUndefined(enumApiCommonDigitalFormatEnumToResponse)(`${name}.srcType`, value['srcType']),
		'desType': allowUndefined(enumApiCommonDigitalFormatEnumToResponse)(`${name}.desType`, value['desType']),
		'textPrompt': allowUndefined(modelApiLlmTextPromptToResponse)(`${name}.textPrompt`, value['textPrompt']),
		'imagePrompt': allowUndefined(modelApiLlmImagePromptToResponse)(`${name}.imagePrompt`, value['imagePrompt']),
		'imageResult': allowUndefined(modelApiLlmImageResultToResponse)(`${name}.imageResult`, value['imageResult']),
	}

	return result
}

export function modelApiLlmEditRequestFromRequest(name: string, value: any): Api.LlmEditRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmEditRequest = modelApiLlmEditRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEditRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmEditRequestToResponse(name: string, value: Api.LlmEditRequest): ToResponse<Api.LlmEditRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmEditRequest> = modelApiLlmEditRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEditRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmEditResponseKeys: string[] = ['status', 'base64', 'bytes']

function modelApiLlmEditResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmEditResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEditResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmEditResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'base64': allowUndefined(stringFromRequest)(`${name}.base64`, value['base64']),
		'bytes': allowUndefined(stringFromRequest)(`${name}.bytes`, value['bytes']),
	}

	return result
}

function modelApiLlmEditResponseToResponseContent(name: string, value: Api.LlmEditResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmEditResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmEditResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmEditResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'base64': allowUndefined(stringToResponse)(`${name}.base64`, value['base64']),
		'bytes': allowUndefined(stringToResponse)(`${name}.bytes`, value['bytes']),
	}

	return result
}

export function modelApiLlmEditResponseFromRequest(name: string, value: any): Api.LlmEditResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmEditResponse = modelApiLlmEditResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEditResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmEditResponseToResponse(name: string, value: Api.LlmEditResponse): ToResponse<Api.LlmEditResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmEditResponse> = modelApiLlmEditResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmEditResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerate200ResponseKeys: string[] = ['result', 'error']

function modelApiLlmGenerate200ResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerate200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerate200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerate200Response = {
		'result': allowUndefined(modelApiLlmGenerateResponseFromRequest)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusFromRequest)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiLlmGenerate200ResponseToResponseContent(name: string, value: Api.LlmGenerate200Response, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerate200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerate200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerate200Response> = {
		'result': allowUndefined(modelApiLlmGenerateResponseToResponse)(`${name}.result`, value['result']),
		'error': allowUndefined(modelApiRpcStatusToResponse)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiLlmGenerate200ResponseFromRequest(name: string, value: any): Api.LlmGenerate200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerate200Response = modelApiLlmGenerate200ResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerate200Response: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerate200ResponseToResponse(name: string, value: Api.LlmGenerate200Response): ToResponse<Api.LlmGenerate200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerate200Response> = modelApiLlmGenerate200ResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerate200Response: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateRequestKeys: string[] = ['header', 'body']

function modelApiLlmGenerateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmGenerateRequestToResponseContent(name: string, value: Api.LlmGenerateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmGenerateRequestFromRequest(name: string, value: any): Api.LlmGenerateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateRequest = modelApiLlmGenerateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateRequestToResponse(name: string, value: Api.LlmGenerateRequest): ToResponse<Api.LlmGenerateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateRequest> = modelApiLlmGenerateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateRequestBodyKeys: string[] = ['llmId', 'model', 'prompt', 'responseContentFormat', 'count', 'size', 'quality', 'style']

function modelApiLlmGenerateRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateRequestBody = {
		'llmId': allowUndefined(stringFromRequest)(`${name}.llmId`, value['llmId']),
		'model': allowUndefined(stringFromRequest)(`${name}.model`, value['model']),
		'prompt': allowUndefined(stringFromRequest)(`${name}.prompt`, value['prompt']),
		'responseContentFormat': allowUndefined(enumApiCommonContentFormatEnumFromRequest)(`${name}.responseContentFormat`, value['responseContentFormat']),
		'count': allowUndefined(integerFromRequest)(`${name}.count`, value['count']),
		'size': allowUndefined(stringFromRequest)(`${name}.size`, value['size']),
		'quality': allowUndefined(stringFromRequest)(`${name}.quality`, value['quality']),
		'style': allowUndefined(stringFromRequest)(`${name}.style`, value['style']),
	}

	return result
}

function modelApiLlmGenerateRequestBodyToResponseContent(name: string, value: Api.LlmGenerateRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateRequestBody> = {
		'llmId': allowUndefined(stringToResponse)(`${name}.llmId`, value['llmId']),
		'model': allowUndefined(stringToResponse)(`${name}.model`, value['model']),
		'prompt': allowUndefined(stringToResponse)(`${name}.prompt`, value['prompt']),
		'responseContentFormat': allowUndefined(enumApiCommonContentFormatEnumToResponse)(`${name}.responseContentFormat`, value['responseContentFormat']),
		'count': allowUndefined(integerToResponse)(`${name}.count`, value['count']),
		'size': allowUndefined(stringToResponse)(`${name}.size`, value['size']),
		'quality': allowUndefined(stringToResponse)(`${name}.quality`, value['quality']),
		'style': allowUndefined(stringToResponse)(`${name}.style`, value['style']),
	}

	return result
}

export function modelApiLlmGenerateRequestBodyFromRequest(name: string, value: any): Api.LlmGenerateRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateRequestBody = modelApiLlmGenerateRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateRequestBodyToResponse(name: string, value: Api.LlmGenerateRequestBody): ToResponse<Api.LlmGenerateRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateRequestBody> = modelApiLlmGenerateRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseKeys: string[] = ['head', 'body', 'tail']

function modelApiLlmGenerateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponse = {
		'head': allowUndefined(modelApiLlmGenerateResponseHeadFromRequest)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiLlmGenerateResponseBodyFromRequest)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiLlmGenerateResponseTailFromRequest)(`${name}.tail`, value['tail']),
	}

	return result
}

function modelApiLlmGenerateResponseToResponseContent(name: string, value: Api.LlmGenerateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponse> = {
		'head': allowUndefined(modelApiLlmGenerateResponseHeadToResponse)(`${name}.head`, value['head']),
		'body': allowUndefined(modelApiLlmGenerateResponseBodyToResponse)(`${name}.body`, value['body']),
		'tail': allowUndefined(modelApiLlmGenerateResponseTailToResponse)(`${name}.tail`, value['tail']),
	}

	return result
}

export function modelApiLlmGenerateResponseFromRequest(name: string, value: any): Api.LlmGenerateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponse = modelApiLlmGenerateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseToResponse(name: string, value: Api.LlmGenerateResponse): ToResponse<Api.LlmGenerateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponse> = modelApiLlmGenerateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseBodyKeys: string[] = ['data']

function modelApiLlmGenerateResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponseBody = {
		'data': allowUndefined(stringFromRequest)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiLlmGenerateResponseBodyToResponseContent(name: string, value: Api.LlmGenerateResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponseBody> = {
		'data': allowUndefined(stringToResponse)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiLlmGenerateResponseBodyFromRequest(name: string, value: any): Api.LlmGenerateResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponseBody = modelApiLlmGenerateResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseBodyToResponse(name: string, value: Api.LlmGenerateResponseBody): ToResponse<Api.LlmGenerateResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponseBody> = modelApiLlmGenerateResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseHeadKeys: string[] = ['header', 'body']

function modelApiLlmGenerateResponseHeadFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponseHead {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseHeadKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponseHead = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateResponseHeadBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmGenerateResponseHeadToResponseContent(name: string, value: Api.LlmGenerateResponseHead, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponseHead> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseHeadKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponseHead> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateResponseHeadBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmGenerateResponseHeadFromRequest(name: string, value: any): Api.LlmGenerateResponseHead {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponseHead = modelApiLlmGenerateResponseHeadFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseHead: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseHeadToResponse(name: string, value: Api.LlmGenerateResponseHead): ToResponse<Api.LlmGenerateResponseHead> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponseHead> = modelApiLlmGenerateResponseHeadToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseHead: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseHeadBodyKeys: string[] = ['status']

function modelApiLlmGenerateResponseHeadBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponseHeadBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponseHeadBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmGenerateResponseHeadBodyToResponseContent(name: string, value: Api.LlmGenerateResponseHeadBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponseHeadBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseHeadBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponseHeadBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmGenerateResponseHeadBodyFromRequest(name: string, value: any): Api.LlmGenerateResponseHeadBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponseHeadBody = modelApiLlmGenerateResponseHeadBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseHeadBodyToResponse(name: string, value: Api.LlmGenerateResponseHeadBody): ToResponse<Api.LlmGenerateResponseHeadBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponseHeadBody> = modelApiLlmGenerateResponseHeadBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseHeadBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseTailKeys: string[] = ['header', 'body']

function modelApiLlmGenerateResponseTailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponseTail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseTailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponseTail = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateResponseTailBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmGenerateResponseTailToResponseContent(name: string, value: Api.LlmGenerateResponseTail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponseTail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseTailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponseTail> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmGenerateResponseTailBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmGenerateResponseTailFromRequest(name: string, value: any): Api.LlmGenerateResponseTail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponseTail = modelApiLlmGenerateResponseTailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseTail: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseTailToResponse(name: string, value: Api.LlmGenerateResponseTail): ToResponse<Api.LlmGenerateResponseTail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponseTail> = modelApiLlmGenerateResponseTailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseTail: ${key}`
			}
		}
	}

	return result
}

const ApiLlmGenerateResponseTailBodyKeys: string[] = ['status']

function modelApiLlmGenerateResponseTailBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmGenerateResponseTailBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseTailBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmGenerateResponseTailBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmGenerateResponseTailBodyToResponseContent(name: string, value: Api.LlmGenerateResponseTailBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmGenerateResponseTailBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmGenerateResponseTailBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmGenerateResponseTailBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmGenerateResponseTailBodyFromRequest(name: string, value: any): Api.LlmGenerateResponseTailBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmGenerateResponseTailBody = modelApiLlmGenerateResponseTailBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseTailBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmGenerateResponseTailBodyToResponse(name: string, value: Api.LlmGenerateResponseTailBody): ToResponse<Api.LlmGenerateResponseTailBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmGenerateResponseTailBody> = modelApiLlmGenerateResponseTailBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmGenerateResponseTailBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmImagePromptKeys: string[] = ['message', 'mask', 'image']

function modelApiLlmImagePromptFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmImagePrompt {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmImagePromptKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmImagePrompt = {
		'message': allowUndefined(stringFromRequest)(`${name}.message`, value['message']),
		'mask': allowUndefined(stringFromRequest)(`${name}.mask`, value['mask']),
		'image': allowUndefined(stringFromRequest)(`${name}.image`, value['image']),
	}

	return result
}

function modelApiLlmImagePromptToResponseContent(name: string, value: Api.LlmImagePrompt, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmImagePrompt> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmImagePromptKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmImagePrompt> = {
		'message': allowUndefined(stringToResponse)(`${name}.message`, value['message']),
		'mask': allowUndefined(stringToResponse)(`${name}.mask`, value['mask']),
		'image': allowUndefined(stringToResponse)(`${name}.image`, value['image']),
	}

	return result
}

export function modelApiLlmImagePromptFromRequest(name: string, value: any): Api.LlmImagePrompt {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmImagePrompt = modelApiLlmImagePromptFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmImagePrompt: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmImagePromptToResponse(name: string, value: Api.LlmImagePrompt): ToResponse<Api.LlmImagePrompt> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmImagePrompt> = modelApiLlmImagePromptToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmImagePrompt: ${key}`
			}
		}
	}

	return result
}

const ApiLlmImageResultKeys: string[] = ['responseContentFormat', 'count', 'size', 'quality', 'style']

function modelApiLlmImageResultFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmImageResult {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmImageResultKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmImageResult = {
		'responseContentFormat': allowUndefined(enumApiCommonContentFormatEnumFromRequest)(`${name}.responseContentFormat`, value['responseContentFormat']),
		'count': allowUndefined(integerFromRequest)(`${name}.count`, value['count']),
		'size': allowUndefined(stringFromRequest)(`${name}.size`, value['size']),
		'quality': allowUndefined(stringFromRequest)(`${name}.quality`, value['quality']),
		'style': allowUndefined(stringFromRequest)(`${name}.style`, value['style']),
	}

	return result
}

function modelApiLlmImageResultToResponseContent(name: string, value: Api.LlmImageResult, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmImageResult> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmImageResultKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmImageResult> = {
		'responseContentFormat': allowUndefined(enumApiCommonContentFormatEnumToResponse)(`${name}.responseContentFormat`, value['responseContentFormat']),
		'count': allowUndefined(integerToResponse)(`${name}.count`, value['count']),
		'size': allowUndefined(stringToResponse)(`${name}.size`, value['size']),
		'quality': allowUndefined(stringToResponse)(`${name}.quality`, value['quality']),
		'style': allowUndefined(stringToResponse)(`${name}.style`, value['style']),
	}

	return result
}

export function modelApiLlmImageResultFromRequest(name: string, value: any): Api.LlmImageResult {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmImageResult = modelApiLlmImageResultFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmImageResult: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmImageResultToResponse(name: string, value: Api.LlmImageResult): ToResponse<Api.LlmImageResult> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmImageResult> = modelApiLlmImageResultToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmImageResult: ${key}`
			}
		}
	}

	return result
}

const ApiLlmMessageKeys: string[] = ['role', 'content']

function modelApiLlmMessageFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmMessage {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmMessageKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmMessage = {
		'role': allowUndefined(enumApiLlmMessageRoleEnumFromRequest)(`${name}.role`, value['role']),
		'content': allowUndefined(modelApiLlmContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiLlmMessageToResponseContent(name: string, value: Api.LlmMessage, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmMessage> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmMessageKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmMessage> = {
		'role': allowUndefined(enumApiLlmMessageRoleEnumToResponse)(`${name}.role`, value['role']),
		'content': allowUndefined(modelApiLlmContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiLlmMessageFromRequest(name: string, value: any): Api.LlmMessage {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmMessage = modelApiLlmMessageFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmMessage: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmMessageToResponse(name: string, value: Api.LlmMessage): ToResponse<Api.LlmMessage> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmMessage> = modelApiLlmMessageToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmMessage: ${key}`
			}
		}
	}

	return result
}

export function enumApiLlmMessageRoleEnumFromRequest(name: string, value: any): Api.LlmMessageRoleEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MESSAGE_ROLE_UNKNOWN') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEUNKNOWN
	}
	if (value === 'MESSAGE_ROLE_ASSISTANT') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEASSISTANT
	}
	if (value === 'MESSAGE_ROLE_USER') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEUSER
	}
	if (value === 'MESSAGE_ROLE_SYSTEM') {
		return Api.LlmMessageRoleEnum.MESSAGEROLESYSTEM
	}

	throw `Unexpected enum value for Api.LlmMessageRoleEnum: ${value}`
}

export function enumApiLlmMessageRoleEnumToResponse(name: string, value: Api.LlmMessageRoleEnum): Api.LlmMessageRoleEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MESSAGE_ROLE_UNKNOWN') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEUNKNOWN
	}
	if (value === 'MESSAGE_ROLE_ASSISTANT') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEASSISTANT
	}
	if (value === 'MESSAGE_ROLE_USER') {
		return Api.LlmMessageRoleEnum.MESSAGEROLEUSER
	}
	if (value === 'MESSAGE_ROLE_SYSTEM') {
		return Api.LlmMessageRoleEnum.MESSAGEROLESYSTEM
	}

	throw `Unexpected enum value for Api.LlmMessageRoleEnum: ${value}`
}

export function enumApiLlmModelFeatureEnumFromRequest(name: string, value: any): Api.LlmModelFeatureEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MODEL_FEATURE_AGENT_THOUGHT') {
		return Api.LlmModelFeatureEnum.MODELFEATUREAGENTTHOUGHT
	}
	if (value === 'MODEL_FEATURE_VISION') {
		return Api.LlmModelFeatureEnum.MODELFEATUREVISION
	}
	if (value === 'MODEL_FEATURE_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATURETOOLCALL
	}
	if (value === 'MODEL_FEATURE_MULTI_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATUREMULTITOOLCALL
	}
	if (value === 'MODEL_FEATURE_STREAM_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATURESTREAMTOOLCALL
	}
	if (value === 'MODEL_FEATURE_DOCUMENT') {
		return Api.LlmModelFeatureEnum.MODELFEATUREDOCUMENT
	}
	if (value === 'MODEL_FEATURE_VIDEO') {
		return Api.LlmModelFeatureEnum.MODELFEATUREVIDEO
	}
	if (value === 'MODEL_FEATURE_AUDIO') {
		return Api.LlmModelFeatureEnum.MODELFEATUREAUDIO
	}

	throw `Unexpected enum value for Api.LlmModelFeatureEnum: ${value}`
}

export function enumApiLlmModelFeatureEnumToResponse(name: string, value: Api.LlmModelFeatureEnum): Api.LlmModelFeatureEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MODEL_FEATURE_AGENT_THOUGHT') {
		return Api.LlmModelFeatureEnum.MODELFEATUREAGENTTHOUGHT
	}
	if (value === 'MODEL_FEATURE_VISION') {
		return Api.LlmModelFeatureEnum.MODELFEATUREVISION
	}
	if (value === 'MODEL_FEATURE_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATURETOOLCALL
	}
	if (value === 'MODEL_FEATURE_MULTI_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATUREMULTITOOLCALL
	}
	if (value === 'MODEL_FEATURE_STREAM_TOOL_CALL') {
		return Api.LlmModelFeatureEnum.MODELFEATURESTREAMTOOLCALL
	}
	if (value === 'MODEL_FEATURE_DOCUMENT') {
		return Api.LlmModelFeatureEnum.MODELFEATUREDOCUMENT
	}
	if (value === 'MODEL_FEATURE_VIDEO') {
		return Api.LlmModelFeatureEnum.MODELFEATUREVIDEO
	}
	if (value === 'MODEL_FEATURE_AUDIO') {
		return Api.LlmModelFeatureEnum.MODELFEATUREAUDIO
	}

	throw `Unexpected enum value for Api.LlmModelFeatureEnum: ${value}`
}

const ApiLlmModelMetadataKeys: string[] = ['providerCode', 'type', 'name', 'features']

function modelApiLlmModelMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmModelMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmModelMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmModelMetadata = {
		'providerCode': allowUndefined(enumApiLlmProviderCodeEnumFromRequest)(`${name}.providerCode`, value['providerCode']),
		'type': allowUndefined(enumApiLlmModelTypeEnumFromRequest)(`${name}.type`, value['type']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'features': allowUndefined(arrayFromRequest(enumApiLlmModelFeatureEnumFromRequest))(`${name}.features`, value['features']),
	}

	return result
}

function modelApiLlmModelMetadataToResponseContent(name: string, value: Api.LlmModelMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmModelMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmModelMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmModelMetadata> = {
		'providerCode': allowUndefined(enumApiLlmProviderCodeEnumToResponse)(`${name}.providerCode`, value['providerCode']),
		'type': allowUndefined(enumApiLlmModelTypeEnumToResponse)(`${name}.type`, value['type']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'features': allowUndefined(arrayToResponse(enumApiLlmModelFeatureEnumToResponse))(`${name}.features`, value['features']),
	}

	return result
}

export function modelApiLlmModelMetadataFromRequest(name: string, value: any): Api.LlmModelMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmModelMetadata = modelApiLlmModelMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmModelMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmModelMetadataToResponse(name: string, value: Api.LlmModelMetadata): ToResponse<Api.LlmModelMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmModelMetadata> = modelApiLlmModelMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmModelMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiLlmModelTypeEnumFromRequest(name: string, value: any): Api.LlmModelTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MODEL_TYPE_UNKNOWN') {
		return Api.LlmModelTypeEnum.MODELTYPEUNKNOWN
	}
	if (value === 'MODEL_TYPE_LLM') {
		return Api.LlmModelTypeEnum.MODELTYPELLM
	}
	if (value === 'MODEL_TYPE_TEXT_EMBEDDING') {
		return Api.LlmModelTypeEnum.MODELTYPETEXTEMBEDDING
	}
	if (value === 'MODEL_TYPE_RERANK') {
		return Api.LlmModelTypeEnum.MODELTYPERERANK
	}
	if (value === 'MODEL_TYPE_SPEECH2TEXT') {
		return Api.LlmModelTypeEnum.MODELTYPESPEECH2TEXT
	}
	if (value === 'MODEL_TYPE_TTS') {
		return Api.LlmModelTypeEnum.MODELTYPETTS
	}
	if (value === 'MODEL_TYPE_MODERATION') {
		return Api.LlmModelTypeEnum.MODELTYPEMODERATION
	}
	if (value === 'MODEL_TYPE_TEXT2IMAGE') {
		return Api.LlmModelTypeEnum.MODELTYPETEXT2IMAGE
	}

	throw `Unexpected enum value for Api.LlmModelTypeEnum: ${value}`
}

export function enumApiLlmModelTypeEnumToResponse(name: string, value: Api.LlmModelTypeEnum): Api.LlmModelTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'MODEL_TYPE_UNKNOWN') {
		return Api.LlmModelTypeEnum.MODELTYPEUNKNOWN
	}
	if (value === 'MODEL_TYPE_LLM') {
		return Api.LlmModelTypeEnum.MODELTYPELLM
	}
	if (value === 'MODEL_TYPE_TEXT_EMBEDDING') {
		return Api.LlmModelTypeEnum.MODELTYPETEXTEMBEDDING
	}
	if (value === 'MODEL_TYPE_RERANK') {
		return Api.LlmModelTypeEnum.MODELTYPERERANK
	}
	if (value === 'MODEL_TYPE_SPEECH2TEXT') {
		return Api.LlmModelTypeEnum.MODELTYPESPEECH2TEXT
	}
	if (value === 'MODEL_TYPE_TTS') {
		return Api.LlmModelTypeEnum.MODELTYPETTS
	}
	if (value === 'MODEL_TYPE_MODERATION') {
		return Api.LlmModelTypeEnum.MODELTYPEMODERATION
	}
	if (value === 'MODEL_TYPE_TEXT2IMAGE') {
		return Api.LlmModelTypeEnum.MODELTYPETEXT2IMAGE
	}

	throw `Unexpected enum value for Api.LlmModelTypeEnum: ${value}`
}

export function enumApiLlmProviderCodeEnumFromRequest(name: string, value: any): Api.LlmProviderCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'PROVIDER_CODE_UNKNOWN') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEUNKNOWN
	}
	if (value === 'PROVIDER_CODE_OPENAI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEOPENAI
	}
	if (value === 'PROVIDER_CODE_TONGYI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODETONGYI
	}
	if (value === 'PROVIDER_CODE_ZHIPUAI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEZHIPUAI
	}
	if (value === 'PROVIDER_CODE_GROK') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEGROK
	}
	if (value === 'PROVIDER_CODE_DEEPSEEK') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEDEEPSEEK
	}

	throw `Unexpected enum value for Api.LlmProviderCodeEnum: ${value}`
}

export function enumApiLlmProviderCodeEnumToResponse(name: string, value: Api.LlmProviderCodeEnum): Api.LlmProviderCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'PROVIDER_CODE_UNKNOWN') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEUNKNOWN
	}
	if (value === 'PROVIDER_CODE_OPENAI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEOPENAI
	}
	if (value === 'PROVIDER_CODE_TONGYI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODETONGYI
	}
	if (value === 'PROVIDER_CODE_ZHIPUAI') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEZHIPUAI
	}
	if (value === 'PROVIDER_CODE_GROK') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEGROK
	}
	if (value === 'PROVIDER_CODE_DEEPSEEK') {
		return Api.LlmProviderCodeEnum.PROVIDERCODEDEEPSEEK
	}

	throw `Unexpected enum value for Api.LlmProviderCodeEnum: ${value}`
}

const ApiLlmProviderDescriptionKeys: string[] = ['code', 'name', 'description', 'supportedModelTypes', 'avatar']

function modelApiLlmProviderDescriptionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDescription {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDescription = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumFromRequest)(`${name}.code`, value['code']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'supportedModelTypes': allowUndefined(arrayFromRequest(enumApiLlmModelTypeEnumFromRequest))(`${name}.supportedModelTypes`, value['supportedModelTypes']),
		'avatar': allowUndefined(stringFromRequest)(`${name}.avatar`, value['avatar']),
	}

	return result
}

function modelApiLlmProviderDescriptionToResponseContent(name: string, value: Api.LlmProviderDescription, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDescription> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDescription> = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumToResponse)(`${name}.code`, value['code']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'supportedModelTypes': allowUndefined(arrayToResponse(enumApiLlmModelTypeEnumToResponse))(`${name}.supportedModelTypes`, value['supportedModelTypes']),
		'avatar': allowUndefined(stringToResponse)(`${name}.avatar`, value['avatar']),
	}

	return result
}

export function modelApiLlmProviderDescriptionFromRequest(name: string, value: any): Api.LlmProviderDescription {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDescription = modelApiLlmProviderDescriptionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescription: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDescriptionToResponse(name: string, value: Api.LlmProviderDescription): ToResponse<Api.LlmProviderDescription> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDescription> = modelApiLlmProviderDescriptionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescription: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDescriptionsRequestKeys: string[] = ['header']

function modelApiLlmProviderDescriptionsRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDescriptionsRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDescriptionsRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiLlmProviderDescriptionsRequestToResponseContent(name: string, value: Api.LlmProviderDescriptionsRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDescriptionsRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDescriptionsRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiLlmProviderDescriptionsRequestFromRequest(name: string, value: any): Api.LlmProviderDescriptionsRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDescriptionsRequest = modelApiLlmProviderDescriptionsRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDescriptionsRequestToResponse(name: string, value: Api.LlmProviderDescriptionsRequest): ToResponse<Api.LlmProviderDescriptionsRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDescriptionsRequest> = modelApiLlmProviderDescriptionsRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDescriptionsResponseKeys: string[] = ['header', 'body']

function modelApiLlmProviderDescriptionsResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDescriptionsResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDescriptionsResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDescriptionsResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmProviderDescriptionsResponseToResponseContent(name: string, value: Api.LlmProviderDescriptionsResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDescriptionsResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDescriptionsResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDescriptionsResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmProviderDescriptionsResponseFromRequest(name: string, value: any): Api.LlmProviderDescriptionsResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDescriptionsResponse = modelApiLlmProviderDescriptionsResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDescriptionsResponseToResponse(name: string, value: Api.LlmProviderDescriptionsResponse): ToResponse<Api.LlmProviderDescriptionsResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDescriptionsResponse> = modelApiLlmProviderDescriptionsResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDescriptionsResponseBodyKeys: string[] = ['status', 'descriptions']

function modelApiLlmProviderDescriptionsResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDescriptionsResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDescriptionsResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'descriptions': allowUndefined(arrayFromRequest(modelApiLlmProviderDescriptionFromRequest))(`${name}.descriptions`, value['descriptions']),
	}

	return result
}

function modelApiLlmProviderDescriptionsResponseBodyToResponseContent(name: string, value: Api.LlmProviderDescriptionsResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDescriptionsResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDescriptionsResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDescriptionsResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'descriptions': allowUndefined(arrayToResponse(modelApiLlmProviderDescriptionToResponse))(`${name}.descriptions`, value['descriptions']),
	}

	return result
}

export function modelApiLlmProviderDescriptionsResponseBodyFromRequest(name: string, value: any): Api.LlmProviderDescriptionsResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDescriptionsResponseBody = modelApiLlmProviderDescriptionsResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDescriptionsResponseBodyToResponse(name: string, value: Api.LlmProviderDescriptionsResponseBody): ToResponse<Api.LlmProviderDescriptionsResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDescriptionsResponseBody> = modelApiLlmProviderDescriptionsResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDescriptionsResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDetailKeys: string[] = ['provider', 'state']

function modelApiLlmProviderDetailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDetail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDetail = {
		'provider': allowUndefined(modelApiLlmProviderMetadataFromRequest)(`${name}.provider`, value['provider']),
		'state': allowUndefined(modelApiLlmProviderStateFromRequest)(`${name}.state`, value['state']),
	}

	return result
}

function modelApiLlmProviderDetailToResponseContent(name: string, value: Api.LlmProviderDetail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDetail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDetail> = {
		'provider': allowUndefined(modelApiLlmProviderMetadataToResponse)(`${name}.provider`, value['provider']),
		'state': allowUndefined(modelApiLlmProviderStateToResponse)(`${name}.state`, value['state']),
	}

	return result
}

export function modelApiLlmProviderDetailFromRequest(name: string, value: any): Api.LlmProviderDetail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDetail = modelApiLlmProviderDetailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetail: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDetailToResponse(name: string, value: Api.LlmProviderDetail): ToResponse<Api.LlmProviderDetail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDetail> = modelApiLlmProviderDetailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetail: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDetailRequestKeys: string[] = ['header', 'body']

function modelApiLlmProviderDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmProviderDetailRequestToResponseContent(name: string, value: Api.LlmProviderDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmProviderDetailRequestFromRequest(name: string, value: any): Api.LlmProviderDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDetailRequest = modelApiLlmProviderDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDetailRequestToResponse(name: string, value: Api.LlmProviderDetailRequest): ToResponse<Api.LlmProviderDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDetailRequest> = modelApiLlmProviderDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDetailRequestBodyKeys: string[] = ['uid']

function modelApiLlmProviderDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiLlmProviderDetailRequestBodyToResponseContent(name: string, value: Api.LlmProviderDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiLlmProviderDetailRequestBodyFromRequest(name: string, value: any): Api.LlmProviderDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDetailRequestBody = modelApiLlmProviderDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDetailRequestBodyToResponse(name: string, value: Api.LlmProviderDetailRequestBody): ToResponse<Api.LlmProviderDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDetailRequestBody> = modelApiLlmProviderDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDetailResponseKeys: string[] = ['header', 'body']

function modelApiLlmProviderDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmProviderDetailResponseToResponseContent(name: string, value: Api.LlmProviderDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmProviderDetailResponseFromRequest(name: string, value: any): Api.LlmProviderDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDetailResponse = modelApiLlmProviderDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDetailResponseToResponse(name: string, value: Api.LlmProviderDetailResponse): ToResponse<Api.LlmProviderDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDetailResponse> = modelApiLlmProviderDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderDetailResponseBodyKeys: string[] = ['status', 'detail']

function modelApiLlmProviderDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiLlmProviderDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiLlmProviderDetailResponseBodyToResponseContent(name: string, value: Api.LlmProviderDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiLlmProviderDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiLlmProviderDetailResponseBodyFromRequest(name: string, value: any): Api.LlmProviderDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderDetailResponseBody = modelApiLlmProviderDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderDetailResponseBodyToResponse(name: string, value: Api.LlmProviderDetailResponseBody): ToResponse<Api.LlmProviderDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderDetailResponseBody> = modelApiLlmProviderDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderMetadataKeys: string[] = ['uid', 'owner', 'name', 'code', 'config', 'quotaType', 'quotaLimit', 'createdAt', 'updatedAt', 'signature']

function modelApiLlmProviderMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'code': allowUndefined(enumApiLlmProviderCodeEnumFromRequest)(`${name}.code`, value['code']),
		'config': allowUndefined(stringFromRequest)(`${name}.config`, value['config']),
		'quotaType': allowUndefined(enumApiLlmQuotaTypeEnumFromRequest)(`${name}.quotaType`, value['quotaType']),
		'quotaLimit': allowUndefined(stringFromRequest)(`${name}.quotaLimit`, value['quotaLimit']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiLlmProviderMetadataToResponseContent(name: string, value: Api.LlmProviderMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'code': allowUndefined(enumApiLlmProviderCodeEnumToResponse)(`${name}.code`, value['code']),
		'config': allowUndefined(stringToResponse)(`${name}.config`, value['config']),
		'quotaType': allowUndefined(enumApiLlmQuotaTypeEnumToResponse)(`${name}.quotaType`, value['quotaType']),
		'quotaLimit': allowUndefined(stringToResponse)(`${name}.quotaLimit`, value['quotaLimit']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiLlmProviderMetadataFromRequest(name: string, value: any): Api.LlmProviderMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderMetadata = modelApiLlmProviderMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderMetadataToResponse(name: string, value: Api.LlmProviderMetadata): ToResponse<Api.LlmProviderMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderMetadata> = modelApiLlmProviderMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderModelsRequestKeys: string[] = ['header', 'body']

function modelApiLlmProviderModelsRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderModelsRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderModelsRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderModelsRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmProviderModelsRequestToResponseContent(name: string, value: Api.LlmProviderModelsRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderModelsRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderModelsRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderModelsRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmProviderModelsRequestFromRequest(name: string, value: any): Api.LlmProviderModelsRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderModelsRequest = modelApiLlmProviderModelsRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderModelsRequestToResponse(name: string, value: Api.LlmProviderModelsRequest): ToResponse<Api.LlmProviderModelsRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderModelsRequest> = modelApiLlmProviderModelsRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderModelsRequestBodyKeys: string[] = ['code', 'modelType']

function modelApiLlmProviderModelsRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderModelsRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderModelsRequestBody = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumFromRequest)(`${name}.code`, value['code']),
		'modelType': allowUndefined(enumApiLlmModelTypeEnumFromRequest)(`${name}.modelType`, value['modelType']),
	}

	return result
}

function modelApiLlmProviderModelsRequestBodyToResponseContent(name: string, value: Api.LlmProviderModelsRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderModelsRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderModelsRequestBody> = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumToResponse)(`${name}.code`, value['code']),
		'modelType': allowUndefined(enumApiLlmModelTypeEnumToResponse)(`${name}.modelType`, value['modelType']),
	}

	return result
}

export function modelApiLlmProviderModelsRequestBodyFromRequest(name: string, value: any): Api.LlmProviderModelsRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderModelsRequestBody = modelApiLlmProviderModelsRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderModelsRequestBodyToResponse(name: string, value: Api.LlmProviderModelsRequestBody): ToResponse<Api.LlmProviderModelsRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderModelsRequestBody> = modelApiLlmProviderModelsRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderModelsResponseKeys: string[] = ['header', 'body']

function modelApiLlmProviderModelsResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderModelsResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderModelsResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderModelsResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmProviderModelsResponseToResponseContent(name: string, value: Api.LlmProviderModelsResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderModelsResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderModelsResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmProviderModelsResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmProviderModelsResponseFromRequest(name: string, value: any): Api.LlmProviderModelsResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderModelsResponse = modelApiLlmProviderModelsResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderModelsResponseToResponse(name: string, value: Api.LlmProviderModelsResponse): ToResponse<Api.LlmProviderModelsResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderModelsResponse> = modelApiLlmProviderModelsResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderModelsResponseBodyKeys: string[] = ['status', 'models']

function modelApiLlmProviderModelsResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderModelsResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderModelsResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'models': allowUndefined(arrayFromRequest(modelApiLlmModelMetadataFromRequest))(`${name}.models`, value['models']),
	}

	return result
}

function modelApiLlmProviderModelsResponseBodyToResponseContent(name: string, value: Api.LlmProviderModelsResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderModelsResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderModelsResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderModelsResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'models': allowUndefined(arrayToResponse(modelApiLlmModelMetadataToResponse))(`${name}.models`, value['models']),
	}

	return result
}

export function modelApiLlmProviderModelsResponseBodyFromRequest(name: string, value: any): Api.LlmProviderModelsResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderModelsResponseBody = modelApiLlmProviderModelsResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderModelsResponseBodyToResponse(name: string, value: Api.LlmProviderModelsResponseBody): ToResponse<Api.LlmProviderModelsResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderModelsResponseBody> = modelApiLlmProviderModelsResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderModelsResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmProviderStateKeys: string[] = ['serviceDid', 'uid', 'status', 'quotaUsed', 'createdAt', 'updatedAt', 'signature']

function modelApiLlmProviderStateFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmProviderState {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderStateKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmProviderState = {
		'serviceDid': allowUndefined(stringFromRequest)(`${name}.serviceDid`, value['serviceDid']),
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'status': allowUndefined(enumApiLlmProviderStatusEnumFromRequest)(`${name}.status`, value['status']),
		'quotaUsed': allowUndefined(stringFromRequest)(`${name}.quotaUsed`, value['quotaUsed']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiLlmProviderStateToResponseContent(name: string, value: Api.LlmProviderState, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmProviderState> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmProviderStateKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmProviderState> = {
		'serviceDid': allowUndefined(stringToResponse)(`${name}.serviceDid`, value['serviceDid']),
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'status': allowUndefined(enumApiLlmProviderStatusEnumToResponse)(`${name}.status`, value['status']),
		'quotaUsed': allowUndefined(stringToResponse)(`${name}.quotaUsed`, value['quotaUsed']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiLlmProviderStateFromRequest(name: string, value: any): Api.LlmProviderState {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmProviderState = modelApiLlmProviderStateFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderState: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmProviderStateToResponse(name: string, value: Api.LlmProviderState): ToResponse<Api.LlmProviderState> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmProviderState> = modelApiLlmProviderStateToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmProviderState: ${key}`
			}
		}
	}

	return result
}

export function enumApiLlmProviderStatusEnumFromRequest(name: string, value: any): Api.LlmProviderStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'PROVIDER_STATUS_UNKNOWN') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSUNKNOWN
	}
	if (value === 'PROVIDER_STATUS_UNAVAILABLE') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSUNAVAILABLE
	}
	if (value === 'PROVIDER_STATUS_AVAILABLE') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSAVAILABLE
	}

	throw `Unexpected enum value for Api.LlmProviderStatusEnum: ${value}`
}

export function enumApiLlmProviderStatusEnumToResponse(name: string, value: Api.LlmProviderStatusEnum): Api.LlmProviderStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'PROVIDER_STATUS_UNKNOWN') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSUNKNOWN
	}
	if (value === 'PROVIDER_STATUS_UNAVAILABLE') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSUNAVAILABLE
	}
	if (value === 'PROVIDER_STATUS_AVAILABLE') {
		return Api.LlmProviderStatusEnum.PROVIDERSTATUSAVAILABLE
	}

	throw `Unexpected enum value for Api.LlmProviderStatusEnum: ${value}`
}

export function enumApiLlmQuotaTypeEnumFromRequest(name: string, value: any): Api.LlmQuotaTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'QUOTA_TYPE_UNKNOWN') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEUNKNOWN
	}
	if (value === 'QUOTA_TYPE_PAID') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEPAID
	}
	if (value === 'QUOTA_TYPE_FREE') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEFREE
	}
	if (value === 'QUOTA_TYPE_TRIAL') {
		return Api.LlmQuotaTypeEnum.QUOTATYPETRIAL
	}

	throw `Unexpected enum value for Api.LlmQuotaTypeEnum: ${value}`
}

export function enumApiLlmQuotaTypeEnumToResponse(name: string, value: Api.LlmQuotaTypeEnum): Api.LlmQuotaTypeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'QUOTA_TYPE_UNKNOWN') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEUNKNOWN
	}
	if (value === 'QUOTA_TYPE_PAID') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEPAID
	}
	if (value === 'QUOTA_TYPE_FREE') {
		return Api.LlmQuotaTypeEnum.QUOTATYPEFREE
	}
	if (value === 'QUOTA_TYPE_TRIAL') {
		return Api.LlmQuotaTypeEnum.QUOTATYPETRIAL
	}

	throw `Unexpected enum value for Api.LlmQuotaTypeEnum: ${value}`
}

const ApiLlmSearchProviderConditionKeys: string[] = ['code']

function modelApiLlmSearchProviderConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSearchProviderCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSearchProviderCondition = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumFromRequest)(`${name}.code`, value['code']),
	}

	return result
}

function modelApiLlmSearchProviderConditionToResponseContent(name: string, value: Api.LlmSearchProviderCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSearchProviderCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSearchProviderCondition> = {
		'code': allowUndefined(enumApiLlmProviderCodeEnumToResponse)(`${name}.code`, value['code']),
	}

	return result
}

export function modelApiLlmSearchProviderConditionFromRequest(name: string, value: any): Api.LlmSearchProviderCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSearchProviderCondition = modelApiLlmSearchProviderConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSearchProviderConditionToResponse(name: string, value: Api.LlmSearchProviderCondition): ToResponse<Api.LlmSearchProviderCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSearchProviderCondition> = modelApiLlmSearchProviderConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderCondition: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSearchProviderRequestKeys: string[] = ['header', 'body']

function modelApiLlmSearchProviderRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSearchProviderRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSearchProviderRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmSearchProviderRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmSearchProviderRequestToResponseContent(name: string, value: Api.LlmSearchProviderRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSearchProviderRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSearchProviderRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmSearchProviderRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmSearchProviderRequestFromRequest(name: string, value: any): Api.LlmSearchProviderRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSearchProviderRequest = modelApiLlmSearchProviderRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSearchProviderRequestToResponse(name: string, value: Api.LlmSearchProviderRequest): ToResponse<Api.LlmSearchProviderRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSearchProviderRequest> = modelApiLlmSearchProviderRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSearchProviderRequestBodyKeys: string[] = ['page', 'condition']

function modelApiLlmSearchProviderRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSearchProviderRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSearchProviderRequestBody = {
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
		'condition': allowUndefined(modelApiLlmSearchProviderConditionFromRequest)(`${name}.condition`, value['condition']),
	}

	return result
}

function modelApiLlmSearchProviderRequestBodyToResponseContent(name: string, value: Api.LlmSearchProviderRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSearchProviderRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSearchProviderRequestBody> = {
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
		'condition': allowUndefined(modelApiLlmSearchProviderConditionToResponse)(`${name}.condition`, value['condition']),
	}

	return result
}

export function modelApiLlmSearchProviderRequestBodyFromRequest(name: string, value: any): Api.LlmSearchProviderRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSearchProviderRequestBody = modelApiLlmSearchProviderRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSearchProviderRequestBodyToResponse(name: string, value: Api.LlmSearchProviderRequestBody): ToResponse<Api.LlmSearchProviderRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSearchProviderRequestBody> = modelApiLlmSearchProviderRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSearchProviderResponseKeys: string[] = ['header', 'body']

function modelApiLlmSearchProviderResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSearchProviderResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSearchProviderResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmSearchProviderResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiLlmSearchProviderResponseToResponseContent(name: string, value: Api.LlmSearchProviderResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSearchProviderResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSearchProviderResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiLlmSearchProviderResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiLlmSearchProviderResponseFromRequest(name: string, value: any): Api.LlmSearchProviderResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSearchProviderResponse = modelApiLlmSearchProviderResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSearchProviderResponseToResponse(name: string, value: Api.LlmSearchProviderResponse): ToResponse<Api.LlmSearchProviderResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSearchProviderResponse> = modelApiLlmSearchProviderResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSearchProviderResponseBodyKeys: string[] = ['status', 'providers']

function modelApiLlmSearchProviderResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSearchProviderResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSearchProviderResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'providers': allowUndefined(arrayFromRequest(modelApiLlmProviderMetadataFromRequest))(`${name}.providers`, value['providers']),
	}

	return result
}

function modelApiLlmSearchProviderResponseBodyToResponseContent(name: string, value: Api.LlmSearchProviderResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSearchProviderResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSearchProviderResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSearchProviderResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'providers': allowUndefined(arrayToResponse(modelApiLlmProviderMetadataToResponse))(`${name}.providers`, value['providers']),
	}

	return result
}

export function modelApiLlmSearchProviderResponseBodyFromRequest(name: string, value: any): Api.LlmSearchProviderResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSearchProviderResponseBody = modelApiLlmSearchProviderResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSearchProviderResponseBodyToResponse(name: string, value: Api.LlmSearchProviderResponseBody): ToResponse<Api.LlmSearchProviderResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSearchProviderResponseBody> = modelApiLlmSearchProviderResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSearchProviderResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSpeechRequestKeys: string[] = []

function modelApiLlmSpeechRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSpeechRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSpeechRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSpeechRequest = {
	}

	return result
}

function modelApiLlmSpeechRequestToResponseContent(name: string, value: Api.LlmSpeechRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSpeechRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSpeechRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSpeechRequest> = {
	}

	return result
}

export function modelApiLlmSpeechRequestFromRequest(name: string, value: any): Api.LlmSpeechRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSpeechRequest = modelApiLlmSpeechRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSpeechRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSpeechRequestToResponse(name: string, value: Api.LlmSpeechRequest): ToResponse<Api.LlmSpeechRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSpeechRequest> = modelApiLlmSpeechRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSpeechRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmSpeechResponseKeys: string[] = []

function modelApiLlmSpeechResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmSpeechResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSpeechResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmSpeechResponse = {
	}

	return result
}

function modelApiLlmSpeechResponseToResponseContent(name: string, value: Api.LlmSpeechResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmSpeechResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmSpeechResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmSpeechResponse> = {
	}

	return result
}

export function modelApiLlmSpeechResponseFromRequest(name: string, value: any): Api.LlmSpeechResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmSpeechResponse = modelApiLlmSpeechResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSpeechResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmSpeechResponseToResponse(name: string, value: Api.LlmSpeechResponse): ToResponse<Api.LlmSpeechResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmSpeechResponse> = modelApiLlmSpeechResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmSpeechResponse: ${key}`
			}
		}
	}

	return result
}

const ApiLlmTextPromptKeys: string[] = ['message']

function modelApiLlmTextPromptFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmTextPrompt {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTextPromptKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmTextPrompt = {
		'message': allowUndefined(stringFromRequest)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiLlmTextPromptToResponseContent(name: string, value: Api.LlmTextPrompt, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmTextPrompt> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTextPromptKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmTextPrompt> = {
		'message': allowUndefined(stringToResponse)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiLlmTextPromptFromRequest(name: string, value: any): Api.LlmTextPrompt {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmTextPrompt = modelApiLlmTextPromptFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTextPrompt: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmTextPromptToResponse(name: string, value: Api.LlmTextPrompt): ToResponse<Api.LlmTextPrompt> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmTextPrompt> = modelApiLlmTextPromptToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTextPrompt: ${key}`
			}
		}
	}

	return result
}

const ApiLlmTranslateRequestKeys: string[] = ['did', 'llmId', 'instance']

function modelApiLlmTranslateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmTranslateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTranslateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmTranslateRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'llmId': allowUndefined(stringFromRequest)(`${name}.llmId`, value['llmId']),
		'instance': allowUndefined(stringFromRequest)(`${name}.instance`, value['instance']),
	}

	return result
}

function modelApiLlmTranslateRequestToResponseContent(name: string, value: Api.LlmTranslateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmTranslateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTranslateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmTranslateRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'llmId': allowUndefined(stringToResponse)(`${name}.llmId`, value['llmId']),
		'instance': allowUndefined(stringToResponse)(`${name}.instance`, value['instance']),
	}

	return result
}

export function modelApiLlmTranslateRequestFromRequest(name: string, value: any): Api.LlmTranslateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmTranslateRequest = modelApiLlmTranslateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTranslateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmTranslateRequestToResponse(name: string, value: Api.LlmTranslateRequest): ToResponse<Api.LlmTranslateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmTranslateRequest> = modelApiLlmTranslateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTranslateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiLlmTranslateResponseKeys: string[] = ['status']

function modelApiLlmTranslateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.LlmTranslateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTranslateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.LlmTranslateResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiLlmTranslateResponseToResponseContent(name: string, value: Api.LlmTranslateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.LlmTranslateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiLlmTranslateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.LlmTranslateResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiLlmTranslateResponseFromRequest(name: string, value: any): Api.LlmTranslateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.LlmTranslateResponse = modelApiLlmTranslateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTranslateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiLlmTranslateResponseToResponse(name: string, value: Api.LlmTranslateResponse): ToResponse<Api.LlmTranslateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.LlmTranslateResponse> = modelApiLlmTranslateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.LlmTranslateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiMailSendMailRequestKeys: string[] = ['header', 'body']

function modelApiMailSendMailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailSendMailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailSendMailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailSendMailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMailSendMailRequestToResponseContent(name: string, value: Api.MailSendMailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailSendMailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailSendMailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailSendMailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMailSendMailRequestFromRequest(name: string, value: any): Api.MailSendMailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailSendMailRequest = modelApiMailSendMailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailSendMailRequestToResponse(name: string, value: Api.MailSendMailRequest): ToResponse<Api.MailSendMailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailSendMailRequest> = modelApiMailSendMailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiMailSendMailRequestBodyKeys: string[] = ['toMail']

function modelApiMailSendMailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailSendMailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailSendMailRequestBody = {
		'toMail': allowUndefined(stringFromRequest)(`${name}.toMail`, value['toMail']),
	}

	return result
}

function modelApiMailSendMailRequestBodyToResponseContent(name: string, value: Api.MailSendMailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailSendMailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailSendMailRequestBody> = {
		'toMail': allowUndefined(stringToResponse)(`${name}.toMail`, value['toMail']),
	}

	return result
}

export function modelApiMailSendMailRequestBodyFromRequest(name: string, value: any): Api.MailSendMailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailSendMailRequestBody = modelApiMailSendMailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailSendMailRequestBodyToResponse(name: string, value: Api.MailSendMailRequestBody): ToResponse<Api.MailSendMailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailSendMailRequestBody> = modelApiMailSendMailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiMailSendMailResponseKeys: string[] = ['header', 'body']

function modelApiMailSendMailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailSendMailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailSendMailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailSendMailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMailSendMailResponseToResponseContent(name: string, value: Api.MailSendMailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailSendMailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailSendMailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailSendMailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMailSendMailResponseFromRequest(name: string, value: any): Api.MailSendMailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailSendMailResponse = modelApiMailSendMailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailSendMailResponseToResponse(name: string, value: Api.MailSendMailResponse): ToResponse<Api.MailSendMailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailSendMailResponse> = modelApiMailSendMailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiMailSendMailResponseBodyKeys: string[] = ['status']

function modelApiMailSendMailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailSendMailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailSendMailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiMailSendMailResponseBodyToResponseContent(name: string, value: Api.MailSendMailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailSendMailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailSendMailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailSendMailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiMailSendMailResponseBodyFromRequest(name: string, value: any): Api.MailSendMailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailSendMailResponseBody = modelApiMailSendMailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailSendMailResponseBodyToResponse(name: string, value: Api.MailSendMailResponseBody): ToResponse<Api.MailSendMailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailSendMailResponseBody> = modelApiMailSendMailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailSendMailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiMailVerifyMailRequestKeys: string[] = ['header', 'body']

function modelApiMailVerifyMailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailVerifyMailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailVerifyMailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailVerifyMailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMailVerifyMailRequestToResponseContent(name: string, value: Api.MailVerifyMailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailVerifyMailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailVerifyMailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailVerifyMailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMailVerifyMailRequestFromRequest(name: string, value: any): Api.MailVerifyMailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailVerifyMailRequest = modelApiMailVerifyMailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailVerifyMailRequestToResponse(name: string, value: Api.MailVerifyMailRequest): ToResponse<Api.MailVerifyMailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailVerifyMailRequest> = modelApiMailVerifyMailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiMailVerifyMailRequestBodyKeys: string[] = ['toMail', 'code']

function modelApiMailVerifyMailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailVerifyMailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailVerifyMailRequestBody = {
		'toMail': allowUndefined(stringFromRequest)(`${name}.toMail`, value['toMail']),
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
	}

	return result
}

function modelApiMailVerifyMailRequestBodyToResponseContent(name: string, value: Api.MailVerifyMailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailVerifyMailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailVerifyMailRequestBody> = {
		'toMail': allowUndefined(stringToResponse)(`${name}.toMail`, value['toMail']),
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
	}

	return result
}

export function modelApiMailVerifyMailRequestBodyFromRequest(name: string, value: any): Api.MailVerifyMailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailVerifyMailRequestBody = modelApiMailVerifyMailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailVerifyMailRequestBodyToResponse(name: string, value: Api.MailVerifyMailRequestBody): ToResponse<Api.MailVerifyMailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailVerifyMailRequestBody> = modelApiMailVerifyMailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiMailVerifyMailResponseKeys: string[] = ['header', 'body']

function modelApiMailVerifyMailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailVerifyMailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailVerifyMailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailVerifyMailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMailVerifyMailResponseToResponseContent(name: string, value: Api.MailVerifyMailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailVerifyMailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailVerifyMailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMailVerifyMailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMailVerifyMailResponseFromRequest(name: string, value: any): Api.MailVerifyMailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailVerifyMailResponse = modelApiMailVerifyMailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailVerifyMailResponseToResponse(name: string, value: Api.MailVerifyMailResponse): ToResponse<Api.MailVerifyMailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailVerifyMailResponse> = modelApiMailVerifyMailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiMailVerifyMailResponseBodyKeys: string[] = ['status']

function modelApiMailVerifyMailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MailVerifyMailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MailVerifyMailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiMailVerifyMailResponseBodyToResponseContent(name: string, value: Api.MailVerifyMailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MailVerifyMailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMailVerifyMailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MailVerifyMailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiMailVerifyMailResponseBodyFromRequest(name: string, value: any): Api.MailVerifyMailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MailVerifyMailResponseBody = modelApiMailVerifyMailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMailVerifyMailResponseBodyToResponse(name: string, value: Api.MailVerifyMailResponseBody): ToResponse<Api.MailVerifyMailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MailVerifyMailResponseBody> = modelApiMailVerifyMailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MailVerifyMailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiMiniosdkPresignedUploadUrlRequestKeys: string[] = ['header', 'body']

function modelApiMiniosdkPresignedUploadUrlRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MiniosdkPresignedUploadUrlRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MiniosdkPresignedUploadUrlRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMiniosdkPresignedUploadUrlRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMiniosdkPresignedUploadUrlRequestToResponseContent(name: string, value: Api.MiniosdkPresignedUploadUrlRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MiniosdkPresignedUploadUrlRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMiniosdkPresignedUploadUrlRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlRequestFromRequest(name: string, value: any): Api.MiniosdkPresignedUploadUrlRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MiniosdkPresignedUploadUrlRequest = modelApiMiniosdkPresignedUploadUrlRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlRequestToResponse(name: string, value: Api.MiniosdkPresignedUploadUrlRequest): ToResponse<Api.MiniosdkPresignedUploadUrlRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlRequest> = modelApiMiniosdkPresignedUploadUrlRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlRequest: ${key}`
			}
		}
	}

	return result
}

const ApiMiniosdkPresignedUploadUrlRequestBodyKeys: string[] = ['filename']

function modelApiMiniosdkPresignedUploadUrlRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MiniosdkPresignedUploadUrlRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MiniosdkPresignedUploadUrlRequestBody = {
		'filename': allowUndefined(stringFromRequest)(`${name}.filename`, value['filename']),
	}

	return result
}

function modelApiMiniosdkPresignedUploadUrlRequestBodyToResponseContent(name: string, value: Api.MiniosdkPresignedUploadUrlRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MiniosdkPresignedUploadUrlRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlRequestBody> = {
		'filename': allowUndefined(stringToResponse)(`${name}.filename`, value['filename']),
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlRequestBodyFromRequest(name: string, value: any): Api.MiniosdkPresignedUploadUrlRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MiniosdkPresignedUploadUrlRequestBody = modelApiMiniosdkPresignedUploadUrlRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlRequestBodyToResponse(name: string, value: Api.MiniosdkPresignedUploadUrlRequestBody): ToResponse<Api.MiniosdkPresignedUploadUrlRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlRequestBody> = modelApiMiniosdkPresignedUploadUrlRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiMiniosdkPresignedUploadUrlResponseKeys: string[] = ['header', 'body']

function modelApiMiniosdkPresignedUploadUrlResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MiniosdkPresignedUploadUrlResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MiniosdkPresignedUploadUrlResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMiniosdkPresignedUploadUrlResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiMiniosdkPresignedUploadUrlResponseToResponseContent(name: string, value: Api.MiniosdkPresignedUploadUrlResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MiniosdkPresignedUploadUrlResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiMiniosdkPresignedUploadUrlResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlResponseFromRequest(name: string, value: any): Api.MiniosdkPresignedUploadUrlResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MiniosdkPresignedUploadUrlResponse = modelApiMiniosdkPresignedUploadUrlResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlResponseToResponse(name: string, value: Api.MiniosdkPresignedUploadUrlResponse): ToResponse<Api.MiniosdkPresignedUploadUrlResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlResponse> = modelApiMiniosdkPresignedUploadUrlResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlResponse: ${key}`
			}
		}
	}

	return result
}

const ApiMiniosdkPresignedUploadUrlResponseBodyKeys: string[] = ['status', 'url']

function modelApiMiniosdkPresignedUploadUrlResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MiniosdkPresignedUploadUrlResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MiniosdkPresignedUploadUrlResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
	}

	return result
}

function modelApiMiniosdkPresignedUploadUrlResponseBodyToResponseContent(name: string, value: Api.MiniosdkPresignedUploadUrlResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.MiniosdkPresignedUploadUrlResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMiniosdkPresignedUploadUrlResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlResponseBodyFromRequest(name: string, value: any): Api.MiniosdkPresignedUploadUrlResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MiniosdkPresignedUploadUrlResponseBody = modelApiMiniosdkPresignedUploadUrlResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiMiniosdkPresignedUploadUrlResponseBodyToResponse(name: string, value: Api.MiniosdkPresignedUploadUrlResponseBody): ToResponse<Api.MiniosdkPresignedUploadUrlResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.MiniosdkPresignedUploadUrlResponseBody> = modelApiMiniosdkPresignedUploadUrlResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.MiniosdkPresignedUploadUrlResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkContractKeys: string[] = ['address']

function modelApiNetworkContractFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkContract {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkContractKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkContract = {
		'address': allowUndefined(stringFromRequest)(`${name}.address`, value['address']),
	}

	return result
}

function modelApiNetworkContractToResponseContent(name: string, value: Api.NetworkContract, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkContract> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkContractKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkContract> = {
		'address': allowUndefined(stringToResponse)(`${name}.address`, value['address']),
	}

	return result
}

export function modelApiNetworkContractFromRequest(name: string, value: any): Api.NetworkContract {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkContract = modelApiNetworkContractFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkContract: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkContractToResponse(name: string, value: Api.NetworkContract): ToResponse<Api.NetworkContract> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkContract> = modelApiNetworkContractToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkContract: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkExitRequestKeys: string[] = ['did', 'peer', 'contract']

function modelApiNetworkExitRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkExitRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkExitRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkExitRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'peer': allowUndefined(modelApiNetworkPeerFromRequest)(`${name}.peer`, value['peer']),
		'contract': allowUndefined(modelApiNetworkContractFromRequest)(`${name}.contract`, value['contract']),
	}

	return result
}

function modelApiNetworkExitRequestToResponseContent(name: string, value: Api.NetworkExitRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkExitRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkExitRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkExitRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'peer': allowUndefined(modelApiNetworkPeerToResponse)(`${name}.peer`, value['peer']),
		'contract': allowUndefined(modelApiNetworkContractToResponse)(`${name}.contract`, value['contract']),
	}

	return result
}

export function modelApiNetworkExitRequestFromRequest(name: string, value: any): Api.NetworkExitRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkExitRequest = modelApiNetworkExitRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkExitRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkExitRequestToResponse(name: string, value: Api.NetworkExitRequest): ToResponse<Api.NetworkExitRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkExitRequest> = modelApiNetworkExitRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkExitRequest: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkExitResponseKeys: string[] = ['status']

function modelApiNetworkExitResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkExitResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkExitResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkExitResponse = {
		'status': allowUndefined(stringFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiNetworkExitResponseToResponseContent(name: string, value: Api.NetworkExitResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkExitResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkExitResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkExitResponse> = {
		'status': allowUndefined(stringToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiNetworkExitResponseFromRequest(name: string, value: any): Api.NetworkExitResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkExitResponse = modelApiNetworkExitResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkExitResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkExitResponseToResponse(name: string, value: Api.NetworkExitResponse): ToResponse<Api.NetworkExitResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkExitResponse> = modelApiNetworkExitResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkExitResponse: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkJoinRequestKeys: string[] = ['did', 'peer', 'contract']

function modelApiNetworkJoinRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkJoinRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkJoinRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkJoinRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'peer': allowUndefined(modelApiNetworkPeerFromRequest)(`${name}.peer`, value['peer']),
		'contract': allowUndefined(modelApiNetworkContractFromRequest)(`${name}.contract`, value['contract']),
	}

	return result
}

function modelApiNetworkJoinRequestToResponseContent(name: string, value: Api.NetworkJoinRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkJoinRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkJoinRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkJoinRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'peer': allowUndefined(modelApiNetworkPeerToResponse)(`${name}.peer`, value['peer']),
		'contract': allowUndefined(modelApiNetworkContractToResponse)(`${name}.contract`, value['contract']),
	}

	return result
}

export function modelApiNetworkJoinRequestFromRequest(name: string, value: any): Api.NetworkJoinRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkJoinRequest = modelApiNetworkJoinRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkJoinRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkJoinRequestToResponse(name: string, value: Api.NetworkJoinRequest): ToResponse<Api.NetworkJoinRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkJoinRequest> = modelApiNetworkJoinRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkJoinRequest: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkJoinResponseKeys: string[] = ['status', 'contract']

function modelApiNetworkJoinResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkJoinResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkJoinResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkJoinResponse = {
		'status': allowUndefined(enumApiNetworkRegisterStatusFromRequest)(`${name}.status`, value['status']),
		'contract': allowUndefined(modelApiNetworkContractFromRequest)(`${name}.contract`, value['contract']),
	}

	return result
}

function modelApiNetworkJoinResponseToResponseContent(name: string, value: Api.NetworkJoinResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkJoinResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkJoinResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkJoinResponse> = {
		'status': allowUndefined(enumApiNetworkRegisterStatusToResponse)(`${name}.status`, value['status']),
		'contract': allowUndefined(modelApiNetworkContractToResponse)(`${name}.contract`, value['contract']),
	}

	return result
}

export function modelApiNetworkJoinResponseFromRequest(name: string, value: any): Api.NetworkJoinResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkJoinResponse = modelApiNetworkJoinResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkJoinResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkJoinResponseToResponse(name: string, value: Api.NetworkJoinResponse): ToResponse<Api.NetworkJoinResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkJoinResponse> = modelApiNetworkJoinResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkJoinResponse: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkListRequestKeys: string[] = []

function modelApiNetworkListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkListRequest = {
	}

	return result
}

function modelApiNetworkListRequestToResponseContent(name: string, value: Api.NetworkListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkListRequest> = {
	}

	return result
}

export function modelApiNetworkListRequestFromRequest(name: string, value: any): Api.NetworkListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkListRequest = modelApiNetworkListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkListRequestToResponse(name: string, value: Api.NetworkListRequest): ToResponse<Api.NetworkListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkListRequest> = modelApiNetworkListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkListResponseKeys: string[] = ['contract']

function modelApiNetworkListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkListResponse = {
		'contract': allowUndefined(arrayFromRequest(modelApiNetworkContractFromRequest))(`${name}.contract`, value['contract']),
	}

	return result
}

function modelApiNetworkListResponseToResponseContent(name: string, value: Api.NetworkListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkListResponse> = {
		'contract': allowUndefined(arrayToResponse(modelApiNetworkContractToResponse))(`${name}.contract`, value['contract']),
	}

	return result
}

export function modelApiNetworkListResponseFromRequest(name: string, value: any): Api.NetworkListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkListResponse = modelApiNetworkListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkListResponseToResponse(name: string, value: Api.NetworkListResponse): ToResponse<Api.NetworkListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkListResponse> = modelApiNetworkListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiNetworkPeerKeys: string[] = ['id']

function modelApiNetworkPeerFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NetworkPeer {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkPeerKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NetworkPeer = {
		'id': allowUndefined(stringFromRequest)(`${name}.id`, value['id']),
	}

	return result
}

function modelApiNetworkPeerToResponseContent(name: string, value: Api.NetworkPeer, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NetworkPeer> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNetworkPeerKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NetworkPeer> = {
		'id': allowUndefined(stringToResponse)(`${name}.id`, value['id']),
	}

	return result
}

export function modelApiNetworkPeerFromRequest(name: string, value: any): Api.NetworkPeer {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NetworkPeer = modelApiNetworkPeerFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkPeer: ${key}`
			}
		}
	}

	return result
}

export function modelApiNetworkPeerToResponse(name: string, value: Api.NetworkPeer): ToResponse<Api.NetworkPeer> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NetworkPeer> = modelApiNetworkPeerToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NetworkPeer: ${key}`
			}
		}
	}

	return result
}

export function enumApiNetworkRegisterStatusFromRequest(name: string, value: any): Api.NetworkRegisterStatus {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SUCCESS') {
		return Api.NetworkRegisterStatus.SUCCESS
	}
	if (value === 'REGISTERED') {
		return Api.NetworkRegisterStatus.REGISTERED
	}

	throw `Unexpected enum value for Api.NetworkRegisterStatus: ${value}`
}

export function enumApiNetworkRegisterStatusToResponse(name: string, value: Api.NetworkRegisterStatus): Api.NetworkRegisterStatus {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SUCCESS') {
		return Api.NetworkRegisterStatus.SUCCESS
	}
	if (value === 'REGISTERED') {
		return Api.NetworkRegisterStatus.REGISTERED
	}

	throw `Unexpected enum value for Api.NetworkRegisterStatus: ${value}`
}

const ApiNodeHealthCheckRequestKeys: string[] = ['header']

function modelApiNodeHealthCheckRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeHealthCheckRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeHealthCheckRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiNodeHealthCheckRequestToResponseContent(name: string, value: Api.NodeHealthCheckRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeHealthCheckRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeHealthCheckRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiNodeHealthCheckRequestFromRequest(name: string, value: any): Api.NodeHealthCheckRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeHealthCheckRequest = modelApiNodeHealthCheckRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeHealthCheckRequestToResponse(name: string, value: Api.NodeHealthCheckRequest): ToResponse<Api.NodeHealthCheckRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeHealthCheckRequest> = modelApiNodeHealthCheckRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckRequest: ${key}`
			}
		}
	}

	return result
}

const ApiNodeHealthCheckResponseKeys: string[] = ['header', 'body']

function modelApiNodeHealthCheckResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeHealthCheckResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeHealthCheckResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiNodeHealthCheckResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiNodeHealthCheckResponseToResponseContent(name: string, value: Api.NodeHealthCheckResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeHealthCheckResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeHealthCheckResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiNodeHealthCheckResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiNodeHealthCheckResponseFromRequest(name: string, value: any): Api.NodeHealthCheckResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeHealthCheckResponse = modelApiNodeHealthCheckResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeHealthCheckResponseToResponse(name: string, value: Api.NodeHealthCheckResponse): ToResponse<Api.NodeHealthCheckResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeHealthCheckResponse> = modelApiNodeHealthCheckResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckResponse: ${key}`
			}
		}
	}

	return result
}

const ApiNodeHealthCheckResponseBodyKeys: string[] = ['status']

function modelApiNodeHealthCheckResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeHealthCheckResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeHealthCheckResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiNodeHealthCheckResponseBodyToResponseContent(name: string, value: Api.NodeHealthCheckResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeHealthCheckResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeHealthCheckResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeHealthCheckResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiNodeHealthCheckResponseBodyFromRequest(name: string, value: any): Api.NodeHealthCheckResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeHealthCheckResponseBody = modelApiNodeHealthCheckResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeHealthCheckResponseBodyToResponse(name: string, value: Api.NodeHealthCheckResponseBody): ToResponse<Api.NodeHealthCheckResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeHealthCheckResponseBody> = modelApiNodeHealthCheckResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeHealthCheckResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiNodeWhoamiRequestKeys: string[] = ['header']

function modelApiNodeWhoamiRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeWhoamiRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeWhoamiRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiNodeWhoamiRequestToResponseContent(name: string, value: Api.NodeWhoamiRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeWhoamiRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeWhoamiRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiNodeWhoamiRequestFromRequest(name: string, value: any): Api.NodeWhoamiRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeWhoamiRequest = modelApiNodeWhoamiRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeWhoamiRequestToResponse(name: string, value: Api.NodeWhoamiRequest): ToResponse<Api.NodeWhoamiRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeWhoamiRequest> = modelApiNodeWhoamiRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiRequest: ${key}`
			}
		}
	}

	return result
}

const ApiNodeWhoamiResponseKeys: string[] = ['header', 'body']

function modelApiNodeWhoamiResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeWhoamiResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeWhoamiResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiNodeWhoamiResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiNodeWhoamiResponseToResponseContent(name: string, value: Api.NodeWhoamiResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeWhoamiResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeWhoamiResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiNodeWhoamiResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiNodeWhoamiResponseFromRequest(name: string, value: any): Api.NodeWhoamiResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeWhoamiResponse = modelApiNodeWhoamiResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeWhoamiResponseToResponse(name: string, value: Api.NodeWhoamiResponse): ToResponse<Api.NodeWhoamiResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeWhoamiResponse> = modelApiNodeWhoamiResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiResponse: ${key}`
			}
		}
	}

	return result
}

const ApiNodeWhoamiResponseBodyKeys: string[] = ['status', 'service']

function modelApiNodeWhoamiResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NodeWhoamiResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NodeWhoamiResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataFromRequest)(`${name}.service`, value['service']),
	}

	return result
}

function modelApiNodeWhoamiResponseBodyToResponseContent(name: string, value: Api.NodeWhoamiResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.NodeWhoamiResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNodeWhoamiResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.NodeWhoamiResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataToResponse)(`${name}.service`, value['service']),
	}

	return result
}

export function modelApiNodeWhoamiResponseBodyFromRequest(name: string, value: any): Api.NodeWhoamiResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NodeWhoamiResponseBody = modelApiNodeWhoamiResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiNodeWhoamiResponseBodyToResponse(name: string, value: Api.NodeWhoamiResponseBody): ToResponse<Api.NodeWhoamiResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.NodeWhoamiResponseBody> = modelApiNodeWhoamiResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.NodeWhoamiResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiPluginConditionKeys: string[] = ['sql']

function modelApiPluginConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginCondition = {
		'sql': allowUndefined(stringFromRequest)(`${name}.sql`, value['sql']),
	}

	return result
}

function modelApiPluginConditionToResponseContent(name: string, value: Api.PluginCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginCondition> = {
		'sql': allowUndefined(stringToResponse)(`${name}.sql`, value['sql']),
	}

	return result
}

export function modelApiPluginConditionFromRequest(name: string, value: any): Api.PluginCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginCondition = modelApiPluginConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginConditionToResponse(name: string, value: Api.PluginCondition): ToResponse<Api.PluginCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginCondition> = modelApiPluginConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginCondition: ${key}`
			}
		}
	}

	return result
}

const ApiPluginInstallRequestKeys: string[] = ['owner', 'version', 'name', 'description', 'code', 'extend']

function modelApiPluginInstallRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginInstallRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginInstallRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginInstallRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'version': allowUndefined(stringFromRequest)(`${name}.version`, value['version']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
		'extend': allowUndefined(stringFromRequest)(`${name}.extend`, value['extend']),
	}

	return result
}

function modelApiPluginInstallRequestToResponseContent(name: string, value: Api.PluginInstallRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginInstallRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginInstallRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginInstallRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'version': allowUndefined(stringToResponse)(`${name}.version`, value['version']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
		'extend': allowUndefined(stringToResponse)(`${name}.extend`, value['extend']),
	}

	return result
}

export function modelApiPluginInstallRequestFromRequest(name: string, value: any): Api.PluginInstallRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginInstallRequest = modelApiPluginInstallRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginInstallRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginInstallRequestToResponse(name: string, value: Api.PluginInstallRequest): ToResponse<Api.PluginInstallRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginInstallRequest> = modelApiPluginInstallRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginInstallRequest: ${key}`
			}
		}
	}

	return result
}

const ApiPluginInstallResponseKeys: string[] = ['responseStatus']

function modelApiPluginInstallResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginInstallResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginInstallResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginInstallResponse = {
		'responseStatus': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.responseStatus`, value['responseStatus']),
	}

	return result
}

function modelApiPluginInstallResponseToResponseContent(name: string, value: Api.PluginInstallResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginInstallResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginInstallResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginInstallResponse> = {
		'responseStatus': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.responseStatus`, value['responseStatus']),
	}

	return result
}

export function modelApiPluginInstallResponseFromRequest(name: string, value: any): Api.PluginInstallResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginInstallResponse = modelApiPluginInstallResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginInstallResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginInstallResponseToResponse(name: string, value: Api.PluginInstallResponse): ToResponse<Api.PluginInstallResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginInstallResponse> = modelApiPluginInstallResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginInstallResponse: ${key}`
			}
		}
	}

	return result
}

const ApiPluginPluginItemKeys: string[] = ['name', 'description', 'version', 'code', 'timestamp']

function modelApiPluginPluginItemFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginPluginItem {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginPluginItemKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginPluginItem = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'version': allowUndefined(stringFromRequest)(`${name}.version`, value['version']),
		'code': allowUndefined(stringFromRequest)(`${name}.code`, value['code']),
		'timestamp': allowUndefined(stringFromRequest)(`${name}.timestamp`, value['timestamp']),
	}

	return result
}

function modelApiPluginPluginItemToResponseContent(name: string, value: Api.PluginPluginItem, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginPluginItem> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginPluginItemKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginPluginItem> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'version': allowUndefined(stringToResponse)(`${name}.version`, value['version']),
		'code': allowUndefined(stringToResponse)(`${name}.code`, value['code']),
		'timestamp': allowUndefined(stringToResponse)(`${name}.timestamp`, value['timestamp']),
	}

	return result
}

export function modelApiPluginPluginItemFromRequest(name: string, value: any): Api.PluginPluginItem {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginPluginItem = modelApiPluginPluginItemFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginPluginItem: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginPluginItemToResponse(name: string, value: Api.PluginPluginItem): ToResponse<Api.PluginPluginItem> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginPluginItem> = modelApiPluginPluginItemToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginPluginItem: ${key}`
			}
		}
	}

	return result
}

const ApiPluginUninstallRequestKeys: string[] = ['owner', 'name']

function modelApiPluginUninstallRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginUninstallRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginUninstallRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginUninstallRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
	}

	return result
}

function modelApiPluginUninstallRequestToResponseContent(name: string, value: Api.PluginUninstallRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginUninstallRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginUninstallRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginUninstallRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
	}

	return result
}

export function modelApiPluginUninstallRequestFromRequest(name: string, value: any): Api.PluginUninstallRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginUninstallRequest = modelApiPluginUninstallRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginUninstallRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginUninstallRequestToResponse(name: string, value: Api.PluginUninstallRequest): ToResponse<Api.PluginUninstallRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginUninstallRequest> = modelApiPluginUninstallRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginUninstallRequest: ${key}`
			}
		}
	}

	return result
}

const ApiPluginUninstallResponseKeys: string[] = ['responseStatus']

function modelApiPluginUninstallResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.PluginUninstallResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginUninstallResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.PluginUninstallResponse = {
		'responseStatus': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.responseStatus`, value['responseStatus']),
	}

	return result
}

function modelApiPluginUninstallResponseToResponseContent(name: string, value: Api.PluginUninstallResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.PluginUninstallResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiPluginUninstallResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.PluginUninstallResponse> = {
		'responseStatus': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.responseStatus`, value['responseStatus']),
	}

	return result
}

export function modelApiPluginUninstallResponseFromRequest(name: string, value: any): Api.PluginUninstallResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.PluginUninstallResponse = modelApiPluginUninstallResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginUninstallResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiPluginUninstallResponseToResponse(name: string, value: Api.PluginUninstallResponse): ToResponse<Api.PluginUninstallResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.PluginUninstallResponse> = modelApiPluginUninstallResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.PluginUninstallResponse: ${key}`
			}
		}
	}

	return result
}

const ApiProtobufAnyKeys: string[] = ['@type']

function modelApiProtobufAnyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ProtobufAny {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiProtobufAnyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ProtobufAny = {
		'@type': allowUndefined(stringFromRequest)(`${name}.@type`, value['@type']),
	}

	return result
}

function modelApiProtobufAnyToResponseContent(name: string, value: Api.ProtobufAny, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ProtobufAny> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiProtobufAnyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ProtobufAny> = {
		'@type': allowUndefined(stringToResponse)(`${name}.@type`, value['@type']),
	}

	return result
}

export function modelApiProtobufAnyFromRequest(name: string, value: any): Api.ProtobufAny {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ProtobufAny = modelApiProtobufAnyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ProtobufAny: ${key}`
			}
		}
	}

	return result
}

export function modelApiProtobufAnyToResponse(name: string, value: Api.ProtobufAny): ToResponse<Api.ProtobufAny> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ProtobufAny> = modelApiProtobufAnyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ProtobufAny: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddContextRequestKeys: string[] = ['header', 'body']

function modelApiRagAddContextRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddContextRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddContextRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddContextRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddContextRequestToResponseContent(name: string, value: Api.RagAddContextRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddContextRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddContextRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddContextRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddContextRequestFromRequest(name: string, value: any): Api.RagAddContextRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddContextRequest = modelApiRagAddContextRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddContextRequestToResponse(name: string, value: Api.RagAddContextRequest): ToResponse<Api.RagAddContextRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddContextRequest> = modelApiRagAddContextRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddContextRequestBodyKeys: string[] = ['content']

function modelApiRagAddContextRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddContextRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddContextRequestBody = {
		'content': allowUndefined(modelApiRagContextContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddContextRequestBodyToResponseContent(name: string, value: Api.RagAddContextRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddContextRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddContextRequestBody> = {
		'content': allowUndefined(modelApiRagContextContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddContextRequestBodyFromRequest(name: string, value: any): Api.RagAddContextRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddContextRequestBody = modelApiRagAddContextRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddContextRequestBodyToResponse(name: string, value: Api.RagAddContextRequestBody): ToResponse<Api.RagAddContextRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddContextRequestBody> = modelApiRagAddContextRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddContextResponseKeys: string[] = ['header', 'body']

function modelApiRagAddContextResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddContextResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddContextResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddContextResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddContextResponseToResponseContent(name: string, value: Api.RagAddContextResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddContextResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddContextResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddContextResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddContextResponseFromRequest(name: string, value: any): Api.RagAddContextResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddContextResponse = modelApiRagAddContextResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddContextResponseToResponse(name: string, value: Api.RagAddContextResponse): ToResponse<Api.RagAddContextResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddContextResponse> = modelApiRagAddContextResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddContextResponseBodyKeys: string[] = ['status', 'content']

function modelApiRagAddContextResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddContextResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddContextResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagContextContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddContextResponseBodyToResponseContent(name: string, value: Api.RagAddContextResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddContextResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddContextResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddContextResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagContextContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddContextResponseBodyFromRequest(name: string, value: any): Api.RagAddContextResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddContextResponseBody = modelApiRagAddContextResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddContextResponseBodyToResponse(name: string, value: Api.RagAddContextResponseBody): ToResponse<Api.RagAddContextResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddContextResponseBody> = modelApiRagAddContextResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddContextResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddExperienceRequestKeys: string[] = ['header', 'body']

function modelApiRagAddExperienceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddExperienceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddExperienceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddExperienceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddExperienceRequestToResponseContent(name: string, value: Api.RagAddExperienceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddExperienceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddExperienceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddExperienceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddExperienceRequestFromRequest(name: string, value: any): Api.RagAddExperienceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddExperienceRequest = modelApiRagAddExperienceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddExperienceRequestToResponse(name: string, value: Api.RagAddExperienceRequest): ToResponse<Api.RagAddExperienceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddExperienceRequest> = modelApiRagAddExperienceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddExperienceRequestBodyKeys: string[] = ['content']

function modelApiRagAddExperienceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddExperienceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddExperienceRequestBody = {
		'content': allowUndefined(modelApiRagExperienceContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddExperienceRequestBodyToResponseContent(name: string, value: Api.RagAddExperienceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddExperienceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddExperienceRequestBody> = {
		'content': allowUndefined(modelApiRagExperienceContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddExperienceRequestBodyFromRequest(name: string, value: any): Api.RagAddExperienceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddExperienceRequestBody = modelApiRagAddExperienceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddExperienceRequestBodyToResponse(name: string, value: Api.RagAddExperienceRequestBody): ToResponse<Api.RagAddExperienceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddExperienceRequestBody> = modelApiRagAddExperienceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddExperienceResponseKeys: string[] = ['header', 'body']

function modelApiRagAddExperienceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddExperienceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddExperienceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddExperienceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddExperienceResponseToResponseContent(name: string, value: Api.RagAddExperienceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddExperienceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddExperienceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddExperienceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddExperienceResponseFromRequest(name: string, value: any): Api.RagAddExperienceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddExperienceResponse = modelApiRagAddExperienceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddExperienceResponseToResponse(name: string, value: Api.RagAddExperienceResponse): ToResponse<Api.RagAddExperienceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddExperienceResponse> = modelApiRagAddExperienceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddExperienceResponseBodyKeys: string[] = ['status', 'content']

function modelApiRagAddExperienceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddExperienceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddExperienceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagExperienceContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddExperienceResponseBodyToResponseContent(name: string, value: Api.RagAddExperienceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddExperienceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddExperienceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagExperienceContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddExperienceResponseBodyFromRequest(name: string, value: any): Api.RagAddExperienceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddExperienceResponseBody = modelApiRagAddExperienceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddExperienceResponseBodyToResponse(name: string, value: Api.RagAddExperienceResponseBody): ToResponse<Api.RagAddExperienceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddExperienceResponseBody> = modelApiRagAddExperienceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddKnowledgeRequestKeys: string[] = ['header', 'body']

function modelApiRagAddKnowledgeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddKnowledgeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddKnowledgeRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddKnowledgeRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddKnowledgeRequestToResponseContent(name: string, value: Api.RagAddKnowledgeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddKnowledgeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddKnowledgeRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddKnowledgeRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddKnowledgeRequestFromRequest(name: string, value: any): Api.RagAddKnowledgeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddKnowledgeRequest = modelApiRagAddKnowledgeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddKnowledgeRequestToResponse(name: string, value: Api.RagAddKnowledgeRequest): ToResponse<Api.RagAddKnowledgeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddKnowledgeRequest> = modelApiRagAddKnowledgeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddKnowledgeRequestBodyKeys: string[] = ['content']

function modelApiRagAddKnowledgeRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddKnowledgeRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddKnowledgeRequestBody = {
		'content': allowUndefined(modelApiRagKnowledgeContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddKnowledgeRequestBodyToResponseContent(name: string, value: Api.RagAddKnowledgeRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddKnowledgeRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddKnowledgeRequestBody> = {
		'content': allowUndefined(modelApiRagKnowledgeContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddKnowledgeRequestBodyFromRequest(name: string, value: any): Api.RagAddKnowledgeRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddKnowledgeRequestBody = modelApiRagAddKnowledgeRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddKnowledgeRequestBodyToResponse(name: string, value: Api.RagAddKnowledgeRequestBody): ToResponse<Api.RagAddKnowledgeRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddKnowledgeRequestBody> = modelApiRagAddKnowledgeRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddKnowledgeResponseKeys: string[] = ['header', 'body']

function modelApiRagAddKnowledgeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddKnowledgeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddKnowledgeResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddKnowledgeResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagAddKnowledgeResponseToResponseContent(name: string, value: Api.RagAddKnowledgeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddKnowledgeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddKnowledgeResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagAddKnowledgeResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagAddKnowledgeResponseFromRequest(name: string, value: any): Api.RagAddKnowledgeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddKnowledgeResponse = modelApiRagAddKnowledgeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddKnowledgeResponseToResponse(name: string, value: Api.RagAddKnowledgeResponse): ToResponse<Api.RagAddKnowledgeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddKnowledgeResponse> = modelApiRagAddKnowledgeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagAddKnowledgeResponseBodyKeys: string[] = ['status', 'content']

function modelApiRagAddKnowledgeResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagAddKnowledgeResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagAddKnowledgeResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagKnowledgeContentFromRequest)(`${name}.content`, value['content']),
	}

	return result
}

function modelApiRagAddKnowledgeResponseBodyToResponseContent(name: string, value: Api.RagAddKnowledgeResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagAddKnowledgeResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagAddKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagAddKnowledgeResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'content': allowUndefined(modelApiRagKnowledgeContentToResponse)(`${name}.content`, value['content']),
	}

	return result
}

export function modelApiRagAddKnowledgeResponseBodyFromRequest(name: string, value: any): Api.RagAddKnowledgeResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagAddKnowledgeResponseBody = modelApiRagAddKnowledgeResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagAddKnowledgeResponseBodyToResponse(name: string, value: Api.RagAddKnowledgeResponseBody): ToResponse<Api.RagAddKnowledgeResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagAddKnowledgeResponseBody> = modelApiRagAddKnowledgeResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagAddKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagContextContentKeys: string[] = ['contextId', 'url', 'hash', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiRagContextContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagContextContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagContextContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagContextContent = {
		'contextId': allowUndefined(stringFromRequest)(`${name}.contextId`, value['contextId']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiRagContextContentToResponseContent(name: string, value: Api.RagContextContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagContextContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagContextContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagContextContent> = {
		'contextId': allowUndefined(stringToResponse)(`${name}.contextId`, value['contextId']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiRagContextContentFromRequest(name: string, value: any): Api.RagContextContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagContextContent = modelApiRagContextContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagContextContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagContextContentToResponse(name: string, value: Api.RagContextContent): ToResponse<Api.RagContextContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagContextContent> = modelApiRagContextContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagContextContent: ${key}`
			}
		}
	}

	return result
}

const ApiRagContextMetadataKeys: string[] = ['uid', 'app', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiRagContextMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagContextMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagContextMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagContextMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringFromRequest)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiRagContextMetadataToResponseContent(name: string, value: Api.RagContextMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagContextMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagContextMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagContextMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringToResponse)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiRagContextMetadataFromRequest(name: string, value: any): Api.RagContextMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagContextMetadata = modelApiRagContextMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagContextMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagContextMetadataToResponse(name: string, value: Api.RagContextMetadata): ToResponse<Api.RagContextMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagContextMetadata> = modelApiRagContextMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagContextMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateContextRequestKeys: string[] = ['header', 'body']

function modelApiRagCreateContextRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateContextRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateContextRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateContextRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateContextRequestToResponseContent(name: string, value: Api.RagCreateContextRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateContextRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateContextRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateContextRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateContextRequestFromRequest(name: string, value: any): Api.RagCreateContextRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateContextRequest = modelApiRagCreateContextRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateContextRequestToResponse(name: string, value: Api.RagCreateContextRequest): ToResponse<Api.RagCreateContextRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateContextRequest> = modelApiRagCreateContextRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateContextRequestBodyKeys: string[] = ['context']

function modelApiRagCreateContextRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateContextRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateContextRequestBody = {
		'context': allowUndefined(modelApiRagContextMetadataFromRequest)(`${name}.context`, value['context']),
	}

	return result
}

function modelApiRagCreateContextRequestBodyToResponseContent(name: string, value: Api.RagCreateContextRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateContextRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateContextRequestBody> = {
		'context': allowUndefined(modelApiRagContextMetadataToResponse)(`${name}.context`, value['context']),
	}

	return result
}

export function modelApiRagCreateContextRequestBodyFromRequest(name: string, value: any): Api.RagCreateContextRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateContextRequestBody = modelApiRagCreateContextRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateContextRequestBodyToResponse(name: string, value: Api.RagCreateContextRequestBody): ToResponse<Api.RagCreateContextRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateContextRequestBody> = modelApiRagCreateContextRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateContextResponseKeys: string[] = ['header', 'body']

function modelApiRagCreateContextResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateContextResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateContextResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateContextResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateContextResponseToResponseContent(name: string, value: Api.RagCreateContextResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateContextResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateContextResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateContextResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateContextResponseFromRequest(name: string, value: any): Api.RagCreateContextResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateContextResponse = modelApiRagCreateContextResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateContextResponseToResponse(name: string, value: Api.RagCreateContextResponse): ToResponse<Api.RagCreateContextResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateContextResponse> = modelApiRagCreateContextResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateContextResponseBodyKeys: string[] = ['status', 'context']

function modelApiRagCreateContextResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateContextResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateContextResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'context': allowUndefined(modelApiRagContextMetadataFromRequest)(`${name}.context`, value['context']),
	}

	return result
}

function modelApiRagCreateContextResponseBodyToResponseContent(name: string, value: Api.RagCreateContextResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateContextResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateContextResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateContextResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'context': allowUndefined(modelApiRagContextMetadataToResponse)(`${name}.context`, value['context']),
	}

	return result
}

export function modelApiRagCreateContextResponseBodyFromRequest(name: string, value: any): Api.RagCreateContextResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateContextResponseBody = modelApiRagCreateContextResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateContextResponseBodyToResponse(name: string, value: Api.RagCreateContextResponseBody): ToResponse<Api.RagCreateContextResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateContextResponseBody> = modelApiRagCreateContextResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateContextResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateExperienceRequestKeys: string[] = ['header', 'body']

function modelApiRagCreateExperienceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateExperienceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateExperienceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateExperienceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateExperienceRequestToResponseContent(name: string, value: Api.RagCreateExperienceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateExperienceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateExperienceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateExperienceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateExperienceRequestFromRequest(name: string, value: any): Api.RagCreateExperienceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateExperienceRequest = modelApiRagCreateExperienceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateExperienceRequestToResponse(name: string, value: Api.RagCreateExperienceRequest): ToResponse<Api.RagCreateExperienceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateExperienceRequest> = modelApiRagCreateExperienceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateExperienceRequestBodyKeys: string[] = ['experience']

function modelApiRagCreateExperienceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateExperienceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateExperienceRequestBody = {
		'experience': allowUndefined(modelApiRagExperienceMetadataFromRequest)(`${name}.experience`, value['experience']),
	}

	return result
}

function modelApiRagCreateExperienceRequestBodyToResponseContent(name: string, value: Api.RagCreateExperienceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateExperienceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateExperienceRequestBody> = {
		'experience': allowUndefined(modelApiRagExperienceMetadataToResponse)(`${name}.experience`, value['experience']),
	}

	return result
}

export function modelApiRagCreateExperienceRequestBodyFromRequest(name: string, value: any): Api.RagCreateExperienceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateExperienceRequestBody = modelApiRagCreateExperienceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateExperienceRequestBodyToResponse(name: string, value: Api.RagCreateExperienceRequestBody): ToResponse<Api.RagCreateExperienceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateExperienceRequestBody> = modelApiRagCreateExperienceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateExperienceResponseKeys: string[] = ['header', 'body']

function modelApiRagCreateExperienceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateExperienceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateExperienceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateExperienceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateExperienceResponseToResponseContent(name: string, value: Api.RagCreateExperienceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateExperienceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateExperienceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateExperienceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateExperienceResponseFromRequest(name: string, value: any): Api.RagCreateExperienceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateExperienceResponse = modelApiRagCreateExperienceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateExperienceResponseToResponse(name: string, value: Api.RagCreateExperienceResponse): ToResponse<Api.RagCreateExperienceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateExperienceResponse> = modelApiRagCreateExperienceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateExperienceResponseBodyKeys: string[] = ['status', 'experience']

function modelApiRagCreateExperienceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateExperienceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateExperienceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'experience': allowUndefined(modelApiRagExperienceMetadataFromRequest)(`${name}.experience`, value['experience']),
	}

	return result
}

function modelApiRagCreateExperienceResponseBodyToResponseContent(name: string, value: Api.RagCreateExperienceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateExperienceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateExperienceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'experience': allowUndefined(modelApiRagExperienceMetadataToResponse)(`${name}.experience`, value['experience']),
	}

	return result
}

export function modelApiRagCreateExperienceResponseBodyFromRequest(name: string, value: any): Api.RagCreateExperienceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateExperienceResponseBody = modelApiRagCreateExperienceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateExperienceResponseBodyToResponse(name: string, value: Api.RagCreateExperienceResponseBody): ToResponse<Api.RagCreateExperienceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateExperienceResponseBody> = modelApiRagCreateExperienceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateKnowledgeRequestKeys: string[] = ['header', 'body']

function modelApiRagCreateKnowledgeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateKnowledgeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateKnowledgeRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateKnowledgeRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateKnowledgeRequestToResponseContent(name: string, value: Api.RagCreateKnowledgeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateKnowledgeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateKnowledgeRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateKnowledgeRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateKnowledgeRequestFromRequest(name: string, value: any): Api.RagCreateKnowledgeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateKnowledgeRequest = modelApiRagCreateKnowledgeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateKnowledgeRequestToResponse(name: string, value: Api.RagCreateKnowledgeRequest): ToResponse<Api.RagCreateKnowledgeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateKnowledgeRequest> = modelApiRagCreateKnowledgeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateKnowledgeRequestBodyKeys: string[] = ['knowledge']

function modelApiRagCreateKnowledgeRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateKnowledgeRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateKnowledgeRequestBody = {
		'knowledge': allowUndefined(modelApiApiragKnowledgeMetadataFromRequest)(`${name}.knowledge`, value['knowledge']),
	}

	return result
}

function modelApiRagCreateKnowledgeRequestBodyToResponseContent(name: string, value: Api.RagCreateKnowledgeRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateKnowledgeRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateKnowledgeRequestBody> = {
		'knowledge': allowUndefined(modelApiApiragKnowledgeMetadataToResponse)(`${name}.knowledge`, value['knowledge']),
	}

	return result
}

export function modelApiRagCreateKnowledgeRequestBodyFromRequest(name: string, value: any): Api.RagCreateKnowledgeRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateKnowledgeRequestBody = modelApiRagCreateKnowledgeRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateKnowledgeRequestBodyToResponse(name: string, value: Api.RagCreateKnowledgeRequestBody): ToResponse<Api.RagCreateKnowledgeRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateKnowledgeRequestBody> = modelApiRagCreateKnowledgeRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateKnowledgeResponseKeys: string[] = ['header', 'body']

function modelApiRagCreateKnowledgeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateKnowledgeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateKnowledgeResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateKnowledgeResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagCreateKnowledgeResponseToResponseContent(name: string, value: Api.RagCreateKnowledgeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateKnowledgeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateKnowledgeResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagCreateKnowledgeResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagCreateKnowledgeResponseFromRequest(name: string, value: any): Api.RagCreateKnowledgeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateKnowledgeResponse = modelApiRagCreateKnowledgeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateKnowledgeResponseToResponse(name: string, value: Api.RagCreateKnowledgeResponse): ToResponse<Api.RagCreateKnowledgeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateKnowledgeResponse> = modelApiRagCreateKnowledgeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagCreateKnowledgeResponseBodyKeys: string[] = ['status', 'knowledge']

function modelApiRagCreateKnowledgeResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagCreateKnowledgeResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagCreateKnowledgeResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'knowledge': allowUndefined(modelApiApiragKnowledgeMetadataFromRequest)(`${name}.knowledge`, value['knowledge']),
	}

	return result
}

function modelApiRagCreateKnowledgeResponseBodyToResponseContent(name: string, value: Api.RagCreateKnowledgeResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagCreateKnowledgeResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagCreateKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagCreateKnowledgeResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'knowledge': allowUndefined(modelApiApiragKnowledgeMetadataToResponse)(`${name}.knowledge`, value['knowledge']),
	}

	return result
}

export function modelApiRagCreateKnowledgeResponseBodyFromRequest(name: string, value: any): Api.RagCreateKnowledgeResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagCreateKnowledgeResponseBody = modelApiRagCreateKnowledgeResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagCreateKnowledgeResponseBodyToResponse(name: string, value: Api.RagCreateKnowledgeResponseBody): ToResponse<Api.RagCreateKnowledgeResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagCreateKnowledgeResponseBody> = modelApiRagCreateKnowledgeResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagCreateKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextMessageRequestKeys: string[] = ['header', 'body']

function modelApiRagDeleteContextMessageRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextMessageRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextMessageRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextMessageRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteContextMessageRequestToResponseContent(name: string, value: Api.RagDeleteContextMessageRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextMessageRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextMessageRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextMessageRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteContextMessageRequestFromRequest(name: string, value: any): Api.RagDeleteContextMessageRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextMessageRequest = modelApiRagDeleteContextMessageRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextMessageRequestToResponse(name: string, value: Api.RagDeleteContextMessageRequest): ToResponse<Api.RagDeleteContextMessageRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextMessageRequest> = modelApiRagDeleteContextMessageRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextMessageRequestBodyKeys: string[] = ['contextId', 'hash', 'owner', 'index']

function modelApiRagDeleteContextMessageRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextMessageRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextMessageRequestBody = {
		'contextId': allowUndefined(stringFromRequest)(`${name}.contextId`, value['contextId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'index': allowUndefined(integerFromRequest)(`${name}.index`, value['index']),
	}

	return result
}

function modelApiRagDeleteContextMessageRequestBodyToResponseContent(name: string, value: Api.RagDeleteContextMessageRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextMessageRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextMessageRequestBody> = {
		'contextId': allowUndefined(stringToResponse)(`${name}.contextId`, value['contextId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'index': allowUndefined(integerToResponse)(`${name}.index`, value['index']),
	}

	return result
}

export function modelApiRagDeleteContextMessageRequestBodyFromRequest(name: string, value: any): Api.RagDeleteContextMessageRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextMessageRequestBody = modelApiRagDeleteContextMessageRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextMessageRequestBodyToResponse(name: string, value: Api.RagDeleteContextMessageRequestBody): ToResponse<Api.RagDeleteContextMessageRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextMessageRequestBody> = modelApiRagDeleteContextMessageRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextMessageResponseKeys: string[] = ['header', 'body']

function modelApiRagDeleteContextMessageResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextMessageResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextMessageResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextMessageResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteContextMessageResponseToResponseContent(name: string, value: Api.RagDeleteContextMessageResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextMessageResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextMessageResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextMessageResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteContextMessageResponseFromRequest(name: string, value: any): Api.RagDeleteContextMessageResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextMessageResponse = modelApiRagDeleteContextMessageResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextMessageResponseToResponse(name: string, value: Api.RagDeleteContextMessageResponse): ToResponse<Api.RagDeleteContextMessageResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextMessageResponse> = modelApiRagDeleteContextMessageResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextMessageResponseBodyKeys: string[] = ['status']

function modelApiRagDeleteContextMessageResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextMessageResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextMessageResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiRagDeleteContextMessageResponseBodyToResponseContent(name: string, value: Api.RagDeleteContextMessageResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextMessageResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextMessageResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextMessageResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiRagDeleteContextMessageResponseBodyFromRequest(name: string, value: any): Api.RagDeleteContextMessageResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextMessageResponseBody = modelApiRagDeleteContextMessageResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextMessageResponseBodyToResponse(name: string, value: Api.RagDeleteContextMessageResponseBody): ToResponse<Api.RagDeleteContextMessageResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextMessageResponseBody> = modelApiRagDeleteContextMessageResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextMessageResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextRequestKeys: string[] = ['header', 'body']

function modelApiRagDeleteContextRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteContextRequestToResponseContent(name: string, value: Api.RagDeleteContextRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteContextRequestFromRequest(name: string, value: any): Api.RagDeleteContextRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextRequest = modelApiRagDeleteContextRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextRequestToResponse(name: string, value: Api.RagDeleteContextRequest): ToResponse<Api.RagDeleteContextRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextRequest> = modelApiRagDeleteContextRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextRequestBodyKeys: string[] = ['contextId', 'hash', 'owner']

function modelApiRagDeleteContextRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextRequestBody = {
		'contextId': allowUndefined(stringFromRequest)(`${name}.contextId`, value['contextId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
	}

	return result
}

function modelApiRagDeleteContextRequestBodyToResponseContent(name: string, value: Api.RagDeleteContextRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextRequestBody> = {
		'contextId': allowUndefined(stringToResponse)(`${name}.contextId`, value['contextId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
	}

	return result
}

export function modelApiRagDeleteContextRequestBodyFromRequest(name: string, value: any): Api.RagDeleteContextRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextRequestBody = modelApiRagDeleteContextRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextRequestBodyToResponse(name: string, value: Api.RagDeleteContextRequestBody): ToResponse<Api.RagDeleteContextRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextRequestBody> = modelApiRagDeleteContextRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextResponseKeys: string[] = ['header', 'body']

function modelApiRagDeleteContextResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteContextResponseToResponseContent(name: string, value: Api.RagDeleteContextResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteContextResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteContextResponseFromRequest(name: string, value: any): Api.RagDeleteContextResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextResponse = modelApiRagDeleteContextResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextResponseToResponse(name: string, value: Api.RagDeleteContextResponse): ToResponse<Api.RagDeleteContextResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextResponse> = modelApiRagDeleteContextResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteContextResponseBodyKeys: string[] = ['status']

function modelApiRagDeleteContextResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteContextResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteContextResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiRagDeleteContextResponseBodyToResponseContent(name: string, value: Api.RagDeleteContextResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteContextResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteContextResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteContextResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiRagDeleteContextResponseBodyFromRequest(name: string, value: any): Api.RagDeleteContextResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteContextResponseBody = modelApiRagDeleteContextResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteContextResponseBodyToResponse(name: string, value: Api.RagDeleteContextResponseBody): ToResponse<Api.RagDeleteContextResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteContextResponseBody> = modelApiRagDeleteContextResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteContextResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteExperienceRequestKeys: string[] = ['header', 'body']

function modelApiRagDeleteExperienceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteExperienceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteExperienceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteExperienceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteExperienceRequestToResponseContent(name: string, value: Api.RagDeleteExperienceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteExperienceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteExperienceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteExperienceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteExperienceRequestFromRequest(name: string, value: any): Api.RagDeleteExperienceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteExperienceRequest = modelApiRagDeleteExperienceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteExperienceRequestToResponse(name: string, value: Api.RagDeleteExperienceRequest): ToResponse<Api.RagDeleteExperienceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteExperienceRequest> = modelApiRagDeleteExperienceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteExperienceRequestBodyKeys: string[] = ['experienceId', 'hash', 'owner']

function modelApiRagDeleteExperienceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteExperienceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteExperienceRequestBody = {
		'experienceId': allowUndefined(stringFromRequest)(`${name}.experienceId`, value['experienceId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
	}

	return result
}

function modelApiRagDeleteExperienceRequestBodyToResponseContent(name: string, value: Api.RagDeleteExperienceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteExperienceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteExperienceRequestBody> = {
		'experienceId': allowUndefined(stringToResponse)(`${name}.experienceId`, value['experienceId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
	}

	return result
}

export function modelApiRagDeleteExperienceRequestBodyFromRequest(name: string, value: any): Api.RagDeleteExperienceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteExperienceRequestBody = modelApiRagDeleteExperienceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteExperienceRequestBodyToResponse(name: string, value: Api.RagDeleteExperienceRequestBody): ToResponse<Api.RagDeleteExperienceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteExperienceRequestBody> = modelApiRagDeleteExperienceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteExperienceResponseKeys: string[] = ['header', 'body']

function modelApiRagDeleteExperienceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteExperienceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteExperienceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteExperienceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteExperienceResponseToResponseContent(name: string, value: Api.RagDeleteExperienceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteExperienceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteExperienceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteExperienceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteExperienceResponseFromRequest(name: string, value: any): Api.RagDeleteExperienceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteExperienceResponse = modelApiRagDeleteExperienceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteExperienceResponseToResponse(name: string, value: Api.RagDeleteExperienceResponse): ToResponse<Api.RagDeleteExperienceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteExperienceResponse> = modelApiRagDeleteExperienceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteExperienceResponseBodyKeys: string[] = ['status']

function modelApiRagDeleteExperienceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteExperienceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteExperienceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiRagDeleteExperienceResponseBodyToResponseContent(name: string, value: Api.RagDeleteExperienceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteExperienceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteExperienceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteExperienceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiRagDeleteExperienceResponseBodyFromRequest(name: string, value: any): Api.RagDeleteExperienceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteExperienceResponseBody = modelApiRagDeleteExperienceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteExperienceResponseBodyToResponse(name: string, value: Api.RagDeleteExperienceResponseBody): ToResponse<Api.RagDeleteExperienceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteExperienceResponseBody> = modelApiRagDeleteExperienceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteExperienceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteKnowledgeRequestKeys: string[] = ['header', 'body']

function modelApiRagDeleteKnowledgeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteKnowledgeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteKnowledgeRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteKnowledgeRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteKnowledgeRequestToResponseContent(name: string, value: Api.RagDeleteKnowledgeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteKnowledgeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteKnowledgeRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteKnowledgeRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteKnowledgeRequestFromRequest(name: string, value: any): Api.RagDeleteKnowledgeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteKnowledgeRequest = modelApiRagDeleteKnowledgeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteKnowledgeRequestToResponse(name: string, value: Api.RagDeleteKnowledgeRequest): ToResponse<Api.RagDeleteKnowledgeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteKnowledgeRequest> = modelApiRagDeleteKnowledgeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteKnowledgeRequestBodyKeys: string[] = ['knowledgeId', 'hash', 'owner']

function modelApiRagDeleteKnowledgeRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteKnowledgeRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteKnowledgeRequestBody = {
		'knowledgeId': allowUndefined(stringFromRequest)(`${name}.knowledgeId`, value['knowledgeId']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
	}

	return result
}

function modelApiRagDeleteKnowledgeRequestBodyToResponseContent(name: string, value: Api.RagDeleteKnowledgeRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteKnowledgeRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteKnowledgeRequestBody> = {
		'knowledgeId': allowUndefined(stringToResponse)(`${name}.knowledgeId`, value['knowledgeId']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
	}

	return result
}

export function modelApiRagDeleteKnowledgeRequestBodyFromRequest(name: string, value: any): Api.RagDeleteKnowledgeRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteKnowledgeRequestBody = modelApiRagDeleteKnowledgeRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteKnowledgeRequestBodyToResponse(name: string, value: Api.RagDeleteKnowledgeRequestBody): ToResponse<Api.RagDeleteKnowledgeRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteKnowledgeRequestBody> = modelApiRagDeleteKnowledgeRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteKnowledgeResponseKeys: string[] = ['header', 'body']

function modelApiRagDeleteKnowledgeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteKnowledgeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteKnowledgeResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteKnowledgeResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiRagDeleteKnowledgeResponseToResponseContent(name: string, value: Api.RagDeleteKnowledgeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteKnowledgeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteKnowledgeResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiRagDeleteKnowledgeResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiRagDeleteKnowledgeResponseFromRequest(name: string, value: any): Api.RagDeleteKnowledgeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteKnowledgeResponse = modelApiRagDeleteKnowledgeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteKnowledgeResponseToResponse(name: string, value: Api.RagDeleteKnowledgeResponse): ToResponse<Api.RagDeleteKnowledgeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteKnowledgeResponse> = modelApiRagDeleteKnowledgeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiRagDeleteKnowledgeResponseBodyKeys: string[] = ['status']

function modelApiRagDeleteKnowledgeResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagDeleteKnowledgeResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagDeleteKnowledgeResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiRagDeleteKnowledgeResponseBodyToResponseContent(name: string, value: Api.RagDeleteKnowledgeResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagDeleteKnowledgeResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagDeleteKnowledgeResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagDeleteKnowledgeResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiRagDeleteKnowledgeResponseBodyFromRequest(name: string, value: any): Api.RagDeleteKnowledgeResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagDeleteKnowledgeResponseBody = modelApiRagDeleteKnowledgeResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagDeleteKnowledgeResponseBodyToResponse(name: string, value: Api.RagDeleteKnowledgeResponseBody): ToResponse<Api.RagDeleteKnowledgeResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagDeleteKnowledgeResponseBody> = modelApiRagDeleteKnowledgeResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagDeleteKnowledgeResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiRagExperienceContentKeys: string[] = ['experienceId', 'url', 'hash', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiRagExperienceContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagExperienceContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagExperienceContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagExperienceContent = {
		'experienceId': allowUndefined(stringFromRequest)(`${name}.experienceId`, value['experienceId']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiRagExperienceContentToResponseContent(name: string, value: Api.RagExperienceContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagExperienceContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagExperienceContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagExperienceContent> = {
		'experienceId': allowUndefined(stringToResponse)(`${name}.experienceId`, value['experienceId']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiRagExperienceContentFromRequest(name: string, value: any): Api.RagExperienceContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagExperienceContent = modelApiRagExperienceContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagExperienceContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagExperienceContentToResponse(name: string, value: Api.RagExperienceContent): ToResponse<Api.RagExperienceContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagExperienceContent> = modelApiRagExperienceContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagExperienceContent: ${key}`
			}
		}
	}

	return result
}

const ApiRagExperienceMetadataKeys: string[] = ['uid', 'app', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiRagExperienceMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagExperienceMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagExperienceMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagExperienceMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringFromRequest)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiRagExperienceMetadataToResponseContent(name: string, value: Api.RagExperienceMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagExperienceMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagExperienceMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagExperienceMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'app': allowUndefined(stringToResponse)(`${name}.app`, value['app']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiRagExperienceMetadataFromRequest(name: string, value: any): Api.RagExperienceMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagExperienceMetadata = modelApiRagExperienceMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagExperienceMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagExperienceMetadataToResponse(name: string, value: Api.RagExperienceMetadata): ToResponse<Api.RagExperienceMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagExperienceMetadata> = modelApiRagExperienceMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagExperienceMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiRagKnowledgeContentKeys: string[] = ['knowledgeId', 'url', 'hash', 'owner', 'description', 'createdAt', 'updatedAt', 'signature']

function modelApiRagKnowledgeContentFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RagKnowledgeContent {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagKnowledgeContentKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RagKnowledgeContent = {
		'knowledgeId': allowUndefined(stringFromRequest)(`${name}.knowledgeId`, value['knowledgeId']),
		'url': allowUndefined(stringFromRequest)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringFromRequest)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiRagKnowledgeContentToResponseContent(name: string, value: Api.RagKnowledgeContent, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RagKnowledgeContent> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRagKnowledgeContentKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RagKnowledgeContent> = {
		'knowledgeId': allowUndefined(stringToResponse)(`${name}.knowledgeId`, value['knowledgeId']),
		'url': allowUndefined(stringToResponse)(`${name}.url`, value['url']),
		'hash': allowUndefined(stringToResponse)(`${name}.hash`, value['hash']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiRagKnowledgeContentFromRequest(name: string, value: any): Api.RagKnowledgeContent {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RagKnowledgeContent = modelApiRagKnowledgeContentFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagKnowledgeContent: ${key}`
			}
		}
	}

	return result
}

export function modelApiRagKnowledgeContentToResponse(name: string, value: Api.RagKnowledgeContent): ToResponse<Api.RagKnowledgeContent> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RagKnowledgeContent> = modelApiRagKnowledgeContentToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RagKnowledgeContent: ${key}`
			}
		}
	}

	return result
}

const ApiRpcStatusKeys: string[] = ['code', 'message', 'details']

function modelApiRpcStatusFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.RpcStatus {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRpcStatusKeys.forEach(k => knownKeys[k] = true)

	const result: Api.RpcStatus = {
		'code': allowUndefined(integerFromRequest)(`${name}.code`, value['code']),
		'message': allowUndefined(stringFromRequest)(`${name}.message`, value['message']),
		'details': allowUndefined(arrayFromRequest(modelApiProtobufAnyFromRequest))(`${name}.details`, value['details']),
	}

	return result
}

function modelApiRpcStatusToResponseContent(name: string, value: Api.RpcStatus, knownKeys: Record<string, boolean> = {}): ToResponse<Api.RpcStatus> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiRpcStatusKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.RpcStatus> = {
		'code': allowUndefined(integerToResponse)(`${name}.code`, value['code']),
		'message': allowUndefined(stringToResponse)(`${name}.message`, value['message']),
		'details': allowUndefined(arrayToResponse(modelApiProtobufAnyToResponse))(`${name}.details`, value['details']),
	}

	return result
}

export function modelApiRpcStatusFromRequest(name: string, value: any): Api.RpcStatus {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.RpcStatus = modelApiRpcStatusFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RpcStatus: ${key}`
			}
		}
	}

	return result
}

export function modelApiRpcStatusToResponse(name: string, value: Api.RpcStatus): ToResponse<Api.RpcStatus> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.RpcStatus> = modelApiRpcStatusToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.RpcStatus: ${key}`
			}
		}
	}

	return result
}

const ApiServiceCreateServiceRequestKeys: string[] = ['header', 'body']

function modelApiServiceCreateServiceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceCreateServiceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceCreateServiceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceCreateServiceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceCreateServiceRequestToResponseContent(name: string, value: Api.ServiceCreateServiceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceCreateServiceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceCreateServiceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceCreateServiceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceCreateServiceRequestFromRequest(name: string, value: any): Api.ServiceCreateServiceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceCreateServiceRequest = modelApiServiceCreateServiceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceCreateServiceRequestToResponse(name: string, value: Api.ServiceCreateServiceRequest): ToResponse<Api.ServiceCreateServiceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceCreateServiceRequest> = modelApiServiceCreateServiceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiServiceCreateServiceRequestBodyKeys: string[] = ['service']

function modelApiServiceCreateServiceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceCreateServiceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceCreateServiceRequestBody = {
		'service': allowUndefined(modelApiCommonServiceMetadataFromRequest)(`${name}.service`, value['service']),
	}

	return result
}

function modelApiServiceCreateServiceRequestBodyToResponseContent(name: string, value: Api.ServiceCreateServiceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceCreateServiceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceCreateServiceRequestBody> = {
		'service': allowUndefined(modelApiCommonServiceMetadataToResponse)(`${name}.service`, value['service']),
	}

	return result
}

export function modelApiServiceCreateServiceRequestBodyFromRequest(name: string, value: any): Api.ServiceCreateServiceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceCreateServiceRequestBody = modelApiServiceCreateServiceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceCreateServiceRequestBodyToResponse(name: string, value: Api.ServiceCreateServiceRequestBody): ToResponse<Api.ServiceCreateServiceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceCreateServiceRequestBody> = modelApiServiceCreateServiceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceCreateServiceResponseKeys: string[] = ['header', 'body']

function modelApiServiceCreateServiceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceCreateServiceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceCreateServiceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceCreateServiceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceCreateServiceResponseToResponseContent(name: string, value: Api.ServiceCreateServiceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceCreateServiceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceCreateServiceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceCreateServiceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceCreateServiceResponseFromRequest(name: string, value: any): Api.ServiceCreateServiceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceCreateServiceResponse = modelApiServiceCreateServiceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceCreateServiceResponseToResponse(name: string, value: Api.ServiceCreateServiceResponse): ToResponse<Api.ServiceCreateServiceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceCreateServiceResponse> = modelApiServiceCreateServiceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiServiceCreateServiceResponseBodyKeys: string[] = ['status', 'service']

function modelApiServiceCreateServiceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceCreateServiceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceCreateServiceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataFromRequest)(`${name}.service`, value['service']),
	}

	return result
}

function modelApiServiceCreateServiceResponseBodyToResponseContent(name: string, value: Api.ServiceCreateServiceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceCreateServiceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceCreateServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceCreateServiceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataToResponse)(`${name}.service`, value['service']),
	}

	return result
}

export function modelApiServiceCreateServiceResponseBodyFromRequest(name: string, value: any): Api.ServiceCreateServiceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceCreateServiceResponseBody = modelApiServiceCreateServiceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceCreateServiceResponseBodyToResponse(name: string, value: Api.ServiceCreateServiceResponseBody): ToResponse<Api.ServiceCreateServiceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceCreateServiceResponseBody> = modelApiServiceCreateServiceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceCreateServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDeleteServiceRequestKeys: string[] = ['header', 'body']

function modelApiServiceDeleteServiceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDeleteServiceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDeleteServiceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDeleteServiceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceDeleteServiceRequestToResponseContent(name: string, value: Api.ServiceDeleteServiceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDeleteServiceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDeleteServiceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDeleteServiceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceDeleteServiceRequestFromRequest(name: string, value: any): Api.ServiceDeleteServiceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDeleteServiceRequest = modelApiServiceDeleteServiceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDeleteServiceRequestToResponse(name: string, value: Api.ServiceDeleteServiceRequest): ToResponse<Api.ServiceDeleteServiceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDeleteServiceRequest> = modelApiServiceDeleteServiceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDeleteServiceRequestBodyKeys: string[] = ['did', 'version']

function modelApiServiceDeleteServiceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDeleteServiceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDeleteServiceRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
	}

	return result
}

function modelApiServiceDeleteServiceRequestBodyToResponseContent(name: string, value: Api.ServiceDeleteServiceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDeleteServiceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDeleteServiceRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
	}

	return result
}

export function modelApiServiceDeleteServiceRequestBodyFromRequest(name: string, value: any): Api.ServiceDeleteServiceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDeleteServiceRequestBody = modelApiServiceDeleteServiceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDeleteServiceRequestBodyToResponse(name: string, value: Api.ServiceDeleteServiceRequestBody): ToResponse<Api.ServiceDeleteServiceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDeleteServiceRequestBody> = modelApiServiceDeleteServiceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDeleteServiceResponseKeys: string[] = ['header', 'body']

function modelApiServiceDeleteServiceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDeleteServiceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDeleteServiceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDeleteServiceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceDeleteServiceResponseToResponseContent(name: string, value: Api.ServiceDeleteServiceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDeleteServiceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDeleteServiceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDeleteServiceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceDeleteServiceResponseFromRequest(name: string, value: any): Api.ServiceDeleteServiceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDeleteServiceResponse = modelApiServiceDeleteServiceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDeleteServiceResponseToResponse(name: string, value: Api.ServiceDeleteServiceResponse): ToResponse<Api.ServiceDeleteServiceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDeleteServiceResponse> = modelApiServiceDeleteServiceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDeleteServiceResponseBodyKeys: string[] = ['status']

function modelApiServiceDeleteServiceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDeleteServiceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDeleteServiceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiServiceDeleteServiceResponseBodyToResponseContent(name: string, value: Api.ServiceDeleteServiceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDeleteServiceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDeleteServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDeleteServiceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiServiceDeleteServiceResponseBodyFromRequest(name: string, value: any): Api.ServiceDeleteServiceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDeleteServiceResponseBody = modelApiServiceDeleteServiceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDeleteServiceResponseBodyToResponse(name: string, value: Api.ServiceDeleteServiceResponseBody): ToResponse<Api.ServiceDeleteServiceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDeleteServiceResponseBody> = modelApiServiceDeleteServiceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDeleteServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDetailServiceRequestKeys: string[] = ['header', 'body']

function modelApiServiceDetailServiceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDetailServiceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDetailServiceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDetailServiceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceDetailServiceRequestToResponseContent(name: string, value: Api.ServiceDetailServiceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDetailServiceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDetailServiceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDetailServiceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceDetailServiceRequestFromRequest(name: string, value: any): Api.ServiceDetailServiceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDetailServiceRequest = modelApiServiceDetailServiceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDetailServiceRequestToResponse(name: string, value: Api.ServiceDetailServiceRequest): ToResponse<Api.ServiceDetailServiceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDetailServiceRequest> = modelApiServiceDetailServiceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDetailServiceRequestBodyKeys: string[] = ['did', 'version']

function modelApiServiceDetailServiceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDetailServiceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDetailServiceRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'version': allowUndefined(integerFromRequest)(`${name}.version`, value['version']),
	}

	return result
}

function modelApiServiceDetailServiceRequestBodyToResponseContent(name: string, value: Api.ServiceDetailServiceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDetailServiceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDetailServiceRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'version': allowUndefined(integerToResponse)(`${name}.version`, value['version']),
	}

	return result
}

export function modelApiServiceDetailServiceRequestBodyFromRequest(name: string, value: any): Api.ServiceDetailServiceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDetailServiceRequestBody = modelApiServiceDetailServiceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDetailServiceRequestBodyToResponse(name: string, value: Api.ServiceDetailServiceRequestBody): ToResponse<Api.ServiceDetailServiceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDetailServiceRequestBody> = modelApiServiceDetailServiceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDetailServiceResponseKeys: string[] = ['header', 'body']

function modelApiServiceDetailServiceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDetailServiceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDetailServiceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDetailServiceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceDetailServiceResponseToResponseContent(name: string, value: Api.ServiceDetailServiceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDetailServiceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDetailServiceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceDetailServiceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceDetailServiceResponseFromRequest(name: string, value: any): Api.ServiceDetailServiceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDetailServiceResponse = modelApiServiceDetailServiceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDetailServiceResponseToResponse(name: string, value: Api.ServiceDetailServiceResponse): ToResponse<Api.ServiceDetailServiceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDetailServiceResponse> = modelApiServiceDetailServiceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiServiceDetailServiceResponseBodyKeys: string[] = ['status', 'service']

function modelApiServiceDetailServiceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceDetailServiceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceDetailServiceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataFromRequest)(`${name}.service`, value['service']),
	}

	return result
}

function modelApiServiceDetailServiceResponseBodyToResponseContent(name: string, value: Api.ServiceDetailServiceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceDetailServiceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceDetailServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceDetailServiceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'service': allowUndefined(modelApiCommonServiceMetadataToResponse)(`${name}.service`, value['service']),
	}

	return result
}

export function modelApiServiceDetailServiceResponseBodyFromRequest(name: string, value: any): Api.ServiceDetailServiceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceDetailServiceResponseBody = modelApiServiceDetailServiceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceDetailServiceResponseBodyToResponse(name: string, value: Api.ServiceDetailServiceResponseBody): ToResponse<Api.ServiceDetailServiceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceDetailServiceResponseBody> = modelApiServiceDetailServiceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceDetailServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceSearchServiceConditionKeys: string[] = ['code', 'owner', 'name', 'keyword']

function modelApiServiceSearchServiceConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceSearchServiceCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceSearchServiceCondition = {
		'code': allowUndefined(enumApiCommonServiceCodeEnumFromRequest)(`${name}.code`, value['code']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'keyword': allowUndefined(stringFromRequest)(`${name}.keyword`, value['keyword']),
	}

	return result
}

function modelApiServiceSearchServiceConditionToResponseContent(name: string, value: Api.ServiceSearchServiceCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceSearchServiceCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceSearchServiceCondition> = {
		'code': allowUndefined(enumApiCommonServiceCodeEnumToResponse)(`${name}.code`, value['code']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'keyword': allowUndefined(stringToResponse)(`${name}.keyword`, value['keyword']),
	}

	return result
}

export function modelApiServiceSearchServiceConditionFromRequest(name: string, value: any): Api.ServiceSearchServiceCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceSearchServiceCondition = modelApiServiceSearchServiceConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceSearchServiceConditionToResponse(name: string, value: Api.ServiceSearchServiceCondition): ToResponse<Api.ServiceSearchServiceCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceSearchServiceCondition> = modelApiServiceSearchServiceConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceCondition: ${key}`
			}
		}
	}

	return result
}

const ApiServiceSearchServiceRequestKeys: string[] = ['header', 'body']

function modelApiServiceSearchServiceRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceSearchServiceRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceSearchServiceRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceSearchServiceRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceSearchServiceRequestToResponseContent(name: string, value: Api.ServiceSearchServiceRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceSearchServiceRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceSearchServiceRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceSearchServiceRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceSearchServiceRequestFromRequest(name: string, value: any): Api.ServiceSearchServiceRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceSearchServiceRequest = modelApiServiceSearchServiceRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceSearchServiceRequestToResponse(name: string, value: Api.ServiceSearchServiceRequest): ToResponse<Api.ServiceSearchServiceRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceSearchServiceRequest> = modelApiServiceSearchServiceRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceRequest: ${key}`
			}
		}
	}

	return result
}

const ApiServiceSearchServiceRequestBodyKeys: string[] = ['condition', 'page']

function modelApiServiceSearchServiceRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceSearchServiceRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceSearchServiceRequestBody = {
		'condition': allowUndefined(modelApiServiceSearchServiceConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiServiceSearchServiceRequestBodyToResponseContent(name: string, value: Api.ServiceSearchServiceRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceSearchServiceRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceSearchServiceRequestBody> = {
		'condition': allowUndefined(modelApiServiceSearchServiceConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiServiceSearchServiceRequestBodyFromRequest(name: string, value: any): Api.ServiceSearchServiceRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceSearchServiceRequestBody = modelApiServiceSearchServiceRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceSearchServiceRequestBodyToResponse(name: string, value: Api.ServiceSearchServiceRequestBody): ToResponse<Api.ServiceSearchServiceRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceSearchServiceRequestBody> = modelApiServiceSearchServiceRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiServiceSearchServiceResponseKeys: string[] = ['header', 'body']

function modelApiServiceSearchServiceResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceSearchServiceResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceSearchServiceResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceSearchServiceResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiServiceSearchServiceResponseToResponseContent(name: string, value: Api.ServiceSearchServiceResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceSearchServiceResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceSearchServiceResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiServiceSearchServiceResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiServiceSearchServiceResponseFromRequest(name: string, value: any): Api.ServiceSearchServiceResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceSearchServiceResponse = modelApiServiceSearchServiceResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceSearchServiceResponseToResponse(name: string, value: Api.ServiceSearchServiceResponse): ToResponse<Api.ServiceSearchServiceResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceSearchServiceResponse> = modelApiServiceSearchServiceResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceResponse: ${key}`
			}
		}
	}

	return result
}

const ApiServiceSearchServiceResponseBodyKeys: string[] = ['status', 'services', 'page']

function modelApiServiceSearchServiceResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ServiceSearchServiceResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ServiceSearchServiceResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'services': allowUndefined(arrayFromRequest(modelApiCommonServiceMetadataFromRequest))(`${name}.services`, value['services']),
		'page': allowUndefined(modelApiCommonResponsePageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiServiceSearchServiceResponseBodyToResponseContent(name: string, value: Api.ServiceSearchServiceResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.ServiceSearchServiceResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiServiceSearchServiceResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.ServiceSearchServiceResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'services': allowUndefined(arrayToResponse(modelApiCommonServiceMetadataToResponse))(`${name}.services`, value['services']),
		'page': allowUndefined(modelApiCommonResponsePageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiServiceSearchServiceResponseBodyFromRequest(name: string, value: any): Api.ServiceSearchServiceResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ServiceSearchServiceResponseBody = modelApiServiceSearchServiceResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiServiceSearchServiceResponseBodyToResponse(name: string, value: Api.ServiceSearchServiceResponseBody): ToResponse<Api.ServiceSearchServiceResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.ServiceSearchServiceResponseBody> = modelApiServiceSearchServiceResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.ServiceSearchServiceResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionCreateSessionRequestKeys: string[] = ['header', 'body']

function modelApiSessionCreateSessionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionCreateSessionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionCreateSessionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionCreateSessionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionCreateSessionRequestToResponseContent(name: string, value: Api.SessionCreateSessionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionCreateSessionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionCreateSessionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionCreateSessionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionCreateSessionRequestFromRequest(name: string, value: any): Api.SessionCreateSessionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionCreateSessionRequest = modelApiSessionCreateSessionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionCreateSessionRequestToResponse(name: string, value: Api.SessionCreateSessionRequest): ToResponse<Api.SessionCreateSessionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionCreateSessionRequest> = modelApiSessionCreateSessionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSessionCreateSessionRequestBodyKeys: string[] = ['session']

function modelApiSessionCreateSessionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionCreateSessionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionCreateSessionRequestBody = {
		'session': allowUndefined(modelApiSessionSessionMetadataFromRequest)(`${name}.session`, value['session']),
	}

	return result
}

function modelApiSessionCreateSessionRequestBodyToResponseContent(name: string, value: Api.SessionCreateSessionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionCreateSessionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionCreateSessionRequestBody> = {
		'session': allowUndefined(modelApiSessionSessionMetadataToResponse)(`${name}.session`, value['session']),
	}

	return result
}

export function modelApiSessionCreateSessionRequestBodyFromRequest(name: string, value: any): Api.SessionCreateSessionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionCreateSessionRequestBody = modelApiSessionCreateSessionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionCreateSessionRequestBodyToResponse(name: string, value: Api.SessionCreateSessionRequestBody): ToResponse<Api.SessionCreateSessionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionCreateSessionRequestBody> = modelApiSessionCreateSessionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionCreateSessionResponseKeys: string[] = ['header', 'body']

function modelApiSessionCreateSessionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionCreateSessionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionCreateSessionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionCreateSessionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionCreateSessionResponseToResponseContent(name: string, value: Api.SessionCreateSessionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionCreateSessionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionCreateSessionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionCreateSessionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionCreateSessionResponseFromRequest(name: string, value: any): Api.SessionCreateSessionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionCreateSessionResponse = modelApiSessionCreateSessionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionCreateSessionResponseToResponse(name: string, value: Api.SessionCreateSessionResponse): ToResponse<Api.SessionCreateSessionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionCreateSessionResponse> = modelApiSessionCreateSessionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSessionCreateSessionResponseBodyKeys: string[] = ['status', 'session']

function modelApiSessionCreateSessionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionCreateSessionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionCreateSessionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'session': allowUndefined(modelApiSessionSessionMetadataFromRequest)(`${name}.session`, value['session']),
	}

	return result
}

function modelApiSessionCreateSessionResponseBodyToResponseContent(name: string, value: Api.SessionCreateSessionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionCreateSessionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionCreateSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionCreateSessionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'session': allowUndefined(modelApiSessionSessionMetadataToResponse)(`${name}.session`, value['session']),
	}

	return result
}

export function modelApiSessionCreateSessionResponseBodyFromRequest(name: string, value: any): Api.SessionCreateSessionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionCreateSessionResponseBody = modelApiSessionCreateSessionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionCreateSessionResponseBodyToResponse(name: string, value: Api.SessionCreateSessionResponseBody): ToResponse<Api.SessionCreateSessionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionCreateSessionResponseBody> = modelApiSessionCreateSessionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionCreateSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionDeleteSessionRequestKeys: string[] = ['header', 'body']

function modelApiSessionDeleteSessionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionDeleteSessionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionDeleteSessionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionDeleteSessionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionDeleteSessionRequestToResponseContent(name: string, value: Api.SessionDeleteSessionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionDeleteSessionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionDeleteSessionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionDeleteSessionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionDeleteSessionRequestFromRequest(name: string, value: any): Api.SessionDeleteSessionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionDeleteSessionRequest = modelApiSessionDeleteSessionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionDeleteSessionRequestToResponse(name: string, value: Api.SessionDeleteSessionRequest): ToResponse<Api.SessionDeleteSessionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionDeleteSessionRequest> = modelApiSessionDeleteSessionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSessionDeleteSessionRequestBodyKeys: string[] = ['uid']

function modelApiSessionDeleteSessionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionDeleteSessionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionDeleteSessionRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiSessionDeleteSessionRequestBodyToResponseContent(name: string, value: Api.SessionDeleteSessionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionDeleteSessionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionDeleteSessionRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiSessionDeleteSessionRequestBodyFromRequest(name: string, value: any): Api.SessionDeleteSessionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionDeleteSessionRequestBody = modelApiSessionDeleteSessionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionDeleteSessionRequestBodyToResponse(name: string, value: Api.SessionDeleteSessionRequestBody): ToResponse<Api.SessionDeleteSessionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionDeleteSessionRequestBody> = modelApiSessionDeleteSessionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionDeleteSessionResponseKeys: string[] = ['header', 'body']

function modelApiSessionDeleteSessionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionDeleteSessionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionDeleteSessionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionDeleteSessionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionDeleteSessionResponseToResponseContent(name: string, value: Api.SessionDeleteSessionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionDeleteSessionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionDeleteSessionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionDeleteSessionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionDeleteSessionResponseFromRequest(name: string, value: any): Api.SessionDeleteSessionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionDeleteSessionResponse = modelApiSessionDeleteSessionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionDeleteSessionResponseToResponse(name: string, value: Api.SessionDeleteSessionResponse): ToResponse<Api.SessionDeleteSessionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionDeleteSessionResponse> = modelApiSessionDeleteSessionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSessionDeleteSessionResponseBodyKeys: string[] = ['status']

function modelApiSessionDeleteSessionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionDeleteSessionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionDeleteSessionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiSessionDeleteSessionResponseBodyToResponseContent(name: string, value: Api.SessionDeleteSessionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionDeleteSessionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionDeleteSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionDeleteSessionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiSessionDeleteSessionResponseBodyFromRequest(name: string, value: any): Api.SessionDeleteSessionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionDeleteSessionResponseBody = modelApiSessionDeleteSessionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionDeleteSessionResponseBodyToResponse(name: string, value: Api.SessionDeleteSessionResponseBody): ToResponse<Api.SessionDeleteSessionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionDeleteSessionResponseBody> = modelApiSessionDeleteSessionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionDeleteSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSearchSessionConditionKeys: string[] = ['name', 'uid']

function modelApiSessionSearchSessionConditionFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSearchSessionCondition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionConditionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSearchSessionCondition = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiSessionSearchSessionConditionToResponseContent(name: string, value: Api.SessionSearchSessionCondition, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSearchSessionCondition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionConditionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSearchSessionCondition> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiSessionSearchSessionConditionFromRequest(name: string, value: any): Api.SessionSearchSessionCondition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSearchSessionCondition = modelApiSessionSearchSessionConditionFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionCondition: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSearchSessionConditionToResponse(name: string, value: Api.SessionSearchSessionCondition): ToResponse<Api.SessionSearchSessionCondition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSearchSessionCondition> = modelApiSessionSearchSessionConditionToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionCondition: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSearchSessionRequestKeys: string[] = ['header', 'body']

function modelApiSessionSearchSessionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSearchSessionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSearchSessionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSearchSessionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionSearchSessionRequestToResponseContent(name: string, value: Api.SessionSearchSessionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSearchSessionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSearchSessionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSearchSessionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionSearchSessionRequestFromRequest(name: string, value: any): Api.SessionSearchSessionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSearchSessionRequest = modelApiSessionSearchSessionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSearchSessionRequestToResponse(name: string, value: Api.SessionSearchSessionRequest): ToResponse<Api.SessionSearchSessionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSearchSessionRequest> = modelApiSessionSearchSessionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSearchSessionRequestBodyKeys: string[] = ['condition', 'page']

function modelApiSessionSearchSessionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSearchSessionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSearchSessionRequestBody = {
		'condition': allowUndefined(modelApiSessionSearchSessionConditionFromRequest)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageFromRequest)(`${name}.page`, value['page']),
	}

	return result
}

function modelApiSessionSearchSessionRequestBodyToResponseContent(name: string, value: Api.SessionSearchSessionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSearchSessionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSearchSessionRequestBody> = {
		'condition': allowUndefined(modelApiSessionSearchSessionConditionToResponse)(`${name}.condition`, value['condition']),
		'page': allowUndefined(modelApiCommonRequestPageToResponse)(`${name}.page`, value['page']),
	}

	return result
}

export function modelApiSessionSearchSessionRequestBodyFromRequest(name: string, value: any): Api.SessionSearchSessionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSearchSessionRequestBody = modelApiSessionSearchSessionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSearchSessionRequestBodyToResponse(name: string, value: Api.SessionSearchSessionRequestBody): ToResponse<Api.SessionSearchSessionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSearchSessionRequestBody> = modelApiSessionSearchSessionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSearchSessionResponseKeys: string[] = ['header', 'body']

function modelApiSessionSearchSessionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSearchSessionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSearchSessionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSearchSessionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionSearchSessionResponseToResponseContent(name: string, value: Api.SessionSearchSessionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSearchSessionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSearchSessionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSearchSessionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionSearchSessionResponseFromRequest(name: string, value: any): Api.SessionSearchSessionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSearchSessionResponse = modelApiSessionSearchSessionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSearchSessionResponseToResponse(name: string, value: Api.SessionSearchSessionResponse): ToResponse<Api.SessionSearchSessionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSearchSessionResponse> = modelApiSessionSearchSessionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSearchSessionResponseBodyKeys: string[] = ['status', 'sessions']

function modelApiSessionSearchSessionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSearchSessionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSearchSessionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'sessions': allowUndefined(arrayFromRequest(modelApiSessionSessionMetadataFromRequest))(`${name}.sessions`, value['sessions']),
	}

	return result
}

function modelApiSessionSearchSessionResponseBodyToResponseContent(name: string, value: Api.SessionSearchSessionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSearchSessionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSearchSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSearchSessionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'sessions': allowUndefined(arrayToResponse(modelApiSessionSessionMetadataToResponse))(`${name}.sessions`, value['sessions']),
	}

	return result
}

export function modelApiSessionSearchSessionResponseBodyFromRequest(name: string, value: any): Api.SessionSearchSessionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSearchSessionResponseBody = modelApiSessionSearchSessionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSearchSessionResponseBodyToResponse(name: string, value: Api.SessionSearchSessionResponseBody): ToResponse<Api.SessionSearchSessionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSearchSessionResponseBody> = modelApiSessionSearchSessionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSearchSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionDetailKeys: string[] = ['session']

function modelApiSessionSessionDetailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionDetail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionDetail = {
		'session': allowUndefined(modelApiSessionSessionMetadataFromRequest)(`${name}.session`, value['session']),
	}

	return result
}

function modelApiSessionSessionDetailToResponseContent(name: string, value: Api.SessionSessionDetail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionDetail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionDetail> = {
		'session': allowUndefined(modelApiSessionSessionMetadataToResponse)(`${name}.session`, value['session']),
	}

	return result
}

export function modelApiSessionSessionDetailFromRequest(name: string, value: any): Api.SessionSessionDetail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionDetail = modelApiSessionSessionDetailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetail: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionDetailToResponse(name: string, value: Api.SessionSessionDetail): ToResponse<Api.SessionSessionDetail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionDetail> = modelApiSessionSessionDetailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetail: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionDetailRequestKeys: string[] = ['header', 'body']

function modelApiSessionSessionDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSessionDetailRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionSessionDetailRequestToResponseContent(name: string, value: Api.SessionSessionDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSessionDetailRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionSessionDetailRequestFromRequest(name: string, value: any): Api.SessionSessionDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionDetailRequest = modelApiSessionSessionDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionDetailRequestToResponse(name: string, value: Api.SessionSessionDetailRequest): ToResponse<Api.SessionSessionDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionDetailRequest> = modelApiSessionSessionDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionDetailRequestBodyKeys: string[] = ['uid']

function modelApiSessionSessionDetailRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionDetailRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionDetailRequestBody = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
	}

	return result
}

function modelApiSessionSessionDetailRequestBodyToResponseContent(name: string, value: Api.SessionSessionDetailRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionDetailRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionDetailRequestBody> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
	}

	return result
}

export function modelApiSessionSessionDetailRequestBodyFromRequest(name: string, value: any): Api.SessionSessionDetailRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionDetailRequestBody = modelApiSessionSessionDetailRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionDetailRequestBodyToResponse(name: string, value: Api.SessionSessionDetailRequestBody): ToResponse<Api.SessionSessionDetailRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionDetailRequestBody> = modelApiSessionSessionDetailRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionDetailResponseKeys: string[] = ['header', 'body']

function modelApiSessionSessionDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSessionDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionSessionDetailResponseToResponseContent(name: string, value: Api.SessionSessionDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionSessionDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionSessionDetailResponseFromRequest(name: string, value: any): Api.SessionSessionDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionDetailResponse = modelApiSessionSessionDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionDetailResponseToResponse(name: string, value: Api.SessionSessionDetailResponse): ToResponse<Api.SessionSessionDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionDetailResponse> = modelApiSessionSessionDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionDetailResponseBodyKeys: string[] = ['status', 'detail']

function modelApiSessionSessionDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiSessionSessionDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiSessionSessionDetailResponseBodyToResponseContent(name: string, value: Api.SessionSessionDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiSessionSessionDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiSessionSessionDetailResponseBodyFromRequest(name: string, value: any): Api.SessionSessionDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionDetailResponseBody = modelApiSessionSessionDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionDetailResponseBodyToResponse(name: string, value: Api.SessionSessionDetailResponseBody): ToResponse<Api.SessionSessionDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionDetailResponseBody> = modelApiSessionSessionDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionSessionMetadataKeys: string[] = ['uid', 'owner', 'name', 'description', 'config', 'createdAt', 'updatedAt', 'signature']

function modelApiSessionSessionMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionSessionMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionSessionMetadata = {
		'uid': allowUndefined(stringFromRequest)(`${name}.uid`, value['uid']),
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'config': allowUndefined(stringFromRequest)(`${name}.config`, value['config']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiSessionSessionMetadataToResponseContent(name: string, value: Api.SessionSessionMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionSessionMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionSessionMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionSessionMetadata> = {
		'uid': allowUndefined(stringToResponse)(`${name}.uid`, value['uid']),
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'config': allowUndefined(stringToResponse)(`${name}.config`, value['config']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiSessionSessionMetadataFromRequest(name: string, value: any): Api.SessionSessionMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionSessionMetadata = modelApiSessionSessionMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionSessionMetadataToResponse(name: string, value: Api.SessionSessionMetadata): ToResponse<Api.SessionSessionMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionSessionMetadata> = modelApiSessionSessionMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionSessionMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiSessionUpdateSessionRequestKeys: string[] = ['header', 'body']

function modelApiSessionUpdateSessionRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionUpdateSessionRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionUpdateSessionRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionUpdateSessionRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionUpdateSessionRequestToResponseContent(name: string, value: Api.SessionUpdateSessionRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionUpdateSessionRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionUpdateSessionRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionUpdateSessionRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionUpdateSessionRequestFromRequest(name: string, value: any): Api.SessionUpdateSessionRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionUpdateSessionRequest = modelApiSessionUpdateSessionRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionUpdateSessionRequestToResponse(name: string, value: Api.SessionUpdateSessionRequest): ToResponse<Api.SessionUpdateSessionRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionUpdateSessionRequest> = modelApiSessionUpdateSessionRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSessionUpdateSessionRequestBodyKeys: string[] = ['session']

function modelApiSessionUpdateSessionRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionUpdateSessionRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionUpdateSessionRequestBody = {
		'session': allowUndefined(modelApiSessionSessionMetadataFromRequest)(`${name}.session`, value['session']),
	}

	return result
}

function modelApiSessionUpdateSessionRequestBodyToResponseContent(name: string, value: Api.SessionUpdateSessionRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionUpdateSessionRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionUpdateSessionRequestBody> = {
		'session': allowUndefined(modelApiSessionSessionMetadataToResponse)(`${name}.session`, value['session']),
	}

	return result
}

export function modelApiSessionUpdateSessionRequestBodyFromRequest(name: string, value: any): Api.SessionUpdateSessionRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionUpdateSessionRequestBody = modelApiSessionUpdateSessionRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionUpdateSessionRequestBodyToResponse(name: string, value: Api.SessionUpdateSessionRequestBody): ToResponse<Api.SessionUpdateSessionRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionUpdateSessionRequestBody> = modelApiSessionUpdateSessionRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSessionUpdateSessionResponseKeys: string[] = ['header', 'body']

function modelApiSessionUpdateSessionResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionUpdateSessionResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionUpdateSessionResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionUpdateSessionResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSessionUpdateSessionResponseToResponseContent(name: string, value: Api.SessionUpdateSessionResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionUpdateSessionResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionUpdateSessionResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSessionUpdateSessionResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSessionUpdateSessionResponseFromRequest(name: string, value: any): Api.SessionUpdateSessionResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionUpdateSessionResponse = modelApiSessionUpdateSessionResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionUpdateSessionResponseToResponse(name: string, value: Api.SessionUpdateSessionResponse): ToResponse<Api.SessionUpdateSessionResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionUpdateSessionResponse> = modelApiSessionUpdateSessionResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSessionUpdateSessionResponseBodyKeys: string[] = ['status', 'session']

function modelApiSessionUpdateSessionResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SessionUpdateSessionResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SessionUpdateSessionResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'session': allowUndefined(modelApiSessionSessionMetadataFromRequest)(`${name}.session`, value['session']),
	}

	return result
}

function modelApiSessionUpdateSessionResponseBodyToResponseContent(name: string, value: Api.SessionUpdateSessionResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SessionUpdateSessionResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSessionUpdateSessionResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SessionUpdateSessionResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'session': allowUndefined(modelApiSessionSessionMetadataToResponse)(`${name}.session`, value['session']),
	}

	return result
}

export function modelApiSessionUpdateSessionResponseBodyFromRequest(name: string, value: any): Api.SessionUpdateSessionResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SessionUpdateSessionResponseBody = modelApiSessionUpdateSessionResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSessionUpdateSessionResponseBodyToResponse(name: string, value: Api.SessionUpdateSessionResponseBody): ToResponse<Api.SessionUpdateSessionResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SessionUpdateSessionResponseBody> = modelApiSessionUpdateSessionResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SessionUpdateSessionResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSocialGetFriendResponseKeys: string[] = []

function modelApiSocialGetFriendResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SocialGetFriendResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialGetFriendResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SocialGetFriendResponse = {
	}

	return result
}

function modelApiSocialGetFriendResponseToResponseContent(name: string, value: Api.SocialGetFriendResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SocialGetFriendResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialGetFriendResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SocialGetFriendResponse> = {
	}

	return result
}

export function modelApiSocialGetFriendResponseFromRequest(name: string, value: any): Api.SocialGetFriendResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SocialGetFriendResponse = modelApiSocialGetFriendResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialGetFriendResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSocialGetFriendResponseToResponse(name: string, value: Api.SocialGetFriendResponse): ToResponse<Api.SocialGetFriendResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SocialGetFriendResponse> = modelApiSocialGetFriendResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialGetFriendResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSocialGetFriendsRequestKeys: string[] = []

function modelApiSocialGetFriendsRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SocialGetFriendsRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialGetFriendsRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SocialGetFriendsRequest = {
	}

	return result
}

function modelApiSocialGetFriendsRequestToResponseContent(name: string, value: Api.SocialGetFriendsRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SocialGetFriendsRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialGetFriendsRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SocialGetFriendsRequest> = {
	}

	return result
}

export function modelApiSocialGetFriendsRequestFromRequest(name: string, value: any): Api.SocialGetFriendsRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SocialGetFriendsRequest = modelApiSocialGetFriendsRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialGetFriendsRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSocialGetFriendsRequestToResponse(name: string, value: Api.SocialGetFriendsRequest): ToResponse<Api.SocialGetFriendsRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SocialGetFriendsRequest> = modelApiSocialGetFriendsRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialGetFriendsRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSocialMakeFriendsRequestKeys: string[] = []

function modelApiSocialMakeFriendsRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SocialMakeFriendsRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialMakeFriendsRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SocialMakeFriendsRequest = {
	}

	return result
}

function modelApiSocialMakeFriendsRequestToResponseContent(name: string, value: Api.SocialMakeFriendsRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SocialMakeFriendsRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialMakeFriendsRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SocialMakeFriendsRequest> = {
	}

	return result
}

export function modelApiSocialMakeFriendsRequestFromRequest(name: string, value: any): Api.SocialMakeFriendsRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SocialMakeFriendsRequest = modelApiSocialMakeFriendsRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialMakeFriendsRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSocialMakeFriendsRequestToResponse(name: string, value: Api.SocialMakeFriendsRequest): ToResponse<Api.SocialMakeFriendsRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SocialMakeFriendsRequest> = modelApiSocialMakeFriendsRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialMakeFriendsRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSocialMakeFriendsResponseKeys: string[] = []

function modelApiSocialMakeFriendsResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SocialMakeFriendsResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialMakeFriendsResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SocialMakeFriendsResponse = {
	}

	return result
}

function modelApiSocialMakeFriendsResponseToResponseContent(name: string, value: Api.SocialMakeFriendsResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SocialMakeFriendsResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSocialMakeFriendsResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SocialMakeFriendsResponse> = {
	}

	return result
}

export function modelApiSocialMakeFriendsResponseFromRequest(name: string, value: any): Api.SocialMakeFriendsResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SocialMakeFriendsResponse = modelApiSocialMakeFriendsResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialMakeFriendsResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSocialMakeFriendsResponseToResponse(name: string, value: Api.SocialMakeFriendsResponse): ToResponse<Api.SocialMakeFriendsResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SocialMakeFriendsResponse> = modelApiSocialMakeFriendsResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SocialMakeFriendsResponse: ${key}`
			}
		}
	}

	return result
}

const ApiStoreGetStateRequestKeys: string[] = ['did', 'condition']

function modelApiStoreGetStateRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.StoreGetStateRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreGetStateRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.StoreGetStateRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'condition': allowUndefined(stringFromRequest)(`${name}.condition`, value['condition']),
	}

	return result
}

function modelApiStoreGetStateRequestToResponseContent(name: string, value: Api.StoreGetStateRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.StoreGetStateRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreGetStateRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.StoreGetStateRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'condition': allowUndefined(stringToResponse)(`${name}.condition`, value['condition']),
	}

	return result
}

export function modelApiStoreGetStateRequestFromRequest(name: string, value: any): Api.StoreGetStateRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.StoreGetStateRequest = modelApiStoreGetStateRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreGetStateRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiStoreGetStateRequestToResponse(name: string, value: Api.StoreGetStateRequest): ToResponse<Api.StoreGetStateRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.StoreGetStateRequest> = modelApiStoreGetStateRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreGetStateRequest: ${key}`
			}
		}
	}

	return result
}

const ApiStoreGetStateResponseKeys: string[] = ['status']

function modelApiStoreGetStateResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.StoreGetStateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreGetStateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.StoreGetStateResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiStoreGetStateResponseToResponseContent(name: string, value: Api.StoreGetStateResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.StoreGetStateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreGetStateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.StoreGetStateResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiStoreGetStateResponseFromRequest(name: string, value: any): Api.StoreGetStateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.StoreGetStateResponse = modelApiStoreGetStateResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreGetStateResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiStoreGetStateResponseToResponse(name: string, value: Api.StoreGetStateResponse): ToResponse<Api.StoreGetStateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.StoreGetStateResponse> = modelApiStoreGetStateResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreGetStateResponse: ${key}`
			}
		}
	}

	return result
}

const ApiStoreTransferRequestKeys: string[] = ['did']

function modelApiStoreTransferRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.StoreTransferRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreTransferRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.StoreTransferRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiStoreTransferRequestToResponseContent(name: string, value: Api.StoreTransferRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.StoreTransferRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiStoreTransferRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.StoreTransferRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiStoreTransferRequestFromRequest(name: string, value: any): Api.StoreTransferRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.StoreTransferRequest = modelApiStoreTransferRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreTransferRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiStoreTransferRequestToResponse(name: string, value: Api.StoreTransferRequest): ToResponse<Api.StoreTransferRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.StoreTransferRequest> = modelApiStoreTransferRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.StoreTransferRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSupportCollectSupportRequestKeys: string[] = ['header', 'body']

function modelApiSupportCollectSupportRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SupportCollectSupportRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SupportCollectSupportRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSupportCollectSupportRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSupportCollectSupportRequestToResponseContent(name: string, value: Api.SupportCollectSupportRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SupportCollectSupportRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SupportCollectSupportRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSupportCollectSupportRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSupportCollectSupportRequestFromRequest(name: string, value: any): Api.SupportCollectSupportRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SupportCollectSupportRequest = modelApiSupportCollectSupportRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiSupportCollectSupportRequestToResponse(name: string, value: Api.SupportCollectSupportRequest): ToResponse<Api.SupportCollectSupportRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SupportCollectSupportRequest> = modelApiSupportCollectSupportRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportRequest: ${key}`
			}
		}
	}

	return result
}

const ApiSupportCollectSupportRequestBodyKeys: string[] = ['code', 'faq']

function modelApiSupportCollectSupportRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SupportCollectSupportRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SupportCollectSupportRequestBody = {
		'code': allowUndefined(enumApiSupportSupportCodeEnumFromRequest)(`${name}.code`, value['code']),
		'faq': allowUndefined(modelApiSupportFaqMetadataFromRequest)(`${name}.faq`, value['faq']),
	}

	return result
}

function modelApiSupportCollectSupportRequestBodyToResponseContent(name: string, value: Api.SupportCollectSupportRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SupportCollectSupportRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SupportCollectSupportRequestBody> = {
		'code': allowUndefined(enumApiSupportSupportCodeEnumToResponse)(`${name}.code`, value['code']),
		'faq': allowUndefined(modelApiSupportFaqMetadataToResponse)(`${name}.faq`, value['faq']),
	}

	return result
}

export function modelApiSupportCollectSupportRequestBodyFromRequest(name: string, value: any): Api.SupportCollectSupportRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SupportCollectSupportRequestBody = modelApiSupportCollectSupportRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSupportCollectSupportRequestBodyToResponse(name: string, value: Api.SupportCollectSupportRequestBody): ToResponse<Api.SupportCollectSupportRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SupportCollectSupportRequestBody> = modelApiSupportCollectSupportRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiSupportCollectSupportResponseKeys: string[] = ['header', 'body']

function modelApiSupportCollectSupportResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SupportCollectSupportResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SupportCollectSupportResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSupportCollectSupportResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiSupportCollectSupportResponseToResponseContent(name: string, value: Api.SupportCollectSupportResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SupportCollectSupportResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SupportCollectSupportResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiSupportCollectSupportResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiSupportCollectSupportResponseFromRequest(name: string, value: any): Api.SupportCollectSupportResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SupportCollectSupportResponse = modelApiSupportCollectSupportResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiSupportCollectSupportResponseToResponse(name: string, value: Api.SupportCollectSupportResponse): ToResponse<Api.SupportCollectSupportResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SupportCollectSupportResponse> = modelApiSupportCollectSupportResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportResponse: ${key}`
			}
		}
	}

	return result
}

const ApiSupportCollectSupportResponseBodyKeys: string[] = ['status']

function modelApiSupportCollectSupportResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SupportCollectSupportResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SupportCollectSupportResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiSupportCollectSupportResponseBodyToResponseContent(name: string, value: Api.SupportCollectSupportResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SupportCollectSupportResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportCollectSupportResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SupportCollectSupportResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiSupportCollectSupportResponseBodyFromRequest(name: string, value: any): Api.SupportCollectSupportResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SupportCollectSupportResponseBody = modelApiSupportCollectSupportResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiSupportCollectSupportResponseBodyToResponse(name: string, value: Api.SupportCollectSupportResponseBody): ToResponse<Api.SupportCollectSupportResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SupportCollectSupportResponseBody> = modelApiSupportCollectSupportResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportCollectSupportResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiSupportFaqMetadataKeys: string[] = ['did', 'email', 'type', 'description', 'createdAt', 'signature']

function modelApiSupportFaqMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.SupportFaqMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportFaqMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.SupportFaqMetadata = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'email': allowUndefined(stringFromRequest)(`${name}.email`, value['email']),
		'type': allowUndefined(stringFromRequest)(`${name}.type`, value['type']),
		'description': allowUndefined(stringFromRequest)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiSupportFaqMetadataToResponseContent(name: string, value: Api.SupportFaqMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.SupportFaqMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiSupportFaqMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.SupportFaqMetadata> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'email': allowUndefined(stringToResponse)(`${name}.email`, value['email']),
		'type': allowUndefined(stringToResponse)(`${name}.type`, value['type']),
		'description': allowUndefined(stringToResponse)(`${name}.description`, value['description']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiSupportFaqMetadataFromRequest(name: string, value: any): Api.SupportFaqMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.SupportFaqMetadata = modelApiSupportFaqMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportFaqMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiSupportFaqMetadataToResponse(name: string, value: Api.SupportFaqMetadata): ToResponse<Api.SupportFaqMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.SupportFaqMetadata> = modelApiSupportFaqMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.SupportFaqMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiSupportSupportCodeEnumFromRequest(name: string, value: any): Api.SupportSupportCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SUPPORT_CODE_FAQ') {
		return Api.SupportSupportCodeEnum.SUPPORTCODEFAQ
	}
	if (value === 'SUPPORT_CODE_CSR') {
		return Api.SupportSupportCodeEnum.SUPPORTCODECSR
	}
	if (value === 'SUPPORT_CODE_IVR') {
		return Api.SupportSupportCodeEnum.SUPPORTCODEIVR
	}

	throw `Unexpected enum value for Api.SupportSupportCodeEnum: ${value}`
}

export function enumApiSupportSupportCodeEnumToResponse(name: string, value: Api.SupportSupportCodeEnum): Api.SupportSupportCodeEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'SUPPORT_CODE_FAQ') {
		return Api.SupportSupportCodeEnum.SUPPORTCODEFAQ
	}
	if (value === 'SUPPORT_CODE_CSR') {
		return Api.SupportSupportCodeEnum.SUPPORTCODECSR
	}
	if (value === 'SUPPORT_CODE_IVR') {
		return Api.SupportSupportCodeEnum.SUPPORTCODEIVR
	}

	throw `Unexpected enum value for Api.SupportSupportCodeEnum: ${value}`
}

const ApiTaskCreateTaskRequestKeys: string[] = []

function modelApiTaskCreateTaskRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TaskCreateTaskRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTaskCreateTaskRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TaskCreateTaskRequest = {
	}

	return result
}

function modelApiTaskCreateTaskRequestToResponseContent(name: string, value: Api.TaskCreateTaskRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TaskCreateTaskRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTaskCreateTaskRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TaskCreateTaskRequest> = {
	}

	return result
}

export function modelApiTaskCreateTaskRequestFromRequest(name: string, value: any): Api.TaskCreateTaskRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TaskCreateTaskRequest = modelApiTaskCreateTaskRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TaskCreateTaskRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiTaskCreateTaskRequestToResponse(name: string, value: Api.TaskCreateTaskRequest): ToResponse<Api.TaskCreateTaskRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TaskCreateTaskRequest> = modelApiTaskCreateTaskRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TaskCreateTaskRequest: ${key}`
			}
		}
	}

	return result
}

const ApiTaskCreateTaskResponseKeys: string[] = []

function modelApiTaskCreateTaskResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TaskCreateTaskResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTaskCreateTaskResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TaskCreateTaskResponse = {
	}

	return result
}

function modelApiTaskCreateTaskResponseToResponseContent(name: string, value: Api.TaskCreateTaskResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TaskCreateTaskResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTaskCreateTaskResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TaskCreateTaskResponse> = {
	}

	return result
}

export function modelApiTaskCreateTaskResponseFromRequest(name: string, value: any): Api.TaskCreateTaskResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TaskCreateTaskResponse = modelApiTaskCreateTaskResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TaskCreateTaskResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiTaskCreateTaskResponseToResponse(name: string, value: Api.TaskCreateTaskResponse): ToResponse<Api.TaskCreateTaskResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TaskCreateTaskResponse> = modelApiTaskCreateTaskResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TaskCreateTaskResponse: ${key}`
			}
		}
	}

	return result
}

const ApiTopicSubscribeRequestKeys: string[] = ['owner', 'topicMetadata']

function modelApiTopicSubscribeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TopicSubscribeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicSubscribeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TopicSubscribeRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'topicMetadata': allowUndefined(arrayFromRequest(modelApiTopicTopicMetadataFromRequest))(`${name}.topicMetadata`, value['topicMetadata']),
	}

	return result
}

function modelApiTopicSubscribeRequestToResponseContent(name: string, value: Api.TopicSubscribeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TopicSubscribeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicSubscribeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TopicSubscribeRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'topicMetadata': allowUndefined(arrayToResponse(modelApiTopicTopicMetadataToResponse))(`${name}.topicMetadata`, value['topicMetadata']),
	}

	return result
}

export function modelApiTopicSubscribeRequestFromRequest(name: string, value: any): Api.TopicSubscribeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TopicSubscribeRequest = modelApiTopicSubscribeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicSubscribeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiTopicSubscribeRequestToResponse(name: string, value: Api.TopicSubscribeRequest): ToResponse<Api.TopicSubscribeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TopicSubscribeRequest> = modelApiTopicSubscribeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicSubscribeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiTopicSubscribeResponseKeys: string[] = ['status']

function modelApiTopicSubscribeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TopicSubscribeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicSubscribeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TopicSubscribeResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiTopicSubscribeResponseToResponseContent(name: string, value: Api.TopicSubscribeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TopicSubscribeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicSubscribeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TopicSubscribeResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiTopicSubscribeResponseFromRequest(name: string, value: any): Api.TopicSubscribeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TopicSubscribeResponse = modelApiTopicSubscribeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicSubscribeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiTopicSubscribeResponseToResponse(name: string, value: Api.TopicSubscribeResponse): ToResponse<Api.TopicSubscribeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TopicSubscribeResponse> = modelApiTopicSubscribeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicSubscribeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiTopicTopicMetadataKeys: string[] = ['name', 'format', 'expression', 'status']

function modelApiTopicTopicMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TopicTopicMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicTopicMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TopicTopicMetadata = {
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'format': allowUndefined(arrayFromRequest(enumApiCommonDigitalFormatEnumFromRequest))(`${name}.format`, value['format']),
		'expression': allowUndefined(stringFromRequest)(`${name}.expression`, value['expression']),
		'status': allowUndefined(enumApiCommonContractStatusEnumFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiTopicTopicMetadataToResponseContent(name: string, value: Api.TopicTopicMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TopicTopicMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicTopicMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TopicTopicMetadata> = {
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'format': allowUndefined(arrayToResponse(enumApiCommonDigitalFormatEnumToResponse))(`${name}.format`, value['format']),
		'expression': allowUndefined(stringToResponse)(`${name}.expression`, value['expression']),
		'status': allowUndefined(enumApiCommonContractStatusEnumToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiTopicTopicMetadataFromRequest(name: string, value: any): Api.TopicTopicMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TopicTopicMetadata = modelApiTopicTopicMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicTopicMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiTopicTopicMetadataToResponse(name: string, value: Api.TopicTopicMetadata): ToResponse<Api.TopicTopicMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TopicTopicMetadata> = modelApiTopicTopicMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicTopicMetadata: ${key}`
			}
		}
	}

	return result
}

const ApiTopicUnsubscribeRequestKeys: string[] = ['owner', 'name']

function modelApiTopicUnsubscribeRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TopicUnsubscribeRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicUnsubscribeRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TopicUnsubscribeRequest = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'name': allowUndefined(arrayFromRequest(stringFromRequest))(`${name}.name`, value['name']),
	}

	return result
}

function modelApiTopicUnsubscribeRequestToResponseContent(name: string, value: Api.TopicUnsubscribeRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TopicUnsubscribeRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicUnsubscribeRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TopicUnsubscribeRequest> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'name': allowUndefined(arrayToResponse(stringToResponse))(`${name}.name`, value['name']),
	}

	return result
}

export function modelApiTopicUnsubscribeRequestFromRequest(name: string, value: any): Api.TopicUnsubscribeRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TopicUnsubscribeRequest = modelApiTopicUnsubscribeRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicUnsubscribeRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiTopicUnsubscribeRequestToResponse(name: string, value: Api.TopicUnsubscribeRequest): ToResponse<Api.TopicUnsubscribeRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TopicUnsubscribeRequest> = modelApiTopicUnsubscribeRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicUnsubscribeRequest: ${key}`
			}
		}
	}

	return result
}

const ApiTopicUnsubscribeResponseKeys: string[] = ['status']

function modelApiTopicUnsubscribeResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.TopicUnsubscribeResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicUnsubscribeResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.TopicUnsubscribeResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiTopicUnsubscribeResponseToResponseContent(name: string, value: Api.TopicUnsubscribeResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.TopicUnsubscribeResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiTopicUnsubscribeResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.TopicUnsubscribeResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiTopicUnsubscribeResponseFromRequest(name: string, value: any): Api.TopicUnsubscribeResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.TopicUnsubscribeResponse = modelApiTopicUnsubscribeResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicUnsubscribeResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiTopicUnsubscribeResponseToResponse(name: string, value: Api.TopicUnsubscribeResponse): ToResponse<Api.TopicUnsubscribeResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.TopicUnsubscribeResponse> = modelApiTopicUnsubscribeResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.TopicUnsubscribeResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserAddUserRequestKeys: string[] = ['header', 'body']

function modelApiUserAddUserRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserAddUserRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserAddUserRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserAddUserRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserAddUserRequestToResponseContent(name: string, value: Api.UserAddUserRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserAddUserRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserAddUserRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserAddUserRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserAddUserRequestFromRequest(name: string, value: any): Api.UserAddUserRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserAddUserRequest = modelApiUserAddUserRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserAddUserRequestToResponse(name: string, value: Api.UserAddUserRequest): ToResponse<Api.UserAddUserRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserAddUserRequest> = modelApiUserAddUserRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserAddUserRequestBodyKeys: string[] = ['user']

function modelApiUserAddUserRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserAddUserRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserAddUserRequestBody = {
		'user': allowUndefined(modelApiUserUserMetadataFromRequest)(`${name}.user`, value['user']),
	}

	return result
}

function modelApiUserAddUserRequestBodyToResponseContent(name: string, value: Api.UserAddUserRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserAddUserRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserAddUserRequestBody> = {
		'user': allowUndefined(modelApiUserUserMetadataToResponse)(`${name}.user`, value['user']),
	}

	return result
}

export function modelApiUserAddUserRequestBodyFromRequest(name: string, value: any): Api.UserAddUserRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserAddUserRequestBody = modelApiUserAddUserRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserAddUserRequestBodyToResponse(name: string, value: Api.UserAddUserRequestBody): ToResponse<Api.UserAddUserRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserAddUserRequestBody> = modelApiUserAddUserRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserAddUserResponseKeys: string[] = ['header', 'body']

function modelApiUserAddUserResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserAddUserResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserAddUserResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserAddUserResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserAddUserResponseToResponseContent(name: string, value: Api.UserAddUserResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserAddUserResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserAddUserResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserAddUserResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserAddUserResponseFromRequest(name: string, value: any): Api.UserAddUserResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserAddUserResponse = modelApiUserAddUserResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserAddUserResponseToResponse(name: string, value: Api.UserAddUserResponse): ToResponse<Api.UserAddUserResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserAddUserResponse> = modelApiUserAddUserResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserAddUserResponseBodyKeys: string[] = ['status', 'user']

function modelApiUserAddUserResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserAddUserResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserAddUserResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'user': allowUndefined(modelApiUserUserMetadataFromRequest)(`${name}.user`, value['user']),
	}

	return result
}

function modelApiUserAddUserResponseBodyToResponseContent(name: string, value: Api.UserAddUserResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserAddUserResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserAddUserResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserAddUserResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'user': allowUndefined(modelApiUserUserMetadataToResponse)(`${name}.user`, value['user']),
	}

	return result
}

export function modelApiUserAddUserResponseBodyFromRequest(name: string, value: any): Api.UserAddUserResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserAddUserResponseBody = modelApiUserAddUserResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserAddUserResponseBodyToResponse(name: string, value: Api.UserAddUserResponseBody): ToResponse<Api.UserAddUserResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserAddUserResponseBody> = modelApiUserAddUserResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserAddUserResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserDeleteUserRequestKeys: string[] = ['header']

function modelApiUserDeleteUserRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserDeleteUserRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserDeleteUserRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiUserDeleteUserRequestToResponseContent(name: string, value: Api.UserDeleteUserRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserDeleteUserRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserDeleteUserRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiUserDeleteUserRequestFromRequest(name: string, value: any): Api.UserDeleteUserRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserDeleteUserRequest = modelApiUserDeleteUserRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserDeleteUserRequestToResponse(name: string, value: Api.UserDeleteUserRequest): ToResponse<Api.UserDeleteUserRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserDeleteUserRequest> = modelApiUserDeleteUserRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserDeleteUserResponseKeys: string[] = ['header', 'body']

function modelApiUserDeleteUserResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserDeleteUserResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserDeleteUserResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserDeleteUserResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserDeleteUserResponseToResponseContent(name: string, value: Api.UserDeleteUserResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserDeleteUserResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserDeleteUserResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserDeleteUserResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserDeleteUserResponseFromRequest(name: string, value: any): Api.UserDeleteUserResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserDeleteUserResponse = modelApiUserDeleteUserResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserDeleteUserResponseToResponse(name: string, value: Api.UserDeleteUserResponse): ToResponse<Api.UserDeleteUserResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserDeleteUserResponse> = modelApiUserDeleteUserResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserDeleteUserResponseBodyKeys: string[] = ['status']

function modelApiUserDeleteUserResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserDeleteUserResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserDeleteUserResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiUserDeleteUserResponseBodyToResponseContent(name: string, value: Api.UserDeleteUserResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserDeleteUserResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserDeleteUserResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserDeleteUserResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiUserDeleteUserResponseBodyFromRequest(name: string, value: any): Api.UserDeleteUserResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserDeleteUserResponseBody = modelApiUserDeleteUserResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserDeleteUserResponseBodyToResponse(name: string, value: Api.UserDeleteUserResponseBody): ToResponse<Api.UserDeleteUserResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserDeleteUserResponseBody> = modelApiUserDeleteUserResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserDeleteUserResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateStatusRequestKeys: string[] = ['header', 'body']

function modelApiUserUpdateStatusRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateStatusRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateStatusRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateStatusRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUpdateStatusRequestToResponseContent(name: string, value: Api.UserUpdateStatusRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateStatusRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateStatusRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateStatusRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUpdateStatusRequestFromRequest(name: string, value: any): Api.UserUpdateStatusRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateStatusRequest = modelApiUserUpdateStatusRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateStatusRequestToResponse(name: string, value: Api.UserUpdateStatusRequest): ToResponse<Api.UserUpdateStatusRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateStatusRequest> = modelApiUserUpdateStatusRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateStatusRequestBodyKeys: string[] = ['did', 'status']

function modelApiUserUpdateStatusRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateStatusRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateStatusRequestBody = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'status': allowUndefined(enumApiUserUserStatusEnumFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiUserUpdateStatusRequestBodyToResponseContent(name: string, value: Api.UserUpdateStatusRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateStatusRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateStatusRequestBody> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'status': allowUndefined(enumApiUserUserStatusEnumToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiUserUpdateStatusRequestBodyFromRequest(name: string, value: any): Api.UserUpdateStatusRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateStatusRequestBody = modelApiUserUpdateStatusRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateStatusRequestBodyToResponse(name: string, value: Api.UserUpdateStatusRequestBody): ToResponse<Api.UserUpdateStatusRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateStatusRequestBody> = modelApiUserUpdateStatusRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateStatusResponseKeys: string[] = ['header', 'body']

function modelApiUserUpdateStatusResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateStatusResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateStatusResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateStatusResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUpdateStatusResponseToResponseContent(name: string, value: Api.UserUpdateStatusResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateStatusResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateStatusResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateStatusResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUpdateStatusResponseFromRequest(name: string, value: any): Api.UserUpdateStatusResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateStatusResponse = modelApiUserUpdateStatusResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateStatusResponseToResponse(name: string, value: Api.UserUpdateStatusResponse): ToResponse<Api.UserUpdateStatusResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateStatusResponse> = modelApiUserUpdateStatusResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateStatusResponseBodyKeys: string[] = ['status']

function modelApiUserUpdateStatusResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateStatusResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateStatusResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiUserUpdateStatusResponseBodyToResponseContent(name: string, value: Api.UserUpdateStatusResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateStatusResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateStatusResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateStatusResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiUserUpdateStatusResponseBodyFromRequest(name: string, value: any): Api.UserUpdateStatusResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateStatusResponseBody = modelApiUserUpdateStatusResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateStatusResponseBodyToResponse(name: string, value: Api.UserUpdateStatusResponseBody): ToResponse<Api.UserUpdateStatusResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateStatusResponseBody> = modelApiUserUpdateStatusResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateStatusResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateUserRequestKeys: string[] = ['header', 'body']

function modelApiUserUpdateUserRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateUserRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateUserRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateUserRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUpdateUserRequestToResponseContent(name: string, value: Api.UserUpdateUserRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateUserRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateUserRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateUserRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUpdateUserRequestFromRequest(name: string, value: any): Api.UserUpdateUserRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateUserRequest = modelApiUserUpdateUserRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateUserRequestToResponse(name: string, value: Api.UserUpdateUserRequest): ToResponse<Api.UserUpdateUserRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateUserRequest> = modelApiUserUpdateUserRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateUserRequestBodyKeys: string[] = ['user']

function modelApiUserUpdateUserRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateUserRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateUserRequestBody = {
		'user': allowUndefined(modelApiUserUserMetadataFromRequest)(`${name}.user`, value['user']),
	}

	return result
}

function modelApiUserUpdateUserRequestBodyToResponseContent(name: string, value: Api.UserUpdateUserRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateUserRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateUserRequestBody> = {
		'user': allowUndefined(modelApiUserUserMetadataToResponse)(`${name}.user`, value['user']),
	}

	return result
}

export function modelApiUserUpdateUserRequestBodyFromRequest(name: string, value: any): Api.UserUpdateUserRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateUserRequestBody = modelApiUserUpdateUserRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateUserRequestBodyToResponse(name: string, value: Api.UserUpdateUserRequestBody): ToResponse<Api.UserUpdateUserRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateUserRequestBody> = modelApiUserUpdateUserRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateUserResponseKeys: string[] = ['header', 'body']

function modelApiUserUpdateUserResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateUserResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateUserResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateUserResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUpdateUserResponseToResponseContent(name: string, value: Api.UserUpdateUserResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateUserResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateUserResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUpdateUserResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUpdateUserResponseFromRequest(name: string, value: any): Api.UserUpdateUserResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateUserResponse = modelApiUserUpdateUserResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateUserResponseToResponse(name: string, value: Api.UserUpdateUserResponse): ToResponse<Api.UserUpdateUserResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateUserResponse> = modelApiUserUpdateUserResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserUpdateUserResponseBodyKeys: string[] = ['status', 'user']

function modelApiUserUpdateUserResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUpdateUserResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUpdateUserResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'user': allowUndefined(modelApiUserUserMetadataFromRequest)(`${name}.user`, value['user']),
	}

	return result
}

function modelApiUserUpdateUserResponseBodyToResponseContent(name: string, value: Api.UserUpdateUserResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUpdateUserResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUpdateUserResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUpdateUserResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'user': allowUndefined(modelApiUserUserMetadataToResponse)(`${name}.user`, value['user']),
	}

	return result
}

export function modelApiUserUpdateUserResponseBodyFromRequest(name: string, value: any): Api.UserUpdateUserResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUpdateUserResponseBody = modelApiUserUpdateUserResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUpdateUserResponseBodyToResponse(name: string, value: Api.UserUpdateUserResponseBody): ToResponse<Api.UserUpdateUserResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUpdateUserResponseBody> = modelApiUserUpdateUserResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUpdateUserResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserDetailKeys: string[] = ['user', 'state']

function modelApiUserUserDetailFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserDetail {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserDetail = {
		'user': allowUndefined(modelApiUserUserMetadataFromRequest)(`${name}.user`, value['user']),
		'state': allowUndefined(modelApiUserUserStateFromRequest)(`${name}.state`, value['state']),
	}

	return result
}

function modelApiUserUserDetailToResponseContent(name: string, value: Api.UserUserDetail, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserDetail> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserDetail> = {
		'user': allowUndefined(modelApiUserUserMetadataToResponse)(`${name}.user`, value['user']),
		'state': allowUndefined(modelApiUserUserStateToResponse)(`${name}.state`, value['state']),
	}

	return result
}

export function modelApiUserUserDetailFromRequest(name: string, value: any): Api.UserUserDetail {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserDetail = modelApiUserUserDetailFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetail: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserDetailToResponse(name: string, value: Api.UserUserDetail): ToResponse<Api.UserUserDetail> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserDetail> = modelApiUserUserDetailToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetail: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserDetailRequestKeys: string[] = ['header']

function modelApiUserUserDetailRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserDetailRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserDetailRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
	}

	return result
}

function modelApiUserUserDetailRequestToResponseContent(name: string, value: Api.UserUserDetailRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserDetailRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserDetailRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
	}

	return result
}

export function modelApiUserUserDetailRequestFromRequest(name: string, value: any): Api.UserUserDetailRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserDetailRequest = modelApiUserUserDetailRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserDetailRequestToResponse(name: string, value: Api.UserUserDetailRequest): ToResponse<Api.UserUserDetailRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserDetailRequest> = modelApiUserUserDetailRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserDetailResponseKeys: string[] = ['header', 'body']

function modelApiUserUserDetailResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserDetailResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserDetailResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserDetailResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUserDetailResponseToResponseContent(name: string, value: Api.UserUserDetailResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserDetailResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserDetailResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserDetailResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUserDetailResponseFromRequest(name: string, value: any): Api.UserUserDetailResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserDetailResponse = modelApiUserUserDetailResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserDetailResponseToResponse(name: string, value: Api.UserUserDetailResponse): ToResponse<Api.UserUserDetailResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserDetailResponse> = modelApiUserUserDetailResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserDetailResponseBodyKeys: string[] = ['status', 'detail']

function modelApiUserUserDetailResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserDetailResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserDetailResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiUserUserDetailFromRequest)(`${name}.detail`, value['detail']),
	}

	return result
}

function modelApiUserUserDetailResponseBodyToResponseContent(name: string, value: Api.UserUserDetailResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserDetailResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserDetailResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserDetailResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'detail': allowUndefined(modelApiUserUserDetailToResponse)(`${name}.detail`, value['detail']),
	}

	return result
}

export function modelApiUserUserDetailResponseBodyFromRequest(name: string, value: any): Api.UserUserDetailResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserDetailResponseBody = modelApiUserUserDetailResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserDetailResponseBodyToResponse(name: string, value: Api.UserUserDetailResponseBody): ToResponse<Api.UserUserDetailResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserDetailResponseBody> = modelApiUserUserDetailResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserDetailResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserListRequestKeys: string[] = ['header', 'body']

function modelApiUserUserListRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserListRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserListRequest = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserListRequestBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUserListRequestToResponseContent(name: string, value: Api.UserUserListRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserListRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserListRequest> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserListRequestBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUserListRequestFromRequest(name: string, value: any): Api.UserUserListRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserListRequest = modelApiUserUserListRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserListRequestToResponse(name: string, value: Api.UserUserListRequest): ToResponse<Api.UserUserListRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserListRequest> = modelApiUserUserListRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListRequest: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserListRequestBodyKeys: string[] = ['pageIndex', 'pageSize']

function modelApiUserUserListRequestBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserListRequestBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListRequestBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserListRequestBody = {
		'pageIndex': allowUndefined(integerFromRequest)(`${name}.pageIndex`, value['pageIndex']),
		'pageSize': allowUndefined(integerFromRequest)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

function modelApiUserUserListRequestBodyToResponseContent(name: string, value: Api.UserUserListRequestBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserListRequestBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListRequestBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserListRequestBody> = {
		'pageIndex': allowUndefined(integerToResponse)(`${name}.pageIndex`, value['pageIndex']),
		'pageSize': allowUndefined(integerToResponse)(`${name}.pageSize`, value['pageSize']),
	}

	return result
}

export function modelApiUserUserListRequestBodyFromRequest(name: string, value: any): Api.UserUserListRequestBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserListRequestBody = modelApiUserUserListRequestBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListRequestBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserListRequestBodyToResponse(name: string, value: Api.UserUserListRequestBody): ToResponse<Api.UserUserListRequestBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserListRequestBody> = modelApiUserUserListRequestBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListRequestBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserListResponseKeys: string[] = ['header', 'body']

function modelApiUserUserListResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserListResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserListResponse = {
		'header': allowUndefined(modelApiCommonMessageHeaderFromRequest)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserListResponseBodyFromRequest)(`${name}.body`, value['body']),
	}

	return result
}

function modelApiUserUserListResponseToResponseContent(name: string, value: Api.UserUserListResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserListResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserListResponse> = {
		'header': allowUndefined(modelApiCommonMessageHeaderToResponse)(`${name}.header`, value['header']),
		'body': allowUndefined(modelApiUserUserListResponseBodyToResponse)(`${name}.body`, value['body']),
	}

	return result
}

export function modelApiUserUserListResponseFromRequest(name: string, value: any): Api.UserUserListResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserListResponse = modelApiUserUserListResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserListResponseToResponse(name: string, value: Api.UserUserListResponse): ToResponse<Api.UserUserListResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserListResponse> = modelApiUserUserListResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListResponse: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserListResponseBodyKeys: string[] = ['status', 'list', 'total']

function modelApiUserUserListResponseBodyFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserListResponseBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListResponseBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserListResponseBody = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayFromRequest(modelApiUserUserDetailFromRequest))(`${name}.list`, value['list']),
		'total': allowUndefined(stringFromRequest)(`${name}.total`, value['total']),
	}

	return result
}

function modelApiUserUserListResponseBodyToResponseContent(name: string, value: Api.UserUserListResponseBody, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserListResponseBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserListResponseBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserListResponseBody> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
		'list': allowUndefined(arrayToResponse(modelApiUserUserDetailToResponse))(`${name}.list`, value['list']),
		'total': allowUndefined(stringToResponse)(`${name}.total`, value['total']),
	}

	return result
}

export function modelApiUserUserListResponseBodyFromRequest(name: string, value: any): Api.UserUserListResponseBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserListResponseBody = modelApiUserUserListResponseBodyFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListResponseBody: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserListResponseBodyToResponse(name: string, value: Api.UserUserListResponseBody): ToResponse<Api.UserUserListResponseBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserListResponseBody> = modelApiUserUserListResponseBodyToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserListResponseBody: ${key}`
			}
		}
	}

	return result
}

const ApiUserUserMetadataKeys: string[] = ['did', 'name', 'avatar', 'createdAt', 'updatedAt', 'signature', 'telephone', 'email']

function modelApiUserUserMetadataFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserMetadata {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserMetadataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserMetadata = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'name': allowUndefined(stringFromRequest)(`${name}.name`, value['name']),
		'avatar': allowUndefined(stringFromRequest)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
		'telephone': allowUndefined(stringFromRequest)(`${name}.telephone`, value['telephone']),
		'email': allowUndefined(stringFromRequest)(`${name}.email`, value['email']),
	}

	return result
}

function modelApiUserUserMetadataToResponseContent(name: string, value: Api.UserUserMetadata, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserMetadata> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserMetadataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserMetadata> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'name': allowUndefined(stringToResponse)(`${name}.name`, value['name']),
		'avatar': allowUndefined(stringToResponse)(`${name}.avatar`, value['avatar']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
		'telephone': allowUndefined(stringToResponse)(`${name}.telephone`, value['telephone']),
		'email': allowUndefined(stringToResponse)(`${name}.email`, value['email']),
	}

	return result
}

export function modelApiUserUserMetadataFromRequest(name: string, value: any): Api.UserUserMetadata {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserMetadata = modelApiUserUserMetadataFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserMetadata: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserMetadataToResponse(name: string, value: Api.UserUserMetadata): ToResponse<Api.UserUserMetadata> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserMetadata> = modelApiUserUserMetadataToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserMetadata: ${key}`
			}
		}
	}

	return result
}

export function enumApiUserUserRoleEnumFromRequest(name: string, value: any): Api.UserUserRoleEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'USER_ROLE_UNKNOWN') {
		return Api.UserUserRoleEnum.USERROLEUNKNOWN
	}
	if (value === 'USER_ROLE_OWNER') {
		return Api.UserUserRoleEnum.USERROLEOWNER
	}
	if (value === 'USER_ROLE_NORMAL') {
		return Api.UserUserRoleEnum.USERROLENORMAL
	}

	throw `Unexpected enum value for Api.UserUserRoleEnum: ${value}`
}

export function enumApiUserUserRoleEnumToResponse(name: string, value: Api.UserUserRoleEnum): Api.UserUserRoleEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'USER_ROLE_UNKNOWN') {
		return Api.UserUserRoleEnum.USERROLEUNKNOWN
	}
	if (value === 'USER_ROLE_OWNER') {
		return Api.UserUserRoleEnum.USERROLEOWNER
	}
	if (value === 'USER_ROLE_NORMAL') {
		return Api.UserUserRoleEnum.USERROLENORMAL
	}

	throw `Unexpected enum value for Api.UserUserRoleEnum: ${value}`
}

const ApiUserUserStateKeys: string[] = ['owner', 'did', 'role', 'status', 'createdAt', 'updatedAt', 'signature']

function modelApiUserUserStateFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UserUserState {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserStateKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UserUserState = {
		'owner': allowUndefined(stringFromRequest)(`${name}.owner`, value['owner']),
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
		'role': allowUndefined(enumApiUserUserRoleEnumFromRequest)(`${name}.role`, value['role']),
		'status': allowUndefined(enumApiUserUserStatusEnumFromRequest)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringFromRequest)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringFromRequest)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringFromRequest)(`${name}.signature`, value['signature']),
	}

	return result
}

function modelApiUserUserStateToResponseContent(name: string, value: Api.UserUserState, knownKeys: Record<string, boolean> = {}): ToResponse<Api.UserUserState> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUserUserStateKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.UserUserState> = {
		'owner': allowUndefined(stringToResponse)(`${name}.owner`, value['owner']),
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
		'role': allowUndefined(enumApiUserUserRoleEnumToResponse)(`${name}.role`, value['role']),
		'status': allowUndefined(enumApiUserUserStatusEnumToResponse)(`${name}.status`, value['status']),
		'createdAt': allowUndefined(stringToResponse)(`${name}.createdAt`, value['createdAt']),
		'updatedAt': allowUndefined(stringToResponse)(`${name}.updatedAt`, value['updatedAt']),
		'signature': allowUndefined(stringToResponse)(`${name}.signature`, value['signature']),
	}

	return result
}

export function modelApiUserUserStateFromRequest(name: string, value: any): Api.UserUserState {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UserUserState = modelApiUserUserStateFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserState: ${key}`
			}
		}
	}

	return result
}

export function modelApiUserUserStateToResponse(name: string, value: Api.UserUserState): ToResponse<Api.UserUserState> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.UserUserState> = modelApiUserUserStateToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.UserUserState: ${key}`
			}
		}
	}

	return result
}

export function enumApiUserUserStatusEnumFromRequest(name: string, value: any): Api.UserUserStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'USER_STATUS_UNKNOWN') {
		return Api.UserUserStatusEnum.USERSTATUSUNKNOWN
	}
	if (value === 'USER_STATUS_ACTIVE') {
		return Api.UserUserStatusEnum.USERSTATUSACTIVE
	}
	if (value === 'USER_STATUS_OFFLINE') {
		return Api.UserUserStatusEnum.USERSTATUSOFFLINE
	}
	if (value === 'USER_STATUS_DISABLE') {
		return Api.UserUserStatusEnum.USERSTATUSDISABLE
	}
	if (value === 'USER_STATUS_LOCK') {
		return Api.UserUserStatusEnum.USERSTATUSLOCK
	}
	if (value === 'USER_STATUS_UNVERIFIED') {
		return Api.UserUserStatusEnum.USERSTATUSUNVERIFIED
	}
	if (value === 'USER_STATUS_DELETED') {
		return Api.UserUserStatusEnum.USERSTATUSDELETED
	}
	if (value === 'USER_STATUS_DORMANT') {
		return Api.UserUserStatusEnum.USERSTATUSDORMANT
	}
	if (value === 'USER_STATUS_FREEZE') {
		return Api.UserUserStatusEnum.USERSTATUSFREEZE
	}
	if (value === 'USER_STATUS_AUDIT') {
		return Api.UserUserStatusEnum.USERSTATUSAUDIT
	}
	if (value === 'USER_STATUS_REFUSED') {
		return Api.UserUserStatusEnum.USERSTATUSREFUSED
	}

	throw `Unexpected enum value for Api.UserUserStatusEnum: ${value}`
}

export function enumApiUserUserStatusEnumToResponse(name: string, value: Api.UserUserStatusEnum): Api.UserUserStatusEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'USER_STATUS_UNKNOWN') {
		return Api.UserUserStatusEnum.USERSTATUSUNKNOWN
	}
	if (value === 'USER_STATUS_ACTIVE') {
		return Api.UserUserStatusEnum.USERSTATUSACTIVE
	}
	if (value === 'USER_STATUS_OFFLINE') {
		return Api.UserUserStatusEnum.USERSTATUSOFFLINE
	}
	if (value === 'USER_STATUS_DISABLE') {
		return Api.UserUserStatusEnum.USERSTATUSDISABLE
	}
	if (value === 'USER_STATUS_LOCK') {
		return Api.UserUserStatusEnum.USERSTATUSLOCK
	}
	if (value === 'USER_STATUS_UNVERIFIED') {
		return Api.UserUserStatusEnum.USERSTATUSUNVERIFIED
	}
	if (value === 'USER_STATUS_DELETED') {
		return Api.UserUserStatusEnum.USERSTATUSDELETED
	}
	if (value === 'USER_STATUS_DORMANT') {
		return Api.UserUserStatusEnum.USERSTATUSDORMANT
	}
	if (value === 'USER_STATUS_FREEZE') {
		return Api.UserUserStatusEnum.USERSTATUSFREEZE
	}
	if (value === 'USER_STATUS_AUDIT') {
		return Api.UserUserStatusEnum.USERSTATUSAUDIT
	}
	if (value === 'USER_STATUS_REFUSED') {
		return Api.UserUserStatusEnum.USERSTATUSREFUSED
	}

	throw `Unexpected enum value for Api.UserUserStatusEnum: ${value}`
}

const ApiVectorVectorRequestKeys: string[] = ['did']

function modelApiVectorVectorRequestFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.VectorVectorRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiVectorVectorRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.VectorVectorRequest = {
		'did': allowUndefined(stringFromRequest)(`${name}.did`, value['did']),
	}

	return result
}

function modelApiVectorVectorRequestToResponseContent(name: string, value: Api.VectorVectorRequest, knownKeys: Record<string, boolean> = {}): ToResponse<Api.VectorVectorRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiVectorVectorRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.VectorVectorRequest> = {
		'did': allowUndefined(stringToResponse)(`${name}.did`, value['did']),
	}

	return result
}

export function modelApiVectorVectorRequestFromRequest(name: string, value: any): Api.VectorVectorRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.VectorVectorRequest = modelApiVectorVectorRequestFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.VectorVectorRequest: ${key}`
			}
		}
	}

	return result
}

export function modelApiVectorVectorRequestToResponse(name: string, value: Api.VectorVectorRequest): ToResponse<Api.VectorVectorRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.VectorVectorRequest> = modelApiVectorVectorRequestToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.VectorVectorRequest: ${key}`
			}
		}
	}

	return result
}

const ApiVectorVectorResponseKeys: string[] = ['status']

function modelApiVectorVectorResponseFromRequestContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.VectorVectorResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiVectorVectorResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.VectorVectorResponse = {
		'status': allowUndefined(modelApiCommonResponseStatusFromRequest)(`${name}.status`, value['status']),
	}

	return result
}

function modelApiVectorVectorResponseToResponseContent(name: string, value: Api.VectorVectorResponse, knownKeys: Record<string, boolean> = {}): ToResponse<Api.VectorVectorResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiVectorVectorResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToResponse<Api.VectorVectorResponse> = {
		'status': allowUndefined(modelApiCommonResponseStatusToResponse)(`${name}.status`, value['status']),
	}

	return result
}

export function modelApiVectorVectorResponseFromRequest(name: string, value: any): Api.VectorVectorResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.VectorVectorResponse = modelApiVectorVectorResponseFromRequestContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.VectorVectorResponse: ${key}`
			}
		}
	}

	return result
}

export function modelApiVectorVectorResponseToResponse(name: string, value: Api.VectorVectorResponse): ToResponse<Api.VectorVectorResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToResponse<Api.VectorVectorResponse> = modelApiVectorVectorResponseToResponseContent(name, value, knownKeys)

	/* Known keys */
	if (__options?.failOnUnknownProperties) {
		for (const key of Object.keys(value)) {
			if (!knownKeys[key]) {
				throw `Unexpected key in Api.VectorVectorResponse: ${key}`
			}
		}
	}

	return result
}
